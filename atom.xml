<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[GYF1]]></title>
  <subtitle><![CDATA[Web Platform, Cloud and Mobile Application Development]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.gyf1.com/"/>
  <updated>2015-01-22T08:15:05.035Z</updated>
  <id>http://blog.gyf1.com/</id>
  
  <author>
    <name><![CDATA[GYF1]]></name>
    <email><![CDATA[admin@gyf1.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Understanding Angular’s apply() and digest()]]></title>
    <link href="http://blog.gyf1.com/2015/01/22/understanding-angular%E2%80%99s-apply()-and-digest()/"/>
    <id>http://blog.gyf1.com/2015/01/22/understanding-angular’s-apply()-and-digest()/</id>
    <published>2015-01-22T06:05:53.000Z</published>
    <updated>2015-01-22T08:10:58.000Z</updated>
    <content type="html"><![CDATA[<p>$apply() and $digest() are two core, and sometimes confusing, aspects of AngularJS.<br>To understand how AngularJS works one needs to fully understand how $apply() and $digest() work.<br>This article aims to explain what $apply() and $digest() really are, and how they can be useful in your day-to-day AngularJS programming.</p>
<p><a id="more"></a></p>
<h1 id="$apply_and_$digest_Explored">$apply and $digest Explored</h1>
<p>AngularJS offers an incredibly awesome feature known as two way data binding which greatly simplifies our lives.<br>Data binding means that when you change something in the view, the scope model automagically updates.<br>Similarly, whenever the scope model changes, the view updates itself with the new value.<br>How does does AngularJS do that? When you write an expression (),<br>behind the scenes Angular sets up a watcher on the scope model,<br>which in turn updates the view whenever the model changes.<br>This watcher is just like any watcher you set up in AngularJS:</p>
<pre><code><span class="variable">$scope</span>.<span class="variable">$watch</span>(<span class="string">&apos;aModel&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">(newValue, oldValue)</span> {</span>
  <span class="comment">//update the DOM with newValue</span>
});
</code></pre><p>The second argument passed to $watch() is known as a listener function,<br>and is called whenever the value of aModel changes.<br>It is easy for us to grasp that when the value of aModel changes this listener is called,<br>updating the expression in HTML. B<br>ut, there is still one big question! How does Angular figure out when to call this listener function?<br>In other words, how does AngularJS know when aModel changes so it can call the corresponding listener?<br>Does it run a function periodically to check whether the value of the scope model has changed?<br>Well, this is where the $digest cycle steps in.</p>
<p>It&#x2019;s the $digest cycle where the watchers are fired.<br>When a watcher is fired, AngularJS evaluates the scope model,<br>and if it has changed then the corresponding listener function is called.<br>So, our next question is when and how this $digest cycle starts.</p>
<p>The $digest cycle starts as a result of a call to $scope.$digest().<br>Assume that you change a scope model in a handler function through the ng-click directive.<br>In that case AngularJS automatically triggers a $digest cycle by calling $digest().<br>When the $digest cycle starts, it fires each of the watchers.<br>These watchers check if the current value of the scope model is different from last calculated value.<br>If yes, then the corresponding listener function executes.<br>As a result if you have any expressions in the view they will be updated.<br>In addition to ng-click, there are several other built-in directives/services that let you change models (e.g. ng-model, $timeout, etc) and automatically trigger a $digest cycle.</p>
<p>So far, so good! But, there is a small gotcha.<br>In the above cases, Angular doesn&#x2019;t directly call $digest().<br>Instead, it calls $scope.$apply(), which in turn calls $rootScope.$digest().<br>As a result of this, a digest cycle starts at the $rootScope,<br>and subsequently visits all the child scopes calling the watchers along the way.</p>
<p>Now, let&#x2019;s assume you attach an ng-click directive to a button and pass a function name to it.<br>When the button is clicked, AngularJS wraps the function call within $scope.$apply().<br>So, your function executes as usual, change models (if any),<br>and a $digest cycle starts to ensure your changes are reflected in the view.</p>
<p>Note: $scope.$apply() automatically calls $rootScope.$digest().<br>The $apply() function comes in two flavors.<br>The first one takes a function as an argument, evaluates it, and triggers a $digest cycle.<br>The second version does not take any arguments and just starts a $digest cycle when called.<br>We will see why the former one is the preferred approach shortly.</p>
<h1 id="When_Do_You_Call_$apply()_Manually?">When Do You Call $apply() Manually?</h1>
<p>If AngularJS usually wraps our code in $apply() and starts a $digest cycle,<br>then when do you need to do call $apply() manually?<br>Actually, AngularJS makes one thing pretty clear.<br>It will account for only those model changes which are done inside AngularJS&#x2019; context<br>(i.e. the code that changes models is wrapped inside $apply()).<br>Angular&#x2019;s built-in directives already do this so that any model changes you make are reflected in the view.<br>However, if you change any model outside of the Angular context,<br>then you need to inform Angular of the changes by calling $apply() manually.<br>It&#x2019;s like telling Angular that you are changing some models and it should fire the watchers so that your changes propagate properly.</p>
<p>For example, if you use JavaScript&#x2019;s setTimeout() function to update a scope model,<br>Angular has no way of knowing what you might change.<br>In this case it&#x2019;s your responsibility to call $apply() manually,<br>which triggers a $digest cycle.<br>Similarly, if you have a directive that sets up a DOM event listener and changes some models inside the handler function,<br>you need to call $apply() to ensure the changes take effect.</p>
<p>Let&#x2019;s look at an example.<br>Suppose you have a page, and once the page loads you want to display a message after a two second delay.<br>Your implementation might look something like the JavaScript and HTML shown in the following listing.</p>
<p><em>html</em></p>
<pre><code><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">&quot;myApp&quot;</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">&quot;MessageController&quot;</span>&gt;</span>
    Delayed Message: 
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</code></pre><p><em>js</em></p>
<pre><code><span class="comment">/* What happens without an $apply() */</span>

angular.module(<span class="string">&apos;myApp&apos;</span>,[]).controller(<span class="string">&apos;MessageController&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>)</span> {</span>

  <span class="variable">$scope</span>.getMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="variable">$scope</span>.message = <span class="string">&apos;Fetched after 3 seconds&apos;</span>;
      console.log(<span class="string">&apos;message:&apos;</span>+<span class="variable">$scope</span>.message);
    }, <span class="number">2000</span>);
  }

  <span class="variable">$scope</span>.getMessage();

});
</code></pre><p>By running the example, you will see that the delayed function runs after a two second interval, and updates the scope model message.<br>Still, the view doesn&#x2019;t update.<br>The reason, as you may have guessed, is that we forgot to call $apply() manually.<br>Therefore, we need to update our getMessage() function as shown below.</p>
<p><em>js</em></p>
<pre><code><span class="comment">/* What happens with $apply */</span>
angular.module(<span class="string">&apos;myApp&apos;</span>,[]).controller(<span class="string">&apos;MessageController&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>)</span> {</span>

  <span class="variable">$scope</span>.getMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="variable">$scope</span>.<span class="variable">$apply</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="comment">//wrapped this within $apply</span>
        <span class="variable">$scope</span>.message = <span class="string">&apos;Fetched after 3 seconds&apos;</span>;
        console.log(<span class="string">&apos;message:&apos;</span> + <span class="variable">$scope</span>.message);
      });
    }, <span class="number">2000</span>);
  }

  <span class="variable">$scope</span>.getMessage();

});
</code></pre><p>If you run this updated example, you can see the view update after two seconds.<br>The only change is that we wrapped our code inside $scope.$apply() which automatically triggers $rootScope.$digest().<br>As a result the watchers are fired as usual and the view updates.</p>
<p>Note: By the way, you should use $timeout service whenever possible which is setTimeout() with automatic $apply()<br>so that you don&#x2019;t have to call $apply() manually.</p>
<p>Also, note that in the above code you could have done the model changes as usual and placed a call to $apply()<br>(the no-arg version) in the end. Have a look at the following snippet:</p>
<pre><code><span class="variable">$scope</span>.getMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="variable">$scope</span>.message = <span class="string">&apos;Fetched after two seconds&apos;</span>;
    console.log(<span class="string">&apos;message:&apos;</span> + <span class="variable">$scope</span>.message);
    <span class="variable">$scope</span>.<span class="variable">$apply</span>(); <span class="comment">//this triggers a $digest</span>
  }, <span class="number">2000</span>);
};
</code></pre><p>The above code uses the no-arg version of $apply() and works.<br>Keep in mind that you should always use the version of $apply() that accepts a function argument.<br>This is because when you pass a function to $apply(), the function call is wrapped inside a try&#x2026;catch block,<br>and any exceptions that occur will be passed to the $exceptionHandler service.</p>
<h1 id="How_Many_Times_Does_the_$digest_Loop_Run?">How Many Times Does the $digest Loop Run?</h1>
<p>When a $digest cycle runs, the watchers are executed to see if the scope models have changed.<br>If they have, then the corresponding listener functions are called.<br>This leads to an important question.<br>What if a listener function itself changed a scope model? How would AngularJS account for that change?</p>
<p>The answer is that the $digest loop doesn&#x2019;t run just once.<br>At the end of the current loop, it starts all over again to check if any of the models have changed.<br>This is basically dirty checking, and is done to account for any model changes that might have been done by listener functions.<br>So, the $digest cycle keeps looping until there are no more model changes, or it hits the max loop count of 10.<br>It&#x2019;s always good to stay idempotent and try to minimize model changes inside the listener functions.</p>
<p>Note: At a minimum, $digest will run twice even if your listener functions don&#x2019;t change any models.<br>As discussed above, it runs once more to make sure the models are stable and there are no changes.</p>
<h1 id="Conclusion">Conclusion</h1>
<p>I hope this article has clarified what $apply and $digest are all about.<br>The most important thing to keep in mind is whether or not Angular can detect your changes.<br>If it cannot, then you must call $apply() manually.</p>
<p>&#xFF0A;&#xFF0A;&#xFF0A;&#xFF0A;&#xFF0A;&#xFF0A;&#xFF0A;&#xFF0A;&#xFF0A;<br>&#x539F;&#x6587;&#xFF1A; <a href="http://www.sitepoint.com/understanding-angulars-apply-digest/" target="_blank" rel="external">http://www.sitepoint.com/understanding-angulars-apply-digest/</a></p>
<p><code>$apply()</code> &#x548C; <code>$digest()</code>&#x662F;angular&#x91CC;&#x4E24;&#x4E2A;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x70B9;&#x3002;<br>&#x8981;&#x60F3;&#x77E5;&#x9053;ng&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#xFF0C;&#x80AF;&#x5B9A;&#x8981;&#x7406;&#x89E3;apply&#x548C;digest&#x662F;&#x600E;&#x4E48;&#x5DE5;&#x4F5C;&#x7684;&#x3002;<br>&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x5C31;&#x4E00;&#x8D77;&#x6765;&#x63ED;&#x9732;&#x4E00;&#x4E0B;apply&#x548C;digest&#x7684;&#x771F;&#x5B9E;&#x9762;&#x76EE;&#xFF0C;&#x5E76;&#x4E14;&#x5B66;&#x4E60;&#x4E0B;&#x5982;&#x4F55;&#x7528;&#x5728;&#x6211;&#x4EEC;&#x5E73;&#x65F6;&#x7684;&#x7F16;&#x7A0B;&#x4E2D;&#x3002;</p>
<h1 id="&#x63A2;&#x7D22;$apply&#x3001;$digest">&#x63A2;&#x7D22;$apply&#x3001;$digest</h1>
<p>&#x5728;ng&#x4E2D;&#x4E00;&#x4E2A;&#x5F88;&#x9177;&#x7684;&#x7279;&#x6027;&#x5C31;&#x662F;&#x53CC;&#x5411;&#x7ED1;&#x5B9A;&#xFF0C;&#x8FD9;&#x5927;&#x5927;&#x65B9;&#x4FBF;&#x4E86;&#x6211;&#x4EEC;&#x7F16;&#x7A0B;&#x3002;<br>&#x53CC;&#x5411;&#x6570;&#x636E;&#x7ED1;&#x5B9A;&#xFF0C;&#x6307;&#x7684;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;view&#x4E0A;&#x4FEE;&#x6539;&#x4E86;&#x4E00;&#x4E9B;&#x4E1C;&#x897F;&#xFF0C;model&#x4F1A;&#x81EA;&#x52A8;&#x8DDF;&#x7740;&#x53D8;&#x3002;&#x540C;&#x6837;&#x7684;&#xFF0C;&#x5982;&#x679C;model&#x53D8;&#x4E86;&#xFF0C;view&#x4E0A;&#x4E5F;&#x4F1A;&#x81EA;&#x52A8;&#x8DDF;&#x7740;&#x53D8;&#x3002;<br>&#x4F46;&#x662F;angular&#x662F;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#x7684;&#x3002;<br>&#x5F53;&#x4F60;&#x5199;&#x4E86;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;,&#x5728;&#x8FD9;&#x4E2A;&#x80CC;&#x540E;&#xFF0C;angular&#x4F1A;&#x81EA;&#x52A8;&#x5728;scope&#x4E0A;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x76D1;&#x89C6;&#x5668;&#x3002;&#x8FD9;&#x4E2A;&#x80CC;&#x540E;&#x7684;&#x76D1;&#x89C6;&#x5668;&#x548C;&#x6211;&#x4EEC;&#x624B;&#x52A8;&#x663E;&#x5F0F;&#x5B9A;&#x4E49;&#x7684;watch&#x662F;&#x4E00;&#x6837;&#x7684;</p>
<pre><code><span class="variable">$scope</span>.<span class="variable">$watch</span>(<span class="string">&apos;aModel&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">(newValue, oldValue)</span> {</span>
  <span class="comment">//update the DOM with newValue</span>
});
</code></pre><p>watch&#x91CC;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x76D1;&#x542C;&#x51FD;&#x6570;&#x3002;&#x6BCF;&#x5F53;aModel&#x6539;&#x53D8;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD9;&#x4E2A;&#x76D1;&#x542C;&#x51FD;&#x6570;&#x5C31;&#x4F1A;&#x88AB;&#x8C03;&#x7528;&#x3002;<br>&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5F53;aModel&#x6539;&#x53D8;&#x65F6;&#xFF0C;&#x76D1;&#x542C;&#x51FD;&#x6570;&#x88AB;&#x8C03;&#x7528;&#x5E76;&#x66F4;&#x65B0;html&#x4E0A;&#x7684;&#x5185;&#x5BB9;&#x3002;<br>&#x4F46;&#x662F;&#xFF0C;&#x8FD8;&#x6709;&#x4E2A;&#x5927;&#x95EE;&#x9898;&#xFF0C;angular&#x662F;&#x600E;&#x4E48;&#x5224;&#x65AD;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x9700;&#x8981;&#x8C03;&#x7528;&#x76D1;&#x542C;&#x51FD;&#x6570;&#x7684;&#xFF1F;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;angular&#x662F;&#x600E;&#x4E48;&#x77E5;&#x9053;aModel&#x6539;&#x53D8;&#x7684;&#x3002;<br>&#x662F;&#x4E0D;&#x662F;angular&#x4F1A;&#x5B9A;&#x65F6;&#x7684;&#x53BB;&#x68C0;&#x67E5;aModel?<br>&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x9700;&#x8981;$digest&#x7684;&#x4ECB;&#x5165;&#x4E86;&#x3002;</p>
<p>&#x5F53;&#x8C03;&#x7528;$scope.$digest()&#x7684;&#x65F6;&#x5019;&#xFF0C;$digest&#x5FAA;&#x73AF;&#x5C31;&#x5F00;&#x59CB;&#x4E86;&#x3002;<br>&#x5047;&#x8BBE;&#xFF0C;&#x6211;&#x4EEC;&#x901A;&#x8FC7;ng-click&#x4E8B;&#x4EF6;&#x6539;&#x53D8;&#x4E86;model&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;angular&#x4F1A;&#x81EA;&#x52A8;&#x8C03;&#x7528;$digest()&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x6837;$digest&#x5FAA;&#x73AF;&#x5C31;&#x5F00;&#x59CB;&#x4E86;&#x3002;<br>&#x5F53;$digest&#x5FAA;&#x73AF;&#x5F00;&#x59CB;&#x540E;&#xFF0C;&#x5B83;&#x4F1A;&#x89E6;&#x53D1;&#x6BCF;&#x4E2A;watcher&#x3002;watcher&#x4F1A;&#x53BB;&#x68C0;&#x67E5;&#x73B0;&#x5728;&#x7684;scope&#x91CC;&#x5B58;&#x7684;&#x53D8;&#x91CF;&#x503C;&#x548C;&#x4E0A;&#x6B21;&#x5B58;&#x7684;&#x503C;&#x6709;&#x6CA1;&#x6709;&#x53D8;&#x5316;&#x3002;<br>&#x5982;&#x679C;&#x53D8;&#x5316;&#x4E86;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x76D1;&#x542C;&#x51FD;&#x6570;&#x5C31;&#x4F1A;&#x88AB;&#x6267;&#x884C;&#x3002;&#x8FD0;&#x884C;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x9875;&#x9762;&#x4E0A;&#x6709;&#x5BF9;&#x5E94;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5C31;&#x4F1A;&#x88AB;&#x66F4;&#x65B0;&#x6210;&#x6700;&#x65B0;&#x7684;&#x503C;&#x3002;<br>&#x9664;&#x4E86;ng-click, &#x8FD8;&#x6709;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x7684;&#x6307;&#x4EE4;&#x4F1A;&#x53BB;&#x6539;&#x53D8;model&#xFF0C;&#x6BD4;&#x5982;ng-model, $timeout&#x7B49;&#x7B49;&#xFF0C;&#x4ED6;&#x4EEC;&#x90FD;&#x4F1A;&#x89E6;&#x53D1;$digest&#x5FAA;&#x73AF;&#x3002;</p>
<p>&#x5230;&#x76EE;&#x524D;&#x6765;&#x8BF4;&#xFF0C;&#x90FD;&#x662F;&#x6BD4;&#x8F83;&#x597D;&#x7406;&#x89E3;&#x7684;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x8981;&#x8BF4;&#x660E;&#x7684;&#x662F;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;angular&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x8C03;&#x7528;$digest()&#xFF0C;<br>&#x800C;&#x662F;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x7684;$scope.$apply(), &#x7136;&#x540E;&#x63A5;&#x4E0B;&#x6765;&#x624D;&#x4F1A;&#x8C03;&#x7528;$rootScope.$digest()<br>&#x6240;&#x4EE5;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;$digest&#x662F;&#x4ECE;$rootScope&#x4E0A;&#x5F00;&#x59CB;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8C03;&#x7528;&#x540E;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x5B50;&#x7684;scope&#x4E0A;&#x7684;watcher&#x90FD;&#x4F1A;&#x8C03;&#x7528;&#x4E00;&#x904D;&#x3002;</p>
<p>&#x73B0;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x4F60;&#x5728;&#x4E00;&#x4E2A;button&#x4E0A;&#x589E;&#x52A0;&#x4E86;ng-click&#x6307;&#x4EE4;&#xFF0C;&#x5E76;&#x4E14;&#x5F80;&#x8FD9;&#x4E2A;&#x6307;&#x4EE4;&#x91CC;&#x9762;&#x4F20;&#x5165;&#x4E86;&#x51FD;&#x6570;&#x540D;&#x79F0;&#x3002;<br>&#x5F53;&#x8FD9;&#x4E2A;&#x6309;&#x94AE;&#x88AB;&#x70B9;&#x51FB;&#x65F6;&#xFF0C;angular&#x628A;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x5C01;&#x88C5;&#x5728;$scope.$apply()&#x91CC;&#x9762;&#xFF0C;<br>&#x6240;&#x4EE5;&#xFF0C;&#x653E;&#x5728;&#x6307;&#x4EE4;&#x91CC;&#x7684;&#x51FD;&#x6570;&#x4F1A;&#x88AB;&#x6B63;&#x5E38;&#x6267;&#x884C;&#xFF0C;&#x6267;&#x884C;&#x540E;&#x53EF;&#x80FD;&#x4F1A;&#x6539;&#x53D8;model&#xFF0C;&#x7136;&#x540E;$digest&#x5FAA;&#x73AF;&#x5C31;&#x5F00;&#x59CB;&#x4E86;&#xFF0C;&#x5FAA;&#x73AF;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x6539;&#x53D8;&#x7684;model&#x4F1A;&#x6B63;&#x5E38;&#x53CD;&#x5E94;&#x5230;view&#x4E0A;&#x9762;&#x53BB;&#x3002;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>$apply() and $digest() are two core, and sometimes confusing, aspects of AngularJS.<br>To understand how AngularJS works one needs to fully understand how $apply() and $digest() work.<br>This article aims to explain what $apply() and $digest() really are, and how they can be useful in your day-to-day AngularJS programming.</p>
<p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://blog.gyf1.com/tags/angularjs/"/>
    
      <category term="English" scheme="http://blog.gyf1.com/tags/english/"/>
    
      <category term="Giant" scheme="http://blog.gyf1.com/categories/giant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[js里的原型和继承]]></title>
    <link href="http://blog.gyf1.com/2015/01/21/js%E9%87%8C%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>http://blog.gyf1.com/2015/01/21/js里的原型和继承/</id>
    <published>2015-01-21T09:23:28.000Z</published>
    <updated>2015-01-21T09:47:31.000Z</updated>
    <content type="html"><![CDATA[<p>js&#x91CC;&#x7684;&#x7EE7;&#x627F;&#x548C;&#x4F20;&#x7EDF;&#x7684;c++,java,c#&#x662F;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x6837;&#x7684;&#x5F88;&#x5F3A;&#x5927;&#xFF0C;&#x5F88;&#x7075;&#x6D3B;&#x3002;</p>
<h1 id="&#x5BF9;&#x8C61;&#x548C;&#x7C7B;">&#x5BF9;&#x8C61;&#x548C;&#x7C7B;</h1>
<p>js&#x91CC;&#x5230;&#x5904;&#x90FD;&#x662F;&#x5BF9;&#x8C61;&#x3002;&#x5BF9;&#x8C61;&#x5C06;&#x5C5E;&#x6027;&#x548C;&#x884C;&#x4E3A;&#x5305;&#x88C5;&#x5728;&#x4E00;&#x8D77;&#x3002;<br>&#x62FF;&#x6570;&#x7EC4;&#x6765;&#x8BF4;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x91CC;&#x9762;&#x5305;&#x542B;&#x4E86;&#x4FDD;&#x5B58;&#x7684;&#x503C;&#x548C;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;</p>
<pre><code>var myArray = [<span class="number">1</span>, <span class="number">2</span>];
myArray.<span class="keyword">push</span>(<span class="number">3</span>);
myArray.<span class="keyword">reverse</span>();
myArray.<span class="keyword">pop</span>();
var <span class="keyword">length</span> = myArray.<span class="keyword">length</span>;
</code></pre><p>&#x95EE;&#x9898;&#x662F;&#xFF0C;&#x50CF;push&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#x4ECE;&#x4EC0;&#x4E48;&#x5730;&#x65B9;&#x62FF;&#x51FA;&#x6765;&#x7684;&#x3002;</p>
<a id="more"></a>

<p><a href="https://msdn.microsoft.com/en-us/magazine/ff852808.aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/magazine/ff852808.aspx</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>js&#x91CC;&#x7684;&#x7EE7;&#x627F;&#x548C;&#x4F20;&#x7EDF;&#x7684;c++,java,c#&#x662F;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x6837;&#x7684;&#x5F88;&#x5F3A;&#x5927;&#xFF0C;&#x5F88;&#x7075;&#x6D3B;&#x3002;</p>
<h1 id="&#x5BF9;&#x8C61;&#x548C;&#x7C7B;">&#x5BF9;&#x8C61;&#x548C;&#x7C7B;</h1>
<p>js&#x91CC;&#x5230;&#x5904;&#x90FD;&#x662F;&#x5BF9;&#x8C61;&#x3002;&#x5BF9;&#x8C61;&#x5C06;&#x5C5E;&#x6027;&#x548C;&#x884C;&#x4E3A;&#x5305;&#x88C5;&#x5728;&#x4E00;&#x8D77;&#x3002;<br>&#x62FF;&#x6570;&#x7EC4;&#x6765;&#x8BF4;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x91CC;&#x9762;&#x5305;&#x542B;&#x4E86;&#x4FDD;&#x5B58;&#x7684;&#x503C;&#x548C;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;</p>
<pre><code>var myArray = [<span class="number">1</span>, <span class="number">2</span>];
myArray.<span class="keyword">push</span>(<span class="number">3</span>);
myArray.<span class="keyword">reverse</span>();
myArray.<span class="keyword">pop</span>();
var <span class="keyword">length</span> = myArray.<span class="keyword">length</span>;
</code></pre><p>&#x95EE;&#x9898;&#x662F;&#xFF0C;&#x50CF;push&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#x4ECE;&#x4EC0;&#x4E48;&#x5730;&#x65B9;&#x62FF;&#x51FA;&#x6765;&#x7684;&#x3002;</p>
]]>
    
    </summary>
    
      <category term="Translation" scheme="http://blog.gyf1.com/tags/translation/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[好的web开发人员都应该知道的10件事]]></title>
    <link href="http://blog.gyf1.com/2015/01/21/%E5%A5%BD%E7%9A%84web%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/"/>
    <id>http://blog.gyf1.com/2015/01/21/好的web开发人员都应该知道的10件事/</id>
    <published>2015-01-21T05:03:22.000Z</published>
    <updated>2015-01-21T05:07:13.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;</li>
</ol>
<p><a href="http://jonraasch.com/blog/10-things-every-web-developer-should-know-2" target="_blank" rel="external">http://jonraasch.com/blog/10-things-every-web-developer-should-know-2</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;</li>
</ol>
<p><a href="http://jonraasch.com/blog/10-things-every-web-developer-should-know]]>
    </summary>
    
      <category term="Translation" scheme="http://blog.gyf1.com/tags/translation/"/>
    
      <category term="Giant" scheme="http://blog.gyf1.com/categories/giant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你没有完整的了解过正则表达式]]></title>
    <link href="http://blog.gyf1.com/2015/01/21/%E4%BD%A0%E6%B2%A1%E6%9C%89%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BA%86%E8%A7%A3%E8%BF%87%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.gyf1.com/2015/01/21/你没有完整的了解过正则表达式/</id>
    <published>2015-01-21T01:51:54.000Z</published>
    <updated>2015-01-22T08:13:25.000Z</updated>
    <content type="html"><![CDATA[<p>&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x60F3;&#x8981;&#x7528;&#x7684;&#x597D;&#x662F;&#x53EF;&#x6015;&#x7684;&#x4E00;&#x4EF6;&#x4E8B;&#x60C5;&#xFF0C;&#x5F88;&#x53EF;&#x6015;&#x7684;&#x3002;<br>&#x5E78;&#x8FD0;&#x7684;&#x662F;&#xFF0C;&#x4E00;&#x65E6;&#x4F60;&#x8BB0;&#x4F4F;&#x4E86;&#x6BCF;&#x4E2A;&#x7B26;&#x53F7;&#x4EE3;&#x8868;&#x4E86;&#x4EC0;&#x4E48;&#x542B;&#x4E49;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x5C31;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x6297;&#x62D2;&#x5B83;&#x3002;<br>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x8FD9;&#x7BC7;&#x9898;&#x76EE;&#x8BF4;&#x7684;&#x90A3;&#x6837;&#xFF0C;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x4E1C;&#x897F;&#x8981;&#x5B66;&#x4E60;&#xFF0C;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x5427;&#x3002;</p>
<a id="more"></a>

<h1 id="&#x7B2C;&#x4E00;&#x7AE0;_&#x5B66;&#x4E60;&#x57FA;&#x7840;">&#x7B2C;&#x4E00;&#x7AE0; &#x5B66;&#x4E60;&#x57FA;&#x7840;</h1>
<p>&#x5B66;&#x4E60;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x91CD;&#x70B9;&#x662F;&#x82B1;&#x4E2A;&#x4E00;&#x5929;&#x7684;&#x65F6;&#x95F4;&#x53BB;&#x597D;&#x597D;&#x8BB0;&#x5FC6;&#x4E00;&#x4E0B;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x91CC;&#x9762;&#x4F1A;&#x7528;&#x5230;&#x7684;&#x7B26;&#x53F7;&#x3002;<br>&#x8FD9;&#x662F;&#x6211;&#x89C9;&#x5F97;&#x6700;&#x597D;&#x7684;&#x5EFA;&#x8BAE;&#x3002;&#x90A3;&#x4E48;&#xFF0C;&#x5750;&#x4E0B;&#xFF0C;&#x521B;&#x5EFA;&#x4E00;&#x4E9B;&#x5361;&#x7247;&#xFF0C;&#x6B7B;&#x8BB0;&#x786C;&#x80CC;&#x4ED6;&#x4EEC;&#x3002;<br>&#x4E0B;&#x9762;&#x662F;&#x4E00;&#x4E9B;&#x5E38;&#x89C1;&#x7684;&#x7B26;&#x53F7;&#xFF1A;</p>
<p>.</p>
<pre><code>. - Matches <span class="keyword">any</span> <span class="keyword">character</span>, except <span class="keyword">for</span> <span class="built_in">line</span> breaks <span class="keyword">if</span> dotall is <span class="constant">false</span>.
</code></pre><p>*</p>
<pre><code>* - Matches <span class="number">0</span> <span class="operator">or</span> more <span class="operator">of</span> <span class="operator">the</span> preceding <span class="keyword">character</span>.
</code></pre><p>+</p>
<pre><code>+ - Matches <span class="number">1</span> <span class="operator">or</span> more <span class="operator">of</span> <span class="operator">the</span> preceding <span class="keyword">character</span>.
</code></pre><p>?</p>
<pre><code>? - Preceding character <span class="keyword">is</span> <span class="keyword">optional</span>. Matches <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span> occurrence.
</code></pre><p>\d</p>
<pre><code>\d - Matches <span class="built_in">any</span> single digit
</code></pre><p>\w</p>
<pre><code>\w - Matches <span class="keyword">any</span> <span class="built_in">word</span> <span class="keyword">character</span> (alphanumeric &amp; underscore).
</code></pre><p>[XYZ]</p>
<pre><code>[XYZ] - Matches any single <span class="property">character</span> <span class="keyword">from</span> <span class="keyword">the</span> <span class="property">character</span> <span class="type">class</span>.
</code></pre><p>[XYZ]+</p>
<pre><code>[XYZ]+ - Matches one <span class="keyword">or</span> more <span class="keyword">of</span> any <span class="keyword">of</span> <span class="keyword">the</span> <span class="property">characters</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">set</span>.
</code></pre><p>$</p>
<pre><code>$ - Matches <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="type">string</span>.
</code></pre><p>^</p>
<pre><code>^ - Matches <span class="operator">the</span> beginning <span class="operator">of</span> <span class="operator">a</span> <span class="keyword">string</span>.
</code></pre><p>[^a-z]</p>
<pre><code>[^a-z] - <span class="keyword">When</span> inside <span class="keyword">of</span> a character <span class="keyword">class</span>, the ^ means <span class="keyword">NOT</span>; <span class="keyword">in</span> this <span class="keyword">case</span>, match anything that <span class="keyword">is</span> <span class="keyword">NOT</span> a lowercase letter.
</code></pre><p><em>&#x4E0A;&#x9762;&#x7684;&#x4E1C;&#x897F;&#x770B;&#x8D77;&#x6765;&#x7684;&#x786E;&#x662F;&#x76F8;&#x5F53;&#x65E0;&#x804A;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x9700;&#x8981;&#x6B7B;&#x8BB0;&#x786C;&#x80CC;&#x3002;&#x5982;&#x679C;&#x4F60;&#x90FD;&#x638C;&#x63E1;&#x4E86;&#xFF0C;&#x4F60;&#x4F1A;&#x5F88;&#x723D;&#x7684;&#x3002;</em></p>
<h2 id="&#x5DE5;&#x5177;">&#x5DE5;&#x5177;</h2>
<p>&#x5F53;&#x4F60;&#x5199;&#x7684;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x6CA1;&#x6709;&#x5B9E;&#x73B0;&#x60F3;&#x8981;&#x7684;&#x6548;&#x679C;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x6709;&#x628A;&#x5934;&#x641E;&#x6210;&#x79C3;&#x9876;&#x7684;&#x611F;&#x89C9;&#x3002;&#x4F60;&#x81EA;&#x5DF1;&#x89C9;&#x5F97;&#x5E94;&#x8BE5;&#x662F;&#x767E;&#x5206;&#x767E;&#x53EF;&#x4EE5;&#x6210;&#x529F;&#x7684;&#x3002;<br>&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x5DE5;&#x5177;&#x5E2E;&#x52A9;&#x4F60;&#xFF1A;</p>
<pre><code><span class="label">http:</span>//regexr<span class="preprocessor">.com</span>/
</code></pre><h1 id="&#x4E8C;&#x3001;&#x89C6;&#x9891;&#x5B66;&#x4E60;">&#x4E8C;&#x3001;&#x89C6;&#x9891;&#x5B66;&#x4E60;</h1>
<h1 id="&#x4E09;&#x3001;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5728;js&#x4E2D;&#x5982;&#x4F55;&#x4F7F;&#x7528;">&#x4E09;&#x3001;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5728;js&#x4E2D;&#x5982;&#x4F55;&#x4F7F;&#x7528;</h1>
<p>&#x8FD9;&#x4E00;&#x7AE0;&#x91CC;&#x9762;&#x4E3B;&#x8981;&#x5B66;&#x4E60;&#xFF0C;&#x5728;js&#x4E2D;&#x5982;&#x4F55;&#x53D1;&#x6325;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x5F3A;&#x5927;&#x4F5C;&#x7528;&#x3002;</p>
<h2 id="1-_Test()">1. Test()</h2>
<p>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5E03;&#x5C14;&#x503C;&#x8868;&#x660E;&#x662F;&#x5426;&#x5339;&#x914D;&#x3002;<br>&#x4F8B;&#x5B50;&#xFF1A;</p>
<pre><code>var username = <span class="string">&apos;JohnSmith&apos;</span>;
alert(<span class="regexp">/[A-Za-z_-]+/</span>.test(username)); <span class="regexp">//</span> returns <span class="keyword">true</span>
</code></pre><p>&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5B9A;&#x4E49;&#x4E86;&#x5B57;&#x7B26;&#x4E32;&#x53EA;&#x80FD;&#x5305;&#x542B;&#x5927;&#x5C0F;&#x5199;&#x7684;&#x5B50;&#x6BCD;&#x3001;&#x4E0B;&#x5212;&#x7EBF;&#x3001; &#x7834;&#x6298;&#x53F7;&#x3002;<br>&#x6211;&#x4EEC;&#x628A;&#x53EF;&#x63A5;&#x53D7;&#x7684;&#x5B57;&#x7B26;&#x5305;&#x5728;&#x4E00;&#x4E2A;&#x65B9;&#x6846;&#x91CC;&#x9762;&#xFF0C;&#x8FD9;&#x79CD;&#x53EF;&#x4EE5;&#x79F0;&#x4E4B;&#x4E3A;&#x201C;&#x5B57;&#x7B26;&#x7C7B;&#x201D;&#x3002;<br>&#x7B26;&#x53F7;&#x201C;&#xFF0B;&#x201D;&#x8868;&#x793A;&#x6EE1;&#x8DB3;1&#x4E2A;&#x6216;&#x8005;&#x66F4;&#x591A;&#x3002;</p>
<h2 id="2-_Split()">2. Split()</h2>
<p>&#x4F60;&#x5F88;&#x6709;&#x53EF;&#x80FD;&#x5DF2;&#x7ECF;&#x4F7F;&#x7528;&#x8FC7;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x3002;<br>&#x5B83;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x544A;&#x8BC9;&#x4EE3;&#x7801;&#x5728;&#x4EC0;&#x4E48;&#x5730;&#x65B9;&#x505A;&#x5206;&#x5272;&#x3002;</p>
<pre><code>var str = <span class="string">&apos;this is my string&apos;</span>;
alert(str.split(<span class="regexp">/\s/</span>)); <span class="regexp">//</span> alerts <span class="string">&quot;this, is, my, string&quot;</span>
</code></pre><p>&#x201C;\s&#x201D; &#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x7B26;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5206;&#x5272;&#x6210;&#x4E86;&#x6570;&#x7EC4;&#x3002;<br>&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x8BBF;&#x95EE;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x503C;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x503C;&#x7684;index&#x6765;&#x8C03;&#x7528;</p>
<pre><code>var str = <span class="string">&apos;this is my this string&apos;</span>;
alert(str.split(<span class="regexp">/\s/</span>)[<span class="number">3</span>]); <span class="regexp">//</span> alerts <span class="string">&quot;string&quot;</span>
</code></pre><h2 id="3-_Replace()">3. Replace()</h2>
<p>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7528;&#x6765;&#x5C06;&#x4E00;&#x4E2A;string&#xFF0C;&#x6765;&#x66FF;&#x6362;&#x6210;&#x53E6;&#x4E00;&#x4E2A;string&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x6765;&#x5C06;&#x8981;&#x66FF;&#x6362;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x627E;&#x5230;&#x3002;</p>
<h3 id="&#x4F8B;&#x5B50;1">&#x4F8B;&#x5B50;1</h3>
<p>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x201D;Hello, World&#x201D;&#x66FF;&#x6362;&#x6210;&#x201D;Hello, Universe&#x201D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF1A;</p>
<pre><code>var someString = <span class="string">&apos;Hello, World&apos;</span>;
someString = someString.replace(<span class="regexp">/World/</span>, <span class="string">&apos;Universe&apos;</span>);
alert(someString); <span class="regexp">//</span> alerts <span class="string">&quot;Hello, Universe&quot;</span>
</code></pre><p>&#x9700;&#x8981;&#x77E5;&#x9053;&#x7684;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;replace(&#x2018;World&#x2019;, &#x2018;Universe&#x2019;)&#x3002;<br>&#x8FD8;&#x6709;&#x5C31;&#x662F;&#xFF0C;&#x66FF;&#x6362;&#x65B9;&#x6CD5;&#x5E76;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x5C06;&#x66FF;&#x6362;&#x7684;&#x503C;&#x8D4B;&#x7ED9;&#x53D8;&#x91CF;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x624B;&#x52A8;&#x8D4B;&#x503C;&#x624D;&#x884C;&#x3002;</p>
<h3 id="&#x4F8B;&#x5B50;2">&#x4F8B;&#x5B50;2</h3>
<p>&#x5F53;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x4E2A;&#x7528;&#x6237;&#x6CE8;&#x518C;&#x7684;&#x9875;&#x9762;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BA9;&#x7528;&#x6237;&#x4E0D;&#x8981;&#x8F93;&#x5165;&#x4E71;&#x4E03;&#x516B;&#x7CDF;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x6BD4;&#x5982;&#x5F15;&#x53F7;&#x3001;&#x5206;&#x53F7;&#x7B49;&#x7B49;&#x3002;<br>&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x6B63;&#x5219;&#x6765;&#x89E3;&#x51B3;</p>
<pre><code><span class="keyword">var</span> username = <span class="string">&apos;J;ohnSmith;@%&apos;</span>;
username = username.replace(<span class="regexp">/[^A-Za-z\d_-]+/</span>, <span class="string">&apos;&apos;</span>);
alert(username); <span class="comment">// JohnSmith;@%</span>
</code></pre><p>&#x6709;&#x4EBA;&#x53EF;&#x80FD;&#x5DF2;&#x7ECF;&#x53D1;&#x73B0;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x6709;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x9A6C;&#x4E0A;&#x6765;&#x89E3;&#x51B3;&#x3002;<br>&#x5728;alert&#x4E2D;&#x6211;&#x4EEC;&#x53D1;&#x73B0;j&#x540E;&#x9762;&#x7684;&#x5206;&#x53F7;&#x53BB;&#x6389;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x6709;&#x4E2A;&#x5206;&#x53F7;&#x6CA1;&#x53BB;&#x6389;&#x3002;<br>&#x6211;&#x4EEC;&#x9700;&#x8981;&#x544A;&#x8BC9;&#x5F15;&#x64CE;&#xFF0C;&#x5F53;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x5206;&#x53F7;&#x540E;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x6700;&#x540E;&#x7ED3;&#x675F;&#x7684;&#x659C;&#x6760;&#x540E;&#x9762;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x201C;g&#x201D;&#xFF0C;&#x8FD9;&#x4E2A;&#x7B26;&#x53F7;&#x4EE3;&#x8868;&#x5168;&#x5C40;&#x7684;&#x3002;<br>&#x6211;&#x4EEC;&#x4FEE;&#x6539;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x5E94;&#x8BE5;&#x50CF;&#x4E0B;&#x9762;&#x8FD9;&#x6837;&#x5B50;&#xFF1A;</p>
<pre><code><span class="keyword">var</span> username = <span class="string">&apos;J;ohnSmith;@%&apos;</span>;
username = username.replace(<span class="regexp">/[^A-Za-z\d_-]+/g</span>, <span class="string">&apos;&apos;</span>);
alert(username); <span class="comment">// alerts JohnSmith</span>
</code></pre><p>&#x73B0;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x641C;&#x7D22;&#x6240;&#x6709;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5E76;&#x5C06;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x5B57;&#x7B26;&#x7ED9;&#x66FF;&#x6362;&#x6389;&#x4E86;&#x3002;<br>&#x518D;&#x6765;&#x770B;&#x4E00;&#x6B21;&#x4E0A;&#x9762;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F; - .replace(/[^A-Za-z\d_-]+/g, &#x2018;&#x2019;);<br>&#x6709;&#x4E00;&#x70B9;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x7B26;&#x53F7;&#x201C;^&#x201D;&#x662F;&#x5728;&#x65B9;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5B83;&#x7684;&#x610F;&#x601D;&#x662F;&#x201C;&#x5426;&#x201D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x627E;&#x5230;&#x6240;&#x6709;&#x4E0D;&#x6EE1;&#x8DB3;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x7B26;&#x3002;<br>&#x6211;&#x4EEC;&#x518D;&#x6765;&#x7406;&#x89E3;&#x4E00;&#x904D;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x662F;&#xFF0C;&#x627E;&#x5230;&#x6240;&#x6709;&#x7684;&#x4E0D;&#x662F;&#x5B50;&#x6BCD;&#xFF0C;&#x4E0D;&#x662F;&#x4E0B;&#x5212;&#x7EBF;&#xFF0C;&#x4E0D;&#x662F;&#x7834;&#x6298;&#x53F7;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x5C06;&#x5B83;&#x66FF;&#x6362;&#x6210;&#x7A7A;&#x7684;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x8BF4;&#x6210;&#x628A;&#x627E;&#x5230;&#x7684;&#x5220;&#x6389;&#x3002;</p>
<h2 id="4-_Match()">4. Match()</h2>
<p>&#x548C;test()&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;match&#x4E0D;&#x662F;&#x8FD4;&#x56DE;&#x7684;&#x5E03;&#x5C14;&#x503C;&#xFF0C;&#x800C;&#x662F;&#x8FD4;&#x56DE;&#x7684;&#x6240;&#x6709;&#x7167;&#x5230;&#x5185;&#x5BB9;&#x7684;&#x6570;&#x7EC4;&#x3002;</p>
<h3 id="&#x4F8B;&#x5B50;1-1">&#x4F8B;&#x5B50;1</h3>
<pre><code>var name = <span class="string">&apos;JeffreyWay&apos;</span>;
alert(name.match(<span class="regexp">/e/</span>)); <span class="regexp">//</span> alerts <span class="string">&quot;e&quot;</span>
</code></pre><p>&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x53EA;&#x7167;&#x5230;&#x4E00;&#x4E2A;e&#xFF0C;&#x5982;&#x679C;&#x8981;&#x628A;&#x6240;&#x6709;&#x7684;e&#x90FD;&#x627E;&#x51FA;&#x6765;&#xFF0C;&#x518D;&#x6B21;&#x8BF4;&#x4E00;&#x4E0B;&#xFF0C;&#x4F7F;&#x7528;g&#x6765;&#x5B9A;&#x4E49;&#x5168;&#x5C40;&#x641C;&#x7D22;&#x3002;</p>
<pre><code>var name = <span class="string">&apos;JeffreyWay&apos;</span>;
alert(name.match(<span class="regexp">/e/g</span>)); <span class="regexp">//</span> alerts <span class="string">&quot;e,e&quot;</span>
</code></pre><p>&#x5F53;&#x60F3;&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x7684;&#x503C;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;index</p>
<pre><code>var name = <span class="string">&apos;JeffreyWay&apos;</span>;
alert(name.match(<span class="regexp">/e/g</span>)[<span class="number">1</span>]); <span class="regexp">//</span> alerts <span class="string">&quot;e&quot;</span>
</code></pre><h3 id="&#x4F8B;&#x5B50;2-1">&#x4F8B;&#x5B50;2</h3>
<p>&#x6211;&#x4EEC;&#x518D;&#x7528;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x6765;&#x52A0;&#x6DF1;&#x7406;&#x89E3;</p>
<pre><code>var <span class="typename">string</span> = <span class="attribute">&apos;This</span> <span class="keyword">is</span> just a <span class="typename">string</span> <span class="keyword">with</span> some <span class="number">12345</span> <span class="keyword">and</span> some !@#$ mixed <span class="keyword">in</span>.&apos;;
alert(<span class="typename">string</span>.match(/[a-z]+/gi)); // alerts <span class="string">&quot;This,is,just,a,string,with,some,and,some,mixed,in&quot;</span>
</code></pre><p>&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F; &#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x627E;&#x5230;&#x5927;&#x5C0F;&#x5199;&#x7684;&#x5B57;&#x7B26;&#x3002;<br>&#x8FD9;&#x91CC;&#x8981;&#x63D0;&#x4E00;&#x4E0B;i&#xFF0C;i&#x6307;&#x7684;&#x662F;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;<br>&#x5982;&#x679C;&#x60F3;&#x8981;&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x7684;&#x503C;&#xFF0C;&#x4F7F;&#x7528;index</p>
<pre><code>var <span class="typename">string</span> = <span class="attribute">&apos;This</span> <span class="keyword">is</span> just a <span class="typename">string</span> <span class="keyword">with</span> some <span class="number">12345</span> <span class="keyword">and</span> some !@#$ mixed <span class="keyword">in</span>.&apos;;
var matches = <span class="typename">string</span>.match(/[a-z]+/gi);
alert(matches[<span class="number">2</span>]); // alerts <span class="string">&quot;just&quot;</span>
</code></pre><h2 id="5-_&#x5206;&#x5272;email">5. &#x5206;&#x5272;email</h2>
<p>&#x6211;&#x4EEC;&#x8981;&#x5C06;nettuts@tutsplus.com&#x5206;&#x5272;&#x6210;&#x7528;&#x6237;&#x540D;&#x548C;&#x57DF;&#x540D;&#x201D;nettuts&#x201D;&#x548C;&#x201D;tutsplus&#x201D;</p>
<pre><code>var email = <span class="string">&apos;nettuts@tutsplus.com&apos;</span>;
alert(email.replace(<span class="regexp">/([a-z\d_-]+)@([a-z\d_-]+)\.[a-z]{2,4}/ig</span>, <span class="string">&apos;$1, $2&apos;</span>)); <span class="regexp">//</span> alerts <span class="string">&quot;nettuts, tutsplus&quot;</span>
</code></pre><p>&#x5982;&#x679C;&#x4F60;&#x662F;&#x521A;&#x5B66;&#x4E60;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x770B;&#x8D77;&#x6765;&#x4F1A;&#x6709;&#x70B9;&#x56F0;&#x60D1;&#x3002;<br>&#x522B;&#x96BE;&#x8FC7;&#xFF0C;&#x6240;&#x6709;&#x4EBA;&#x90FD;&#x4F1A;&#x7ECF;&#x5386;&#x8FD9;&#x4E2A;&#x7B2C;&#x4E00;&#x6B21;&#x3002;<br>&#x6211;&#x4EEC;&#x6765;&#x5206;&#x6279;&#x770B;&#x4EE3;&#x7801;&#x5E94;&#x8BE5;&#x4F1A;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#x4E00;&#x70B9;</p>
<pre><code>.<span class="built_in">replace</span>(/([<span class="operator">a</span>-z\d_-]+)
</code></pre><p>&#x67E5;&#x627E;&#x4EFB;&#x610F;&#x7684;&#x5B50;&#x6BCD;&#x3001;&#x6570;&#x5B57;&#x3001;&#x4E0B;&#x5212;&#x7EBF;&#x3001;&#x7834;&#x6298;&#x53F7;&#xFF0C;&#x201C;&#xFF0B;&#x201D;&#x53F7;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x6216;&#x8005;&#x591A;&#x4E2A;&#x3002;&#x5C06;&#x5185;&#x5BB9;&#x5305;&#x88F9;&#x5728;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x60F3;&#x7B49;&#x4F1A;&#x83B7;&#x53D6;&#x8FD9;&#x8FB9;&#x67E5;&#x627E;&#x5230;&#x7684;&#x503C;&#x3002;</p>
<pre><code><span class="at_rule">@<span class="keyword">([a-z\d_-]+)</span></span>
</code></pre><p>&#x9996;&#x9875;&#x67E5;&#x627E;@&#x7B26;&#x53F7;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x67E5;&#x627E;&#x5B50;&#x6BCD;&#x3001;&#x6570;&#x5B57;&#x3001;&#x4E0B;&#x5212;&#x7EBF;&#x3001;&#x7834;&#x6298;&#x53F7;&#x3002;&#x518D;&#x63D0;&#x4E00;&#x6B21;&#xFF0C;&#x5C06;&#x5185;&#x5BB9;&#x5305;&#x88F9;&#x5728;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x60F3;&#x7B49;&#x4F1A;&#x83B7;&#x53D6;&#x8FD9;&#x8FB9;&#x67E5;&#x627E;&#x5230;&#x7684;&#x503C;&#x3002;</p>
<pre><code>\.[a-z]<span class="list">{2,4}</span>/ig,
</code></pre><p>&#x7EE7;&#x7EED;&#x770B;&#xFF0C;&#x9996;&#x5148;&#x662F;&#x201C;&#x70B9;&#x201D;&#x53F7;&#xFF08;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x8F6C;&#x4E49;&#x201D;\&#x201D;&#x6765;&#x4F7F;&#x7528;&#x70B9;&#x53F7;&#xFF09;&#xFF0C;&#x8FD9;&#x6BB5;&#x662F;&#x4E3A;&#x4E86;&#x67E5;&#x627E;.com&#x4E4B;&#x7C7B;&#x7684;&#x57DF;&#x540D;</p>
<pre><code><span class="xml">&apos;</span><span class="variable">$1</span><span class="xml">, </span><span class="variable">$2</span><span class="xml">&apos;)</span>
</code></pre><p>&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x8BF4;&#x83B7;&#x53D6;&#x6211;&#x4EEC;&#x5B58;&#x50A8;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x62EC;&#x53F7;&#x91CC;&#x7684;&#x503C;&#xFF0C;&#x548C;&#x7B2C;&#x4E8C;&#x4E2A;&#x62EC;&#x53F7;&#x91CC;&#x7684;&#x503C;</p>
<h2 id="6-_&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;location&#x7684;&#x5BF9;&#x8C61;">6. &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;location&#x7684;&#x5BF9;&#x8C61;</h2>
<p>location&#x5BF9;&#x8C61;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x5F53;&#x524D;&#x9875;&#x9762;&#x4E0A;&#x7684;&#x4FE1;&#x606F;&#xFF1A;href&#xFF0C;host&#xFF0C;port&#xFF0C;protocol&#x7B49;&#x7B49;<br>&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x662F;&#x4E3A;&#x4E86;&#x8054;&#x7CFB;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x624D;&#x7528;location&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x4F8B;&#x5B50;&#xFF0C;&#x5B9E;&#x9645;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x7684;&#x6807;&#x51C6;&#x7684;locaiton&#x5BF9;&#x8C61;&#x3002;</p>
<p>&#x9996;&#x5148;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x89E3;&#x7801;url</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">loc</span><span class="params">(url)</span> {</span> }
</code></pre><p>&#x7136;&#x540E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x5B83;</p>
<pre><code><span class="keyword">var</span> l = loc(<span class="string">&apos;http://www.somesite.com?somekey=somevalue&amp;anotherkey=anothervalue#theHashGoesHere&apos;</span>);
</code></pre><p>&#x73B0;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;&#x51FD;&#x6570;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E00;&#x4E9B;&#x53EF;&#x4EE5;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">loc</span><span class="params">(url)</span> {</span>
    <span class="keyword">return</span> <span class="cell">{

    }</span>
}
</code></pre><h3 id="Search">Search</h3>
<p>&#x6211;&#x4EEC;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;query string&#x91CC;&#x9762;&#x7684;&#x53C2;&#x6570;</p>
<pre><code><span class="keyword">return</span> {
    search : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> url.match(<span class="regexp">/\?(.+)/i</span>)[<span class="number">1</span>];
               <span class="comment">// returns &quot;somekey=somevalue&amp;anotherkey=anothervalue#theHashGoesHere&quot;</span>
    }
}
</code></pre><h3 id="Hash">Hash</h3>
<pre><code>hash : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> url.match(<span class="regexp">/#(.+)/i</span>)[<span class="number">1</span>]; <span class="comment">// returns &quot;theHashGoesHere&quot;</span>
},
</code></pre><h3 id="Protocol">Protocol</h3>
<pre><code>protocol : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> url.match(<span class="regexp">/(ht|f)tps?:/i</span>)[<span class="number">0</span>]; <span class="comment">// returns &apos;http:&apos;</span>
},
</code></pre><h3 id="Href">Href</h3>
<pre><code>href : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> url.match(<span class="regexp">/(.+\.[a-z]{2,4})/ig</span>); <span class="comment">// returns &quot;http://www.somesite.com&quot;</span>
}
</code></pre><h3 id="&#x6211;&#x4EEC;&#x7684;&#x6700;&#x7EC8;&#x6210;&#x679C;&#xFF1A;">&#x6211;&#x4EEC;&#x7684;&#x6700;&#x7EC8;&#x6210;&#x679C;&#xFF1A;</h3>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">loc</span><span class="params">(url)</span> {</span>
    <span class="keyword">return</span> {
        search : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            <span class="keyword">return</span> url.match(<span class="regexp">/\?(.+)/i</span>)[<span class="number">1</span>];
        },

        hash : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            <span class="keyword">return</span> url.match(<span class="regexp">/#(.+)/i</span>)[<span class="number">1</span>];
        },

        protocol : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            <span class="keyword">return</span> url.match(<span class="regexp">/(ht|f)tps?:/</span>)[<span class="number">0</span>];
        },

        href : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            <span class="keyword">return</span> url.match(<span class="regexp">/(.+\.[a-z]{2,4})/ig</span>);
        }
    }
}
</code></pre><p>&#x539F;&#x6587;<br><a href="http://code.tutsplus.com/tutorials/you-dont-know-anything-about-regular-expressions-a-complete-guide--net-7869" target="_blank" rel="external">http://code.tutsplus.com/tutorials/you-dont-know-anything-about-regular-expressions-a-complete-guide--net-7869</a><br><a href="http://www.smashingmagazine.com/2009/06/01/essential-guide-to-regular-expressions-tools-tutorials-and-resources/" target="_blank" rel="external">http://www.smashingmagazine.com/2009/06/01/essential-guide-to-regular-expressions-tools-tutorials-and-resources/</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x60F3;&#x8981;&#x7528;&#x7684;&#x597D;&#x662F;&#x53EF;&#x6015;&#x7684;&#x4E00;&#x4EF6;&#x4E8B;&#x60C5;&#xFF0C;&#x5F88;&#x53EF;&#x6015;&#x7684;&#x3002;<br>&#x5E78;&#x8FD0;&#x7684;&#x662F;&#xFF0C;&#x4E00;&#x65E6;&#x4F60;&#x8BB0;&#x4F4F;&#x4E86;&#x6BCF;&#x4E2A;&#x7B26;&#x53F7;&#x4EE3;&#x8868;&#x4E86;&#x4EC0;&#x4E48;&#x542B;&#x4E49;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x5C31;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x6297;&#x62D2;&#x5B83;&#x3002;<br>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x8FD9;&#x7BC7;&#x9898;&#x76EE;&#x8BF4;&#x7684;&#x90A3;&#x6837;&#xFF0C;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x4E1C;&#x897F;&#x8981;&#x5B66;&#x4E60;&#xFF0C;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x5427;&#x3002;</p>
]]>
    
    </summary>
    
      <category term="Translation" scheme="http://blog.gyf1.com/tags/translation/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Immediately-Invoked Function Expression (IIFE)]]></title>
    <link href="http://blog.gyf1.com/2015/01/20/immediately-invoked-function-expression-(iife)/"/>
    <id>http://blog.gyf1.com/2015/01/20/immediately-invoked-function-expression-(iife)/</id>
    <published>2015-01-20T08:23:22.000Z</published>
    <updated>2015-01-22T08:14:54.000Z</updated>
    <content type="html"><![CDATA[<p>In case you hadn&#x2019;t noticed, I&#x2019;m a bit of a stickler for terminology. So, after hearing the popular, yet misleading, JavaScript term &#x201C;self-executing anonymous function&#x201D; (or self-invoked anonymous function) one too many times, I&#x2019;ve finally decided to organize my thoughts into an article.</p>
<p>In addition to providing some very thorough information about how this pattern actually works, I&#x2019;ve actually made a recommendation on what we should call it, moving forward. Also, If you want to skip ahead, you can just check out some actual Immediately-Invoked Function Expressions, but I recommend reading the entire article.</p>
<p>Please understand that this article isn&#x2019;t intended to be an &#x201C;I&#x2019;m right, you&#x2019;re wrong&#x201D; kind of thing. I&#x2019;m genuinely interested in helping people understand potentially complex concepts, and feel that using consistent and accurate terminology is one of the easiest things that people can do to facilitate understanding.</p>
<a id="more"></a>

<h1 id="&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x53EF;&#x4EE5;&#x5E2E;&#x7EC4;&#x6211;&#x4EEC;&#x89E3;&#x51B3;&#x4EC0;&#x4E48;&#x95EE;&#x9898;">&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x53EF;&#x4EE5;&#x5E2E;&#x7EC4;&#x6211;&#x4EEC;&#x89E3;&#x51B3;&#x4EC0;&#x4E48;&#x95EE;&#x9898;</h1>
<p>&#x5728;js&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;function&#xFF0C;&#x5F53;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x90FD;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;context&#x3002;<br>&#x56E0;&#x4E3A;&#x5B9A;&#x4E49;&#x5728;function&#x91CC;&#x9762;&#x7684;variables&#x6216;&#x8005;function, &#x53EA;&#x80FD;&#x5728;&#x8FD9;&#x4E2A;function&#x91CC;&#x8BBF;&#x95EE;&#x3002;<br>&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x65B9;&#x4FBF;&#x7684;&#x5B9A;&#x4E49;&#x79C1;&#x6709;&#x53D8;&#x91CF;&#x3002;</p>
<pre><code><span class="regexp">//</span> Because <span class="keyword">this</span> <span class="reserved">function</span> returns another <span class="reserved">function</span> that has access to the
<span class="regexp">//</span> <span class="string">&quot;private&quot;</span> <span class="reserved">var</span> i, the returned <span class="reserved">function</span> <span class="keyword">is</span>, effectively, <span class="string">&quot;privileged.&quot;</span>

<span class="reserved">function</span> makeCounter() {
  <span class="regexp">//</span> `<span class="javascript">i</span>` <span class="keyword">is</span> only accessible inside `<span class="javascript">makeCounter</span>`.
  <span class="reserved">var</span> i = <span class="number">0</span>;

  <span class="keyword">return</span> <span class="reserved">function</span>() {
    <span class="built_in">console</span>.log( ++i );
  };
}

<span class="regexp">//</span> Note that `<span class="javascript">counter</span>` <span class="keyword">and</span> `<span class="javascript">counter2</span>` each have their own scoped `<span class="javascript">i</span>`.

<span class="reserved">var</span> counter = makeCounter();
counter(); <span class="regexp">//</span> <span class="attribute">logs</span>: <span class="number">1</span>
counter(); <span class="regexp">//</span> <span class="attribute">logs</span>: <span class="number">2</span>

<span class="reserved">var</span> counter2 = makeCounter();
counter2(); <span class="regexp">//</span> <span class="attribute">logs</span>: <span class="number">1</span>
counter2(); <span class="regexp">//</span> <span class="attribute">logs</span>: <span class="number">2</span>

i; <span class="regexp">//</span> <span class="attribute">ReferenceError</span>: i <span class="keyword">is</span> <span class="keyword">not</span> defined (it only exists inside makeCounter)
</code></pre><p>&#x4E0D;&#x8FC7;&#x6709;&#x4E9B;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x60F3;&#x8981;&#x591A;&#x4E2A;instance&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x60F3;&#x8981;&#x4E00;&#x4E2A;instance&#xFF1B;&#x800C;&#x4E14;&#x5728;&#x6709;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x4E0D;&#x9700;&#x8981;&#x8FD4;&#x56DE;&#x503C;&#x3002;</p>
<h2 id="&#x95EE;&#x9898;&#x7684;&#x6838;&#x5FC3;">&#x95EE;&#x9898;&#x7684;&#x6838;&#x5FC3;</h2>
<p>&#x4E0D;&#x8FC7;&#x4F60;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;function&#x7C7B;&#x4F3C;&#x4E8E;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{</span>}
</code></pre><p>&#x8FD8;&#x662F;</p>
<pre><code><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>}
</code></pre><p>&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x90FD;&#x662F;&#x4EE5;function&#x7684;identifier&#x7ED3;&#x675F;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;identifier&#xFF08;&#x8FD9;&#x91CC;&#x6307;&#x7684;&#x662F;foo&#xFF09;&#x7684;&#x540E;&#x9762;&#x589E;&#x52A0;&#x53CC;&#x62EC;&#x53F7;&#x6765;&#x8C03;&#x7528;&#x7684;function</p>
<pre><code><span class="comment">// Because a function defined like so can be invoked by putting () after</span>
<span class="comment">// the function name, like foo(), and because foo is just a reference to</span>
<span class="comment">// the function expression `function() { /* code */ }`...</span>

<span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }

<span class="comment">// ...doesn&apos;t it stand to reason that the function expression itself can</span>
<span class="comment">// be invoked, just by putting () after it?</span>

<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }(); <span class="comment">// SyntaxError: Unexpected token (</span>
</code></pre><p>&#x4ECE;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x5F53;&#x89E3;&#x91CA;&#x5668;&#x9047;&#x5230;function&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x628A;&#x5B83;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x58F0;&#x660E;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x3002;<br>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x660E;&#x786E;&#x7684;&#x544A;&#x8BC9;&#x89E3;&#x91CA;&#x5668;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x7684;&#x662F;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x89E3;&#x91CA;&#x5668;&#x8BEF;&#x8BA4;&#x4E3A;&#x6211;&#x4EEC;&#x5728;&#x505A;&#x51FD;&#x6570;&#x7684;&#x58F0;&#x660E;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x627E;&#x4E0D;&#x5230;&#x51FD;&#x6570;&#x540D;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#x3002;</p>
<h2 id="An_aside:_functions,_parens,_and_SyntaxErrors">An aside: functions, parens, and SyntaxErrors</h2>
<p>&#x5F88;&#x6709;&#x8DA3;&#x7684;&#x662F;&#xFF0C;&#x5373;&#x4F7F;&#x4F60;&#x7ED9;&#x4E86;&#x51FD;&#x6570;&#x540D;&#x548C;&#x51FD;&#x6570;&#x53C2;&#x6570;&#xFF0C;&#x540C;&#x6837;&#x8FD8;&#x662F;&#x4F1A;&#x6709;&#x8BED;&#x6CD5;&#x9519;&#x8BEF;&#xFF0C;&#x4F46;&#x662F;&#x9519;&#x8BEF;&#x539F;&#x56E0;&#x4E0D;&#x540C;&#x3002;<br>&#x4E0D;&#x8FC7;&#x5982;&#x679C;&#x5728;&#x53CC;&#x62EC;&#x53F7;&#x91CC;&#x7ED9;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x4E0D;&#x62A5;&#x9519;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x51FD;&#x6570;&#x4E5F;&#x4E0D;&#x6267;&#x884C;&#xFF0C;&#x56E0;&#x4E3A;&#x89E3;&#x91CA;&#x5668;&#x628A;&#x5E26;&#x6709;&#x53C2;&#x6570;&#x7684;&#x53CC;&#x62EC;&#x53F7;&#x548C;&#x524D;&#x9762;&#x7684;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#x5B8C;&#x5168;&#x770B;&#x6210;&#x662F;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x4E1C;&#x897F;&#x3002;</p>
<pre><code><span class="comment">// While this function declaration is now syntactically valid, it&apos;s still</span>
<span class="comment">// a statement, and the following set of parens is invalid because the</span>
<span class="comment">// grouping operator needs to contain an expression.</span>

<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }(); <span class="comment">// SyntaxError: Unexpected token )</span>

<span class="comment">// Now, if you put an expression in the parens, no exception is thrown...</span>
<span class="comment">// but the function isn&apos;t executed either, because this:</span>

<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }( <span class="number">1</span> );

<span class="comment">// Is really just equivalent to this, a function declaration followed by a</span>
<span class="comment">// completely unrelated expression:</span>

<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }

( <span class="number">1</span> );
</code></pre><h1 id="&#x81EA;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;">&#x81EA;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;</h1>
<p>Immediately-Invoked Function Expression (IIFE)<br>&#x5E78;&#x8FD0;&#x7684;&#x662F;&#xFF0C;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x662F;&#x5BB9;&#x6613;&#x7684;&#x3002;<br>&#x4E3A;&#x4E86;&#x544A;&#x8BC9;&#x89E3;&#x91CA;&#x5668;&#xFF0C;&#x90A3;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5C06;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x653E;&#x5230;&#x4E00;&#x4E2A;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#x53BB;&#x3002;</p>
<pre><code><span class="comment">// Either of the following two patterns can be used to immediately invoke</span>
<span class="comment">// a function expression, utilizing the function&apos;s execution context to</span>
<span class="comment">// create &quot;privacy.&quot;</span>

(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }()); <span class="comment">// Crockford recommends this one</span>
(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> })(); <span class="comment">// But this one works just as well</span>

<span class="comment">// Because the point of the parens or coercing operators is to disambiguate</span>
<span class="comment">// between function expressions and function declarations, they can be</span>
<span class="comment">// omitted when the parser already expects an expression (but please see the</span>
<span class="comment">// &quot;important note&quot; below).</span>

<span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="keyword">return</span> <span class="number">10</span>; }();
<span class="literal">true</span> &amp;&amp; <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }();
<span class="number">0</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }();

<span class="comment">// If you don&apos;t care about the return value, or the possibility of making</span>
<span class="comment">// your code slightly harder to read, you can save a byte by just prefixing</span>
<span class="comment">// the function with a unary operator.</span>

!<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }();
~<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }();
-<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }();
+<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }();

<span class="comment">// Here&apos;s another variation, from @kuvos - I&apos;m not sure of the performance</span>
<span class="comment">// implications, if any, of using the `new` keyword, but it works.</span>
<span class="comment">// http://twitter.com/kuvos/status/18209252090847232</span>

<span class="keyword">new</span> <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }
<span class="keyword">new</span> <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="comment">/* code */</span> }() <span class="comment">// Only need parens if passing arguments</span>
</code></pre><h2 id="&#x5173;&#x4E8E;&#x62EC;&#x53F7;&#x7684;&#x4E00;&#x4E9B;&#x8BF4;&#x660E;">&#x5173;&#x4E8E;&#x62EC;&#x53F7;&#x7684;&#x4E00;&#x4E9B;&#x8BF4;&#x660E;</h2>
<p>&#x6709;&#x62EC;&#x53F7;&#x867D;&#x7136;&#x591A;&#x4F59;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x53EF;&#x8BFB;&#x6027;&#x4E0A;&#x4F1A;&#x597D;&#x5F88;&#x591A;&#xFF0C;&#x907F;&#x514D;&#x522B;&#x4EBA;&#x770B;&#x4F60;&#x7684;&#x4EE3;&#x7801;&#x8FD8;&#x9700;&#x8981;&#x62D6;&#x52A8;&#x5230;&#x6700;&#x4E0B;&#x9762;&#x770B;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x662F;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x3002;<br>&#x8FD9;&#x6837;&#x5B50;&#x522B;&#x4EBA;&#x770B;&#x4F60;&#x7684;&#x4EE3;&#x7801;&#x624D;&#x4E0D;&#x4F1A;&#x62B1;&#x6028;&#x4F60;&#x3002;</p>
<h2 id="&#x7528;&#x95ED;&#x5305;&#x4FDD;&#x5B58;&#x72B6;&#x6001;">&#x7528;&#x95ED;&#x5305;&#x4FDD;&#x5B58;&#x72B6;&#x6001;</h2>
<p>&#x6211;&#x4EEC;&#x5728;&#x8C03;&#x7528;&#x666E;&#x901A;&#x51FD;&#x6570;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x4F20;&#x53C2;&#x6570;&#xFF0C;&#x5F53;&#x81EA;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x6267;&#x884C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5F80;&#x91CC;&#x9762;&#x4F20;&#x53C2;&#x6570;&#x3002;<br>&#x800C;&#x4E14;&#x5728;&#x51FD;&#x6570;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x7684;&#x5B50;&#x51FD;&#x6570;&#xFF0C;&#x662F;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x5230;&#x7236;&#x4EB2;&#x51FD;&#x6570;&#x62FF;&#x5230;&#x7684;&#x53C2;&#x6570;&#x7684;-&gt; &#x8FD9;&#x79CD;&#x5C31;&#x662F;&#x5E38;&#x8BF4;&#x7684;&#x95ED;&#x5305;&#x3002;<br>&#x81EA;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5F88;&#x597D;&#x7684;lock in values, &#x5E76;&#x4E14;&#x6709;&#x6548;&#x7684;&#x4FDD;&#x5B58;&#x72B6;&#x6001;&#x3002;</p>
<pre><code><span class="regexp">//</span> This doesn<span class="string">&apos;t work like you might think, because the value of `i` never
// gets locked in. Instead, every link, when clicked (well after the loop
// has finished executing), alerts the total number of elements, because
// that&apos;</span>s what the value <span class="keyword">of</span> `<span class="javascript">i</span>` actually <span class="keyword">is</span> at that point.

<span class="reserved">var</span> elems = <span class="built_in">document</span>.getElementsByTagName( <span class="string">&apos;a&apos;</span> );

<span class="keyword">for</span> ( <span class="reserved">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++ ) {

  elems[ i ].addEventListener( <span class="string">&apos;click&apos;</span>, <span class="reserved">function</span>(e){
    e.preventDefault();
    alert( <span class="string">&apos;I am link #&apos;</span> + i );
  }, <span class="string">&apos;false&apos;</span> );

}

<span class="regexp">//</span> This works, because inside the IIFE, the value <span class="keyword">of</span> `<span class="javascript">i</span>` <span class="keyword">is</span> locked <span class="keyword">in</span> as
<span class="regexp">//</span> `<span class="javascript">lockedInIndex</span>`. After the <span class="keyword">loop</span> has finished executing, even though the
<span class="regexp">//</span> value <span class="keyword">of</span> `<span class="javascript">i</span>` <span class="keyword">is</span> the total number <span class="keyword">of</span> elements, inside the IIFE the value
<span class="regexp">//</span> <span class="keyword">of</span> `<span class="javascript">lockedInIndex</span>` <span class="keyword">is</span> whatever the value passed into it (`<span class="javascript">i</span>`) was <span class="keyword">when</span>
<span class="regexp">//</span> the <span class="reserved">function</span> expression was invoked, so <span class="keyword">when</span> a link <span class="keyword">is</span> clicked, the
<span class="regexp">//</span> correct value <span class="keyword">is</span> alerted.

<span class="reserved">var</span> elems = <span class="built_in">document</span>.getElementsByTagName( <span class="string">&apos;a&apos;</span> );

<span class="keyword">for</span> ( <span class="reserved">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++ ) {

  (<span class="reserved">function</span>( lockedInIndex ){

    elems[ i ].addEventListener( <span class="string">&apos;click&apos;</span>, <span class="reserved">function</span>(e){
      e.preventDefault();
      alert( <span class="string">&apos;I am link #&apos;</span> + lockedInIndex );
    }, <span class="string">&apos;false&apos;</span> );

  })( i );

}

<span class="regexp">//</span> You could also use an IIFE like <span class="keyword">this</span>, encompassing (<span class="keyword">and</span> returning) only
<span class="regexp">//</span> the click handler <span class="reserved">function</span>, <span class="keyword">and</span> <span class="keyword">not</span> the entire `<span class="javascript">addEventListener</span>`
<span class="regexp">//</span> assignment. Either way, <span class="keyword">while</span> both examples lock <span class="keyword">in</span> the value using an
<span class="regexp">//</span> IIFE, I find the previous example to be more readable.

<span class="reserved">var</span> elems = <span class="built_in">document</span>.getElementsByTagName( <span class="string">&apos;a&apos;</span> );

<span class="keyword">for</span> ( <span class="reserved">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++ ) {

  elems[ i ].addEventListener( <span class="string">&apos;click&apos;</span>, (<span class="reserved">function</span>( lockedInIndex ){
    <span class="keyword">return</span> <span class="reserved">function</span>(e){
      e.preventDefault();
      alert( <span class="string">&apos;I am link #&apos;</span> + lockedInIndex );
    };
  })( i ), <span class="string">&apos;false&apos;</span> );

}
</code></pre><h2 id="&#x201C;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#x201D;&#x6709;&#x4EC0;&#x4E48;&#x4E0D;&#x597D;&#xFF1F;">&#x201C;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#x201D;&#x6709;&#x4EC0;&#x4E48;&#x4E0D;&#x597D;&#xFF1F;</h2>
<p>&#x6211;&#x66F4;&#x504F;&#x5411;&#x4E8E;&#x201C;&#x81EA;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#x201D;&#x8FD9;&#x79CD;&#x8BF4;&#x6CD5;&#x3002;&#x56E0;&#x4E3A;&#x6211;&#x89C9;&#x5F97;&#x201C;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#x201D;&#x4E0D;&#x592A;&#x597D;&#x7406;&#x89E3;&#x3002;</p>
<pre><code><span class="comment">// This is a self-executing function. It&apos;s a function that executes (or</span>
<span class="comment">// invokes) itself, recursively:</span>

<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> { <span class="title">foo</span><span class="params">()</span>; }</span>

<span class="comment">// This is a self-executing anonymous function. Because it has no</span>
<span class="comment">// identifier, it must use the  the `arguments.callee` property (which</span>
<span class="comment">// specifies the currently executing function) to execute itself.</span>

var foo = <span class="function"><span class="keyword">function</span><span class="params">()</span> { <span class="title">arguments</span>.<span class="title">callee</span><span class="params">()</span>; };</span>

<span class="comment">// This *might* be a self-executing anonymous function, but only while the</span>
<span class="comment">// `foo` identifier actually references it. If you were to change `foo` to</span>
<span class="comment">// something else, you&apos;d have a &quot;used-to-self-execute&quot; anonymous function.</span>

var foo = <span class="function"><span class="keyword">function</span><span class="params">()</span> { <span class="title">foo</span><span class="params">()</span>; };</span>

<span class="comment">// Some people call this a &quot;self-executing anonymous function&quot; even though</span>
<span class="comment">// it&apos;s not self-executing, because it doesn&apos;t invoke itself. It is</span>
<span class="comment">// immediately invoked, however.</span>

(<span class="function"><span class="keyword">function</span><span class="params">()</span>{ /* <span class="title">code</span> */ }<span class="params">()</span>);</span>

<span class="comment">// Adding an identifier to a function expression (thus creating a named</span>
<span class="comment">// function expression) can be extremely helpful when debugging. Once named,</span>
<span class="comment">// however, the function is no longer anonymous.</span>

(<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{ /* <span class="title">code</span> */ }<span class="params">()</span>);</span>

<span class="comment">// IIFEs can also be self-executing, although this is, perhaps, not the most</span>
<span class="comment">// useful pattern.</span>

(<span class="function"><span class="keyword">function</span><span class="params">()</span>{ <span class="title">arguments</span>.<span class="title">callee</span><span class="params">()</span>; }<span class="params">()</span>);</span>
(<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{ <span class="title">foo</span><span class="params">()</span>; }<span class="params">()</span>);</span>

<span class="comment">// One last thing to note: this will cause an error in BlackBerry 5, because</span>
<span class="comment">// inside a named function expression, that name is undefined. Awesome, huh?</span>

(<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>{ <span class="title">foo</span><span class="params">()</span>; }<span class="params">()</span>);</span>
</code></pre><h2 id="&#x6700;&#x540E;&#x4E00;&#x70B9;&#xFF0C;&#x6A21;&#x5757;&#x6A21;&#x5F0F;">&#x6700;&#x540E;&#x4E00;&#x70B9;&#xFF0C;&#x6A21;&#x5757;&#x6A21;&#x5F0F;</h2>
<p>&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x719F;&#x6089;&#x201C;&#x6A21;&#x5757;&#x6A21;&#x5F0F;&#x201D;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x770B;&#x4E00;&#x4E0B;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x6A21;&#x5757;&#x6A21;&#x5F0F;&#x5DEE;&#x4E0D;&#x591A;&#x5C31;&#x662F;&#x8FD9;&#x6837;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x8FD4;&#x56DE;&#x7684;&#x4E0D;&#x662F;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x3002;</p>
<pre><code><span class="comment">// Create an anonymous function expression that gets invoked immediately,</span>
<span class="comment">// and assign its *return value* to a variable. This approach &quot;cuts out the</span>
<span class="comment">// middleman&quot; of the named `makeWhatever` function reference.</span>
<span class="comment">//</span>
<span class="comment">// As explained in the above &quot;important note,&quot; even though parens are not</span>
<span class="comment">// required around this function expression, they should still be used as a</span>
<span class="comment">// matter of convention to help clarify that the variable is being set to</span>
<span class="comment">// the function&apos;s *result* and not the function itself.</span>

<span class="keyword">var</span> counter = (<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
  <span class="keyword">var</span> i = <span class="number">0</span>;

  <span class="keyword">return</span> {
    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
      <span class="keyword">return</span> i;
    },
    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">( val )</span>{</span>
      i = val;
    },
    increment: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="keyword">return</span> ++i;
    }
  };
}());

<span class="comment">// `counter` is an object with properties, which in this case happen to be</span>
<span class="comment">// methods.</span>

counter.<span class="keyword">get</span>(); <span class="comment">// 0</span>
counter.<span class="keyword">set</span>( <span class="number">3</span> );
counter.increment(); <span class="comment">// 4</span>
counter.increment(); <span class="comment">// 5</span>

counter.i; <span class="comment">// undefined (`i` is not a property of the returned object)</span>
i; <span class="comment">// ReferenceError: i is not defined (it only exists inside the closure)</span>
</code></pre><p>&#x6A21;&#x5757;&#x6A21;&#x5F0F;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x975E;&#x5E38;&#x5F3A;&#x5927;&#xFF0C;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x7684;&#x7B80;&#x5355;&#x3002;&#x5229;&#x7528;&#x5F88;&#x5C11;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5C01;&#x88C5;&#x76F8;&#x5173;&#x7684;&#x5C5E;&#x6027;&#x548C;&#x65B9;&#x6CD5;&#x3002;<br>&#x901A;&#x8FC7;&#x6A21;&#x5757;&#x6A21;&#x5F0F;&#x8FD8;&#x53EF;&#x4EE5;&#x6700;&#x5927;&#x9650;&#x5EA6;&#x7684;&#x964D;&#x4F4E;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x7684;&#x98CE;&#x9669;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x79C1;&#x6709;&#x6210;&#x5458;&#x3002;</p>
<pre><code>&#x4EA7;&#x8BC1;&#x51E0;&#x4E2A;&#x4EBA;&#xFF1F;


&#x770B;&#x4E2D;&#x4E86;&#x540E;&#x9700;&#x8981;&#x591A;&#x5C11;&#x5148;&#x7ED9;&#x591A;&#x5C11;&#x8BA2;&#x91D1;
&#x8BA2;&#x91D1;&#x7ED9;&#x540E;&#xFF0C;&#x591A;&#x5C11;&#x5929;&#x7ED9;&#x9996;&#x4ED8;
&#x9996;&#x4ED8;&#x7ED9;&#x5B8C;&#xFF0C;&#x8D37;&#x6B3E;&#x671F;&#x7ED9;&#x591A;&#x5C11;

&#x4E0D;&#x552F;&#x4E00;&#x7684;&#x8D39;&#x7528;&#x8C01;&#x7ED9;

&#x5BB6;&#x91CC;&#x968F;&#x65F6;&#x53EF;&#x4EE5;&#x770B;&#x623F;&#xFF1F;
</code></pre><p>&#x539F;&#x6587;<br><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external">http://benalman.com/news/2010/11/immediately-invoked-function-expression/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In case you hadn&#x2019;t noticed, I&#x2019;m a bit of a stickler for terminology. So, after hearing the popular, yet misleading, JavaScript term &#x201C;self-executing anonymous function&#x201D; (or self-invoked anonymous function) one too many times, I&#x2019;ve finally decided to organize my thoughts into an article.</p>
<p>In addition to providing some very thorough information about how this pattern actually works, I&#x2019;ve actually made a recommendation on what we should call it, moving forward. Also, If you want to skip ahead, you can just check out some actual Immediately-Invoked Function Expressions, but I recommend reading the entire article.</p>
<p>Please understand that this article isn&#x2019;t intended to be an &#x201C;I&#x2019;m right, you&#x2019;re wrong&#x201D; kind of thing. I&#x2019;m genuinely interested in helping people understand potentially complex concepts, and feel that using consistent and accurate terminology is one of the easiest things that people can do to facilitate understanding.</p>
]]>
    
    </summary>
    
      <category term="Translation" scheme="http://blog.gyf1.com/tags/translation/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Understanding JavaScript’s Function.prototype.bind]]></title>
    <link href="http://blog.gyf1.com/2015/01/20/understanding-javascript%E2%80%99s-functionprototypebind/"/>
    <id>http://blog.gyf1.com/2015/01/20/understanding-javascript’s-functionprototypebind/</id>
    <published>2015-01-20T05:43:15.000Z</published>
    <updated>2015-01-20T06:44:57.000Z</updated>
    <content type="html"><![CDATA[<p>&#x5F53;&#x6211;&#x4EEC;&#x4F7F;&#x7528;js&#x4E0D;&#x662F;&#x5F88;&#x4E45;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5F88;&#x5C11;&#x4F1A;&#x6D89;&#x53CA;&#x5230;&#x51FD;&#x6570;&#x7ED1;&#x5B9A;(Function binding)&#x3002;<br>&#x4F46;&#x662F;&#x5F53;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;&#x53E6;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x79CD;&#x4FDD;&#x5B58;this&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5B9E;&#x9645;&#x4E0A;&#x9700;&#x8981;&#x7684;&#x6B63;&#x662F;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">bind</span><span class="params">()</span></span>
</code></pre><p>&#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x9047;&#x5230;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x503E;&#x5411;&#x5C06;this&#x5148;&#x4FDD;&#x5B58;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x4E2D;&#x3002;&#x8FD9;&#x6837;&#x5F53;this&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x6539;&#x53D8;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53D8;&#x91CF;&#x8BBF;&#x95EE;&#x5230;this&#x3002;<br>&#x6BD4;&#x5982;&#x5B9A;&#x4E49;&#x7684;&#x53D8;&#x91CF;&#x540D;&#x4E3A;&#xFF1A;self&#xFF0C;_this&#xFF0C;context</p>
<p>&#x8FD9;&#x6837;&#x505A;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x6709;&#x4E00;&#x4E2A;&#x66F4;&#x597D;&#x7684;&#x9009;&#x62E9;&#x3002;</p>
<p>&#x7F51;&#x53CB;&#x7684;&#x58F0;&#x97F3;&#xFF1A;</p>
<p>1</p>
<pre><code>Ohhhh I would do anything <span class="keyword">for</span> scope, <span class="keyword">but</span> I won&apos;t do <span class="keyword">that</span> = this
&#x6211;&#x53EF;&#x4EE5;&#x5BF9;&#x4F5C;&#x7528;&#x57DF;&#x505A;&#x4EFB;&#x4F55;&#x4E8B;&#x60C5;&#xFF0C;&#x4F46;&#x662F;&#x7EDD;&#x5BF9;&#x4E0D;&#x4F1A;&#x5C06; <span class="keyword">that</span> = this
</code></pre><p>2</p>
<pre><code>&#x5728;jquery&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x4F7F;&#x7528;<span class="variable">$this</span>&#xFF1B;&#x4F46;&#x662F;&#x5728;&#x7EAF;js&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x4F7F;&#x7528;.<span class="keyword">bind</span>()
</code></pre><p>&#x4E0A;&#x9762;&#x4E24;&#x6761;&#x90FD;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7684;&#x5EFA;&#x8BAE;</p>
<a id="more"></a>

<h1 id="&#x6211;&#x4EEC;&#x60F3;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;">&#x6211;&#x4EEC;&#x60F3;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;</h1>
<p>&#x8BF4;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x6211;&#x4EEC;&#x5230;&#x5E95;&#x60F3;&#x89E3;&#x51B3;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#xFF1F;<br>&#x4E0B;&#x9762;&#x662F;&#x4E00;&#x6BB5;&#x6709;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x95EE;&#x9898;&#x7684;&#x4EE3;&#x7801;&#xFF08;&#x53EF;&#x80FD;&#x4F1A;&#x5FD8;&#x8BB0;&#x628A;&#x4E0A;&#x4E0B;&#x6587;&#x653E;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x91CC;&#x9762;&#xFF09;</p>
<pre><code><span class="keyword">var</span> myObj = {

    specialFunction: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>

    },

    anotherSpecialFunction: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>

    },

    getAsyncData: <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
        cb();
    },

    render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="keyword">var</span> that = <span class="keyword">this</span>;
        <span class="keyword">this</span>.getAsyncData(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
            that.specialFunction();
            that.anotherSpecialFunction();
        });
    }
};

myObj.render();
</code></pre><p>&#x5728;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#x9762;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;</p>
<pre><code><span class="keyword">var</span> that = <span class="keyword">this</span>;
</code></pre><p>&#x800C;&#x662F;&#x76F4;&#x63A5;&#x4F7F;&#x7528;</p>
<pre><code><span class="keyword">this</span>.specialFunction()
</code></pre><p>&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C06;&#x4F1A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#xFF1A;</p>
<pre><code>Uncaught TypeError: Object [object <span class="keyword">global</span>] <span class="keyword">has</span> no <span class="function"><span class="keyword">method</span> &apos;<span class="title">specialFunction</span>&apos;</span>
</code></pre><p>&#x867D;&#x7136;&#x4E0A;&#x9762;&#x90A3;&#x6837;&#x7684;&#x4EE3;&#x7801;&#x4E5F;&#x662F;&#x53EF;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x66F4;&#x597D;&#x7684;&#x9009;&#x62E9;&#x662F;</p>
<pre><code><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">bind</span><span class="params">()</span>.</span>
</code></pre><p>&#x8BA9;&#x6211;&#x4EEC;&#x91CD;&#x5199;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF1A;</p>
<pre><code>render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>

    <span class="keyword">this</span>.getAsyncData(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>

        <span class="keyword">this</span>.specialFunction();

        <span class="keyword">this</span>.anotherSpecialFunction();

    }.bind(<span class="keyword">this</span>));

}
</code></pre><h1 id="&#x6211;&#x4EEC;&#x521A;&#x521A;&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;">&#x6211;&#x4EEC;&#x521A;&#x521A;&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;</h1>
<p>&#x4F60;&#x53EF;&#x80FD;&#x5BF9;Function.prototype.bind()&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;&#x6BD4;&#x8F83;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x4F8B;&#x5B50;</p>
<pre><code><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> <span class="params">(scope)</span> {</span>
    <span class="keyword">var</span> fn = <span class="keyword">this</span>;
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="keyword">return</span> fn.apply(scope);
    };
}
</code></pre><p>&#x518D;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x4F7F;&#x7528;&#x6848;&#x4F8B;</p>
<pre><code><span class="keyword">var</span> foo = {
    x: <span class="number">3</span>
}

<span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    console.log(<span class="keyword">this</span>.x);
}

bar(); <span class="comment">// undefined</span>

<span class="keyword">var</span> boundFunc = bar.bind(foo);

boundFunc(); <span class="comment">// 3</span>
</code></pre><h1 id="&#x6D4F;&#x89C8;&#x5668;&#x652F;&#x6301;">&#x6D4F;&#x89C8;&#x5668;&#x652F;&#x6301;</h1>
<pre><code>Browser     <span class="keyword">Version</span> support
Chrome     <span class="number">7</span>
Firefox (Gecko)     <span class="number">4.0</span> (<span class="number">2</span>)
Internet Explorer     <span class="number">9</span>
Opera     <span class="number">11.60</span>
Safari     <span class="number">5.1</span><span class="number">.4</span>
</code></pre><p>&#x4ECE;&#x4E0A;&#x9762;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;ie8&#x662F;&#x4E0D;&#x652F;&#x6301;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x505A;&#x5904;&#x7406;&#xFF0C;&#x5728;ie8&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7801;&#x5C31;&#x7528;&#x4E0D;&#x4E86;&#x4E86;&#x3002;<br>&#x5F88;&#x5E78;&#x8FD0;&#x7684;&#x662F;&#xFF0C;&#x5148;&#x9A71;&#x5E2E;&#x6211;&#x60F3;&#x597D;&#x4E86;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;</p>
<pre><code><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) {
  <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> <span class="params">(oThis)</span> {</span>
    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">&quot;function&quot;</span>) {
      <span class="comment">// closest thing possible to the ECMAScript 5 internal IsCallable function</span>
      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);
    }

    <span class="keyword">var</span> aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),
        fToBind = <span class="keyword">this</span>,
        fNOP = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>},
        fBound = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
          <span class="keyword">return</span> fToBind.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP &amp;&amp; oThis
                                 ? <span class="keyword">this</span>
                                 : oThis,
                               aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));
        };

    fNOP.prototype = <span class="keyword">this</span>.prototype;
    fBound.prototype = <span class="keyword">new</span> fNOP();

    <span class="keyword">return</span> fBound;
  };
}
</code></pre><h1 id="&#x4F7F;&#x7528;&#x6A21;&#x5F0F;">&#x4F7F;&#x7528;&#x6A21;&#x5F0F;</h1>
<p>&#x5F53;&#x6211;&#x4EEC;&#x5B66;&#x4E60;&#x4E1C;&#x897F;&#x65F6;&#xFF0C;&#x5149;&#x5B66;&#x4E60;&#x6982;&#x5FF5;&#x662F;&#x4E0D;&#x884C;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x77E5;&#x9053;&#x600E;&#x4E48;&#x7528;&#x5230;&#x6211;&#x4EEC;&#x5E73;&#x65F6;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x3002;<br>&#x4E0B;&#x9762;&#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;&#x6848;&#x4F8B;</p>
<h2 id="1-_&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x7684;&#x5904;&#x7406;">1. &#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x7684;&#x5904;&#x7406;</h2>
<p>&#x8DDF;&#x8E2A;&#x70B9;&#x51FB;&#x6216;&#x8005;&#x5728;&#x70B9;&#x51FB;&#x540E;&#x505A;&#x4E00;&#x4E9B;&#x5904;&#x7406;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x9700;&#x8981;&#x6211;&#x4EEC;&#x5728;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4E2D;&#x4FDD;&#x5B58;&#x4E00;&#x4E9B;&#x4FE1;&#x606F;</p>
<pre><code><span class="keyword">var</span> logger = {
    x: <span class="number">0</span>,
    updateCount: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="keyword">this</span>.x++;
        console.log(<span class="keyword">this</span>.x);
    }
}
</code></pre><p>&#x540C;&#x65F6;&#x6211;&#x4EEC;&#x4F1A;&#x4F7F;&#x7528;&#x4E0B;&#x9762;&#x7684;&#x589E;&#x52A0;&#x76D1;&#x542C;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#xFF0C;&#x5E76;&#x4E14;&#x8C03;&#x7528;updateCount</p>
<pre><code>document.querySelector(<span class="string">&apos;button&apos;</span>).addEventListener(<span class="string">&apos;click&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    logger.updateCount();
});
</code></pre><p>&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E8E;&#x5728;updateCount&#x80FD;&#x83B7;&#x53D6;&#x5230;&#x6B63;&#x786E;&#x7684;this<br>&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x4EE3;&#x7801;&#x6574;&#x7406;&#x7684;&#x66F4;&#x5E72;&#x51C0;&#x4E00;&#x4E9B;&#xFF1A;</p>
<pre><code>document.querySelector(<span class="string">&apos;button&apos;</span>).addEventListener(<span class="string">&apos;click&apos;</span>, logger.updateCount.<span class="keyword">bind</span>(logger));
</code></pre><h2 id="2-_&#x8BBE;&#x7F6E;Timeout">2. &#x8BBE;&#x7F6E;Timeout</h2>
<p>&#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528;&#x8FC7;&#x6A21;&#x7248;&#x5F15;&#x64CE;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x610F;&#x8BC6;&#x5230;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;&#x9875;&#x9762;&#x4E0A;&#x52A0;&#x8F7D;&#x4E86;&#x4E00;&#x4E2A;template&#xFF0C;&#x600E;&#x4E48;&#x83B7;&#x53D6;&#x65B0;&#x7684;&#x52A0;&#x8F7D;&#x7684;dom&#x8282;&#x70B9;&#x3002;<br>&#x5047;&#x5982;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x5B9E;&#x4F8B;&#x5316;&#x4E00;&#x4E2A;jquery&#x7684;&#x63D2;&#x4EF6;</p>
<pre><code><span class="keyword">var</span> myView = {

    template: <span class="string">&apos;/* a template string containing our &lt;select /&gt; */&apos;</span>,

    $el: $(<span class="string">&apos;#content&apos;</span>),

    afterRender: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="keyword">this</span>.$el.find(<span class="string">&apos;select&apos;</span>).myPlugin();
    },

    render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template());
        <span class="keyword">this</span>.afterRender();
    }
}

myView.render();
</code></pre><p>&#x4F60;&#x53EF;&#x80FD;&#x53D1;&#x73B0;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x53EF;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x662F;&#x6BCF;&#x6B21;&#x90FD;&#x6210;&#x529F;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x95EE;&#x9898;&#x6240;&#x5728;&#x3002;<br>&#x5C31;&#x50CF;&#x4E00;&#x573A;&#x6BD4;&#x8D5B;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x8C01;&#x4F1A;&#x5148;&#x8FBE;&#x5230;&#x7EC8;&#x70B9;&#x3002;&#x6709;&#x7684;&#x65F6;&#x5019;&#x662F;dom&#x5FEB;&#x70B9;&#xFF0C;&#x6709;&#x7684;&#x65F6;&#x5019;jquery&#x63D2;&#x4EF6;&#x5FEB;&#x4E00;&#x70B9;&#x3002;</p>
<p>&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x5C11;&#x90E8;&#x5206;&#x53D1;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;hack&#x7684;&#x65B9;&#x6CD5;&#xFF1A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;setTimeout<br>&#x7EC6;&#x5C0F;&#x7684;&#x6539;&#x53D8;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x6807;</p>
<pre><code><span class="comment">//</span>
afterRender: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">this</span>.$el.find(<span class="string">&apos;select&apos;</span>).myPlugin();
},

render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template());
    setTimeout(<span class="keyword">this</span>.afterRender, <span class="number">0</span>);
}
<span class="comment">//</span>
</code></pre><p>&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x8FD8;&#x6CA1;&#x6709;&#x5B8C;&#x5168;ok&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x4EE3;&#x7801;&#x9519;&#x8BEF;&#x7684;&#x4FE1;&#x606F;</p>
<pre><code><span class="function"><span class="keyword">function</span> .<span class="title">afterRender</span><span class="params">()</span></span> cannot be found
</code></pre><p>&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x505A;&#x7684;&#x4E8B;&#x60C5;&#x5C31;&#x662F;&#x4F7F;&#x7528;bind</p>
<pre><code><span class="comment">//</span>
afterRender: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">this</span>.$el.find(<span class="string">&apos;select&apos;</span>).myPlugin();
},

render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template());
    setTimeout(<span class="keyword">this</span>.afterRender.bind(<span class="keyword">this</span>), <span class="number">0</span>);
}
<span class="comment">//</span>
</code></pre><h2 id="3-_querySelectorAll&#x7684;&#x4E8B;&#x60C5;&#x7ED1;&#x5B9A;">3. querySelectorAll&#x7684;&#x4E8B;&#x60C5;&#x7ED1;&#x5B9A;</h2>
<p>&#x5047;&#x5982;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;querySelectorAll&#x627E;&#x5230;&#x7684;dom&#x90FD;&#x7ED1;&#x5B9A;&#x4E00;&#x4E2A;&#x4E8B;&#x4EF6;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x7528;&#x4E00;&#x4E0B;Array.prototype&#x7684;forEach&#x65B9;&#x6CD5;</p>
<pre><code><span class="keyword">Array</span>.prototype.<span class="keyword">forEach</span>.call(document.querySelectorAll(<span class="string">&apos;.klasses&apos;</span>), <span class="function"><span class="keyword">function</span><span class="params">(el)</span>{</span>
    el.addEventListener(<span class="string">&apos;click&apos;</span>, someFunction);
});
</code></pre><p>&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x901A;&#x8FC7;.bind()&#x6709;&#x4E00;&#x4E2A;&#x66F4;&#x597D;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#xFF1A;</p>
<pre><code><span class="keyword">var</span> unboundForEach = <span class="keyword">Array</span>.prototype.<span class="keyword">forEach</span>,
    <span class="keyword">forEach</span> = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">call</span>.<span class="title">bind</span><span class="params">(unboundForEach)</span>;</span>

<span class="keyword">forEach</span>(document.querySelectorAll(<span class="string">&apos;.klasses&apos;</span>), <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> {</span>
    el.addEventListener(<span class="string">&apos;click&apos;</span>, someFunction);
});
</code></pre><p>&#x539F;&#x6587;&#xFF1A;<br><a href="http://www.smashingmagazine.com/2014/01/23/understanding-javascript-function-prototype-bind/" target="_blank" rel="external">http://www.smashingmagazine.com/2014/01/23/understanding-javascript-function-prototype-bind/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x5F53;&#x6211;&#x4EEC;&#x4F7F;&#x7528;js&#x4E0D;&#x662F;&#x5F88;&#x4E45;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5F88;&#x5C11;&#x4F1A;&#x6D89;&#x53CA;&#x5230;&#x51FD;&#x6570;&#x7ED1;&#x5B9A;(Function binding)&#x3002;<br>&#x4F46;&#x662F;&#x5F53;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;&#x53E6;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x79CD;&#x4FDD;&#x5B58;this&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5B9E;&#x9645;&#x4E0A;&#x9700;&#x8981;&#x7684;&#x6B63;&#x662F;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">bind</span><span class="params">()</span></span>
</code></pre><p>&#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x9047;&#x5230;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x503E;&#x5411;&#x5C06;this&#x5148;&#x4FDD;&#x5B58;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x4E2D;&#x3002;&#x8FD9;&#x6837;&#x5F53;this&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x6539;&#x53D8;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53D8;&#x91CF;&#x8BBF;&#x95EE;&#x5230;this&#x3002;<br>&#x6BD4;&#x5982;&#x5B9A;&#x4E49;&#x7684;&#x53D8;&#x91CF;&#x540D;&#x4E3A;&#xFF1A;self&#xFF0C;_this&#xFF0C;context</p>
<p>&#x8FD9;&#x6837;&#x505A;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x6709;&#x4E00;&#x4E2A;&#x66F4;&#x597D;&#x7684;&#x9009;&#x62E9;&#x3002;</p>
<p>&#x7F51;&#x53CB;&#x7684;&#x58F0;&#x97F3;&#xFF1A;</p>
<p>1</p>
<pre><code>Ohhhh I would do anything <span class="keyword">for</span> scope, <span class="keyword">but</span> I won&apos;t do <span class="keyword">that</span> = this
&#x6211;&#x53EF;&#x4EE5;&#x5BF9;&#x4F5C;&#x7528;&#x57DF;&#x505A;&#x4EFB;&#x4F55;&#x4E8B;&#x60C5;&#xFF0C;&#x4F46;&#x662F;&#x7EDD;&#x5BF9;&#x4E0D;&#x4F1A;&#x5C06; <span class="keyword">that</span> = this
</code></pre><p>2</p>
<pre><code>&#x5728;jquery&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x4F7F;&#x7528;<span class="variable">$this</span>&#xFF1B;&#x4F46;&#x662F;&#x5728;&#x7EAF;js&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x4F7F;&#x7528;.<span class="keyword">bind</span>()
</code></pre><p>&#x4E0A;&#x9762;&#x4E24;&#x6761;&#x90FD;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7684;&#x5EFA;&#x8BAE;</p>
]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maximum call stack size exceeded]]></title>
    <link href="http://blog.gyf1.com/2015/01/20/maximum-call-stack-size-exceeded/"/>
    <id>http://blog.gyf1.com/2015/01/20/maximum-call-stack-size-exceeded/</id>
    <published>2015-01-20T04:21:42.000Z</published>
    <updated>2015-01-20T04:22:26.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/amosleaf/archive/2012/04/19/2457441.html" target="_blank" rel="external">http://www.cnblogs.com/amosleaf/archive/2012/04/19/2457441.html</a><br><a href="http://www.zizhujy.com/blog/post/2012/03/18/Uncaught-RangeError-Maximum-call-stack-size-exceeded.aspx" target="_blank" rel="external">http://www.zizhujy.com/blog/post/2012/03/18/Uncaught-RangeError-Maximum-call-stack-size-exceeded.aspx</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.cnblogs.com/amosleaf/archive/2012/04/19/2457441.html" target="_blank" rel="external">http://www.cnblogs.com/amosleaf/]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[js 匿名函数]]></title>
    <link href="http://blog.gyf1.com/2015/01/20/js-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.gyf1.com/2015/01/20/js-匿名函数/</id>
    <published>2015-01-20T03:34:46.000Z</published>
    <updated>2015-01-20T05:32:55.000Z</updated>
    <content type="html"><![CDATA[<p>&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x7ED9;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#x540D;&#x79F0;&#xFF1F;<br>&#x56E0;&#x4E3A;&#x51FD;&#x6570;&#x540D;&#x79F0;&#x6709;&#x65F6;&#x5019;&#x6CA1;&#x6709;&#x7528;<br>&#x4EC0;&#x4E48;&#x8BF7;&#x770B;&#x4E0B;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF1A;</p>
<h2 id="&#x5728;&#x5BF9;&#x8C61;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;">&#x5728;&#x5BF9;&#x8C61;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;</h2>
<pre><code><span class="keyword">var</span> jabbaTheHut = {
 laugh : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;ho ho ho ho&quot;</span>); }
}
jabbaTheHut.laugh();
</code></pre><h2 id="&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5217;&#x8868;">&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5217;&#x8868;</h2>
<pre><code><span class="keyword">var</span> toDoToday = [
 <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;Aren&apos;t you a little short for a storm trooper?&quot;</span>) },
 <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;Boring conversation anyway&quot;</span>) },
];
<span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;toDoToday.length; x++) {
 toDoToday[x]();
}
</code></pre><h2 id="&#x5C06;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x5176;&#x4ED6;&#x51FD;&#x6570;&#x65F6;">&#x5C06;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x5176;&#x4ED6;&#x51FD;&#x6570;&#x65F6;</h2>
<pre><code><span class="comment">// function statement</span>
<span class="function"><span class="keyword">function</span> <span class="title">itIsATrap</span><span class="params">(theTrap)</span>{</span>
 theTrap();
}

<span class="comment">// function operator</span>
itIsATrap(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;Many Bothans died to bring us this information&quot;</span>); });
</code></pre><p>&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5728;&#x5B9A;&#x4E49;&#x5355;&#x5E94;&#x7528;&#x7684;&#x51FD;&#x6570;&#x65F6;&#x5F88;&#x6709;&#x7528;&#xFF0C;&#x6BD4;&#x5982;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x6CD5;&#x6216;&#x8005;&#x65F6;&#x95F4;&#x5904;&#x7406;&#x65F6;&#x3002;<br>&#x6BD4;&#x5982;&#x5728;jquery&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x7ECF;&#x5E38;&#x4F1A;&#x7528;&#x5230;</p>
<pre><code>$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    alert(<span class="string">&quot;page has loaded.&quot;</span>);
});
</code></pre><h2 id="&#x5728;if&#x6761;&#x4EF6;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x51FD;&#x6570;">&#x5728;if&#x6761;&#x4EF6;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x51FD;&#x6570;</h2>
<pre><code><span class="keyword">var</span> chooseSide;
<span class="keyword">if</span>(skywalker == <span class="string">&quot;Luke Skywalker&quot;</span>) {
    chooseSide = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> <span class="string">&quot;jedi&quot;</span>;
    }
}
<span class="keyword">else</span> {
    chooseSide = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> <span class="string">&quot;sith&quot;</span>;
    }
}
alert(chooseSide());
</code></pre><h2 id="&#x5728;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#x91CC;&#x5B9A;&#x4E49;&#x51FD;&#x6570;">&#x5728;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#x91CC;&#x5B9A;&#x4E49;&#x51FD;&#x6570;</h2>
<pre><code><span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;=<span class="number">900</span>; x++) {
    <span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        alert(<span class="string">&quot;When &quot;</span> + x + <span class="string">&quot; years old you reach, look as good you will not.&quot;</span>);
    }
    myFunction();
}
</code></pre><p><a id="more"></a><br>&#x7CFB;&#x7EDF;&#x6574;&#x7406;&#x4E0B;&#x533F;&#x540D;&#x51FD;&#x6570;(anonymous function)&#x7684;&#x6765;&#x9F99;&#x53BB;&#x8109;<br>&#x6309;&#x7167;&#x76EE;&#x524D;&#x81EA;&#x5DF1;&#x7684;&#x7406;&#x89E3;&#xFF0C;&#x533F;&#x540D;&#x51FD;&#x6570;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x81EA;&#x52A8;&#x8FD0;&#x884C;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x7684;&#x8BF4;&#xFF0C;&#x53EB;&#x8FD0;&#x884C;&#x65F6;&#x51FD;&#x6570;&#x3002;<br>&#x77E5;&#x9053;&#x7684;&#x573A;&#x666F;&#x6709;&#xFF1A;&#x81EA;&#x5DF1;&#x5355;&#x72EC;&#x5199;&#x7684;&#x4E00;&#x4E2A;&#x5E93;&#xFF0C;&#x5728;&#x8C03;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x56E0;&#x4E3A;&#x5E93;&#x5DF2;&#x7ECF;&#x901A;&#x8FC7;&#x533F;&#x540D;&#x51FD;&#x6570;&#x8FD0;&#x884C;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4E0D;&#x5FC5;&#x5728;&#x4F7F;&#x7528;&#x524D;&#x8C03;&#x7528;&#x521D;&#x59CB;&#x5316;&#x3002;</p>
<h1 id="&#x4E00;&#x3001;&#x4EC0;&#x4E48;&#x662F;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF1F;">&#x4E00;&#x3001;&#x4EC0;&#x4E48;&#x662F;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF1F;</h1>
<p>&#x5728;Javascript&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x4E00;&#x822C;&#x6709;&#x5982;&#x4E0B;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;<br>&#x51FD;&#x6570;&#x5173;&#x952E;&#x5B57;(function )&#x8BED;&#x53E5;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">fnMethodName</span><span class="params">(x)</span> {</span>
    alert(x);
}
</code></pre><p>&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;(Function Literals)&#xFF1A;</p>
<pre><code><span class="keyword">var</span> fnMethodName = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span> {</span>
    alert(x);
}
</code></pre><p>Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF1A;</p>
<pre><code><span class="keyword">var</span> fnMethodName = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">&apos;x&apos;</span>, <span class="string">&apos;alert(x);&apos;</span>)</span></span>
</code></pre><p><em>&#x4E0A;&#x9762;&#x4E09;&#x79CD;&#x65B9;&#x6CD5;&#x5B9A;&#x4E49;&#x4E86;&#x540C;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x51FD;&#x6570;fnMethodName&#xFF0C;&#x7B2C;1&#x79CD;&#x5C31;&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x540E;&#x4E24;&#x79CD;&#x90FD;&#x662F;&#x628A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x590D;&#x5236;&#x7ED9;&#x53D8;&#x91CF;fnMethodName&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x662F;&#x6CA1;&#x6709;&#x540D;&#x5B57;&#x7684;&#xFF0C;&#x5373;&#x533F;&#x540D;&#x51FD;&#x6570;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x76F8;&#x5F53;&#x591A;&#x7684;&#x8BED;&#x8A00;&#x90FD;&#x6709;&#x533F;&#x540D;&#x51FD;&#x6570;&#x3002;</em></p>
<h1 id="&#x4E8C;&#x3001;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x548C;Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x533A;&#x522B;">&#x4E8C;&#x3001;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x548C;Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x533A;&#x522B;</h1>
<p>&#x867D;&#x7136;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x662F;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x8BED;&#x6CD5;&#x5141;&#x8BB8;&#x4E3A;&#x5176;&#x6307;&#x5B9A;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x540D;&#xFF0C;&#x5F53;&#x5199;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x65F6;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x5B83;&#x81EA;&#x5DF1;&#xFF0C;&#x4F7F;&#x7528;Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x5219;&#x4E0D;&#x884C;&#x3002;</p>
<pre><code><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">fact</span><span class="params">(x)</span> {</span>
  <span class="keyword">if</span> (x &lt;  = <span class="number">1</span>)
      <span class="keyword">return</span> <span class="number">1</span>;
  <span class="keyword">else</span>
      <span class="keyword">return</span> x * fact(x - <span class="number">1</span>);
};
</code></pre><p>Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x5141;&#x8BB8;&#x8FD0;&#x884C;&#x65F6;Javascript&#x4EE3;&#x7801;&#x52A8;&#x6001;&#x7684;&#x521B;&#x5EFA;&#x548C;&#x7F16;&#x8BD1;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x65B9;&#x5F0F;&#x4E0A;&#x5B83;&#x7C7B;&#x4F3C;&#x5168;&#x5C40;&#x51FD;&#x6570;eval()&#x3002;<br>Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x6BCF;&#x6B21;&#x6267;&#x884C;&#x65F6;&#x90FD;&#x89E3;&#x6790;&#x51FD;&#x6570;&#x4E3B;&#x4F53;&#xFF0C;&#x5E76;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x51FD;&#x6570;&#x5BF9;&#x8C61;&#x3002;<br>&#x6240;&#x4EE5;&#x5F53;&#x5728;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x6216;&#x8005;&#x9891;&#x7E41;&#x6267;&#x884C;&#x7684;&#x51FD;&#x6570;&#x4E2D;&#x8C03;&#x7528;Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x6548;&#x7387;&#x662F;&#x975E;&#x5E38;&#x4F4E;&#x7684;&#x3002;<br>&#x76F8;&#x53CD;&#xFF0C;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x5374;&#x4E0D;&#x662F;&#x6BCF;&#x6B21;&#x9047;&#x5230;&#x90FD;&#x91CD;&#x65B0;&#x7F16;&#x8BD1;&#x7684;&#x3002;<br>&#x7528;Function()&#x6784;&#x9020;&#x51FD;&#x6570;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x65F6;&#x5E76;&#x4E0D;&#x9075;&#x5FAA;&#x5178;&#x578B;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#xFF0C;&#x5B83;&#x4E00;&#x76F4;&#x628A;&#x5B83;&#x5F53;&#x4F5C;&#x662F;&#x9876;&#x7EA7;&#x51FD;&#x6570;&#x6765;&#x6267;&#x884C;&#x3002;</p>
<pre><code><span class="keyword">var</span> y = <span class="string">&quot;global&quot;</span>;
<span class="function"><span class="keyword">function</span> <span class="title">constructFunction</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> y = <span class="string">&quot;local&quot;</span>;
    <span class="keyword">return</span> <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">&quot;return y&quot;</span>)</span>;</span> <span class="comment">// &#x65E0;&#x6CD5;&#x83B7;&#x53D6;&#x5C40;&#x90E8;&#x53D8;&#x91CF;</span>
}
alert(constructFunction()()); <span class="comment">// &#x8F93;&#x51FA; &quot;global&quot;</span>
</code></pre><p>&#x548C;&#x51FD;&#x6570;&#x5173;&#x952E;&#x5B57;&#x5B9A;&#x4E49;&#x76F8;&#x6BD4;Function()&#x6784;&#x9020;&#x5668;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x7279;&#x70B9;&#x4E14;&#x8981;&#x96BE;&#x4EE5;&#x4F7F;&#x7528;&#x7684;&#x591A;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x9879;&#x6280;&#x672F;&#x901A;&#x5E38;&#x5F88;&#x5C11;&#x4F7F;&#x7528;&#x3002;<br>&#x800C;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x8868;&#x8FBE;&#x5F0F;&#x548C;&#x51FD;&#x6570;&#x5173;&#x952E;&#x5B57;&#x5B9A;&#x4E49;&#x975E;&#x5E38;&#x63A5;&#x8FD1;&#x3002;<br>&#x8003;&#x8651;&#x524D;&#x9762;&#x7684;&#x533A;&#x522B;&#xFF0C;&#x867D;&#x7136;&#x6709;&#x6D88;&#x606F;&#x8BF4;&#x5B57;&#x9762;&#x91CF;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#x5728;OS X 10.4.3&#x4E0B;&#x7684;&#x67D0;&#x4E9B;webkit&#x7684;&#x5F15;&#x64CE;&#x4E0B;&#x6709;bug&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#x5E73;&#x5E38;&#x6240;&#x8BF4;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#x5747;&#x6307;&#x91C7;&#x7528;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x5F62;&#x5F0F;&#x7684;&#x533F;&#x540D;&#x51FD;&#x6570;&#x3002;</p>
<h1 id="&#x4E09;&#x3001;&#x533F;&#x540D;&#x51FD;&#x6570;&#x7684;&#x4EE3;&#x7801;&#x6A21;&#x5F0F;">&#x4E09;&#x3001;&#x533F;&#x540D;&#x51FD;&#x6570;&#x7684;&#x4EE3;&#x7801;&#x6A21;&#x5F0F;</h1>
<p>&#x9519;&#x8BEF;&#x6A21;&#x5F0F;&#xFF1A;&#x5176;&#x65E0;&#x6CD5;&#x5DE5;&#x4F5C;&#xFF0C;&#x6D4F;&#x89C8;&#x5668;&#x4F1A;&#x62A5;&#x8BED;&#x6CD5;&#x9519;&#x3002;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">{
    alert(1);
}</span><span class="params">()</span>;</span>
</code></pre><p>&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#xFF1A;&#x9996;&#x5148;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x5B83;&#x3002;<br>    (function () {<br>        alert(1);<br>    })();</p>
<p>&#x4F18;&#x5148;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&#x7531;&#x4E8E;Javascript&#x6267;&#x884C;&#x8868;&#x8FBE;&#x5F0F;&#x662F;&#x4ECE;&#x5706;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#x5230;&#x5916;&#x9762;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x7528;&#x5706;&#x62EC;&#x53F7;&#x5F3A;&#x5236;&#x6267;&#x884C;&#x58F0;&#x660E;&#x7684;&#x51FD;&#x6570;&#x3002;</p>
<pre><code><span class="list">(<span class="title">function</span> <span class="list">()</span> {
    alert<span class="list">(<span class="number">2</span>)</span><span class="comment">;</span>
}<span class="list">()</span>)</span><span class="comment">;</span>
</code></pre><p>Void&#x64CD;&#x4F5C;&#x7B26;&#xFF1A;&#x7528;void&#x64CD;&#x4F5C;&#x7B26;&#x53BB;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x7528;&#x5706;&#x62EC;&#x53F7;&#x5305;&#x56F4;&#x7684;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x64CD;&#x4F5C;&#x6570;&#x3002;</p>
<pre><code><span class="keyword">void</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    alert(<span class="number">3</span>);
} ()
</code></pre><h1 id="&#x56DB;&#x3001;&#x533F;&#x540D;&#x51FD;&#x6570;&#x7684;&#x5E94;&#x7528;">&#x56DB;&#x3001;&#x533F;&#x540D;&#x51FD;&#x6570;&#x7684;&#x5E94;&#x7528;</h1>
<p>&#x300A;Javascript&#x7684;&#x4E00;&#x79CD;&#x6A21;&#x5757;&#x6A21;&#x5F0F;&#x300B;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x53E5;&#x8BDD;&#x5C31;&#x662F;&#x201C;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x662F;&#x9B54;&#x9B3C;&#x201D;&#x3002;<br>&#x914D;&#x5408;var&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x533F;&#x540D;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x7684;&#x4FDD;&#x8BC1;&#x5728;&#x9875;&#x9762;&#x4E0A;&#x5199;&#x5165;Javascript&#xFF0C;&#x800C;&#x4E0D;&#x4F1A;&#x9020;&#x6210;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x7684;&#x6C61;&#x67D3;&#x3002;<br>&#x8FD9;&#x5728;&#x7ED9;&#x4E00;&#x4E2A;&#x4E0D;&#x662F;&#x5F88;&#x719F;&#x6089;&#x7684;&#x9875;&#x9762;&#x589E;&#x52A0;Javascript&#x65F6;&#x975E;&#x5E38;&#x6709;&#x6548;&#xFF0C;&#x4E5F;&#x5F88;&#x4F18;&#x7F8E;&#x3002;<br>&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;YUI&#x4EE5;&#x53CA;&#x5176;&#x76F8;&#x5E94;&#x7684;&#x8303;&#x4F8B;&#x4E2D;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF0C;&#x5176;&#x4ED6;&#x7684;Javascript&#x5E93;&#x4E2D;&#x4E5F;&#x4E0D;&#x4E4F;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;<br>Javascript&#x7684;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;(functional programming)&#x7684;&#x57FA;&#x77F3;&#x3002;<br>&#x5177;&#x4F53;&#x8BF7;&#x770B;&#x300A;&#x7528;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;&#x6280;&#x672F;&#x7F16;&#x5199;&#x4F18;&#x7F8E;&#x7684; JavaScript&#x300B;&#x548C;&#x300A;&#x51FD;&#x6570;&#x5F0F;JavaScript&#x7F16;&#x7A0B;&#x6307;&#x5357;&#x300B;&#x3002;</p>
<p><a href="http://www.cnblogs.com/playerlife/archive/2012/10/17/2727683.html" target="_blank" rel="external">http://www.cnblogs.com/playerlife/archive/2012/10/17/2727683.html</a><br><a href="http://www.jb51.net/article/24759.htm" target="_blank" rel="external">http://www.jb51.net/article/24759.htm</a><br><a href="http://blog.163.com/water_down/blog/static/1702765902010869124093/" target="_blank" rel="external">http://blog.163.com/water_down/blog/static/1702765902010869124093/</a></p>
<p>&#x533F;&#x540D;&#x51FD;&#x6570;&#x662F;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x52A8;&#x6001;&#x58F0;&#x660E;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x7ED9;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#x540D;&#x79F0;&#xFF0C;&#x6240;&#x4EE5;&#x53EB;&#x505A;&#x533F;&#x540D;&#x51FD;&#x6570;&#x3002;</p>
<p>&#x533F;&#x540D;&#x51FD;&#x6570;&#x7684;&#x662F;&#x901A;&#x8FC7;&#x51FD;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x6765;&#x5B9A;&#x4E49;&#x7684;&#x3002;</p>
<p>&#x4E00;&#x822C;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x51FD;&#x6570;&#x5173;&#x952E;&#x5B57;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">flyToTheMoon</span><span class="params">()</span>
{</span>
  alert(<span class="string">&quot;Zoom! Zoom! Zoom!&quot;</span>);
}
flyToTheMoon();
</code></pre><p>&#x800C;&#x4F7F;&#x7528;&#x5B57;&#x9762;&#x91CF;&#x5B9A;&#x4E49;&#x533F;&#x540D;&#x51FD;&#x6570;&#x4F7F;&#x7528;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">flyToTheMoon</span><span class="params">()</span>
{</span>
  alert(<span class="string">&quot;Zoom! Zoom! Zoom!&quot;</span>);
}
flyToTheMoon();
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x7ED9;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#x540D;&#x79F0;&#xFF1F;<br>&#x56E0;&#x4E3A;&#x51FD;&#x6570;&#x540D;&#x79F0;&#x6709;&#x65F6;&#x5019;&#x6CA1;&#x6709;&#x7528;<br>&#x4EC0;&#x4E48;&#x8BF7;&#x770B;&#x4E0B;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF1A;</p>
<h2 id="&#x5728;&#x5BF9;&#x8C61;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;">&#x5728;&#x5BF9;&#x8C61;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;</h2>
<pre><code><span class="keyword">var</span> jabbaTheHut = {
 laugh : <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;ho ho ho ho&quot;</span>); }
}
jabbaTheHut.laugh();
</code></pre><h2 id="&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5217;&#x8868;">&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5217;&#x8868;</h2>
<pre><code><span class="keyword">var</span> toDoToday = [
 <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;Aren&apos;t you a little short for a storm trooper?&quot;</span>) },
 <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;Boring conversation anyway&quot;</span>) },
];
<span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;toDoToday.length; x++) {
 toDoToday[x]();
}
</code></pre><h2 id="&#x5C06;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x5176;&#x4ED6;&#x51FD;&#x6570;&#x65F6;">&#x5C06;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x5176;&#x4ED6;&#x51FD;&#x6570;&#x65F6;</h2>
<pre><code><span class="comment">// function statement</span>
<span class="function"><span class="keyword">function</span> <span class="title">itIsATrap</span><span class="params">(theTrap)</span>{</span>
 theTrap();
}

<span class="comment">// function operator</span>
itIsATrap(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> alert(<span class="string">&quot;Many Bothans died to bring us this information&quot;</span>); });
</code></pre><p>&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5728;&#x5B9A;&#x4E49;&#x5355;&#x5E94;&#x7528;&#x7684;&#x51FD;&#x6570;&#x65F6;&#x5F88;&#x6709;&#x7528;&#xFF0C;&#x6BD4;&#x5982;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x6CD5;&#x6216;&#x8005;&#x65F6;&#x95F4;&#x5904;&#x7406;&#x65F6;&#x3002;<br>&#x6BD4;&#x5982;&#x5728;jquery&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x7ECF;&#x5E38;&#x4F1A;&#x7528;&#x5230;</p>
<pre><code>$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    alert(<span class="string">&quot;page has loaded.&quot;</span>);
});
</code></pre><h2 id="&#x5728;if&#x6761;&#x4EF6;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x51FD;&#x6570;">&#x5728;if&#x6761;&#x4EF6;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x51FD;&#x6570;</h2>
<pre><code><span class="keyword">var</span> chooseSide;
<span class="keyword">if</span>(skywalker == <span class="string">&quot;Luke Skywalker&quot;</span>) {
    chooseSide = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> <span class="string">&quot;jedi&quot;</span>;
    }
}
<span class="keyword">else</span> {
    chooseSide = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> <span class="string">&quot;sith&quot;</span>;
    }
}
alert(chooseSide());
</code></pre><h2 id="&#x5728;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#x91CC;&#x5B9A;&#x4E49;&#x51FD;&#x6570;">&#x5728;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#x91CC;&#x5B9A;&#x4E49;&#x51FD;&#x6570;</h2>
<pre><code><span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;=<span class="number">900</span>; x++) {
    <span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        alert(<span class="string">&quot;When &quot;</span> + x + <span class="string">&quot; years old you reach, look as good you will not.&quot;</span>);
    }
    myFunction();
}
</code></pre><p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[meteor offline]]></title>
    <link href="http://blog.gyf1.com/2015/01/20/meteor-offline/"/>
    <id>http://blog.gyf1.com/2015/01/20/meteor-offline/</id>
    <published>2015-01-20T01:36:58.000Z</published>
    <updated>2015-01-20T01:38:21.000Z</updated>
    <content type="html"><![CDATA[<p>&#x79BB;&#x7EBF;&#x5E94;&#x7528;<br><a id="more"></a><br><a href="http://blog.groupbuddies.com/posts/45-offline-web-apps-with-meteor" target="_blank" rel="external">http://blog.groupbuddies.com/posts/45-offline-web-apps-with-meteor</a><br><a href="https://github.com/awatson1978/meteor-cookbook/blob/master/cookbook/offline.md" target="_blank" rel="external">https://github.com/awatson1978/meteor-cookbook/blob/master/cookbook/offline.md</a><br><a href="https://github.com/awatson1978/offline-todos" target="_blank" rel="external">https://github.com/awatson1978/offline-todos</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x79BB;&#x7EBF;&#x5E94;&#x7528;<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[hello gulp]]></title>
    <link href="http://blog.gyf1.com/2015/01/20/hello-gulp/"/>
    <id>http://blog.gyf1.com/2015/01/20/hello-gulp/</id>
    <published>2015-01-20T00:53:14.000Z</published>
    <updated>2015-01-20T00:56:09.000Z</updated>
    <content type="html"><![CDATA[<p>gulp.js &#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;&#x6D41;&#x7684;&#xFF0C;&#x4EE3;&#x7801;&#x4F18;&#x4E8E;&#x914D;&#x7F6E;&#x7684;&#x65B0;&#x4E00;&#x4EE3;&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x3002;<br>Gulp &#x548C; Grunt &#x7C7B;&#x4F3C;&#x3002;&#x4F46;&#x76F8;&#x6BD4;&#x4E8E; Grunt &#x7684;&#x9891;&#x7E41;&#x7684; IO &#x64CD;&#x4F5C;&#xFF0C;Gulp &#x7684;&#x6D41;&#x64CD;&#x4F5C;&#xFF0C;&#x80FD;&#x66F4;&#x5FEB;&#x5730;&#x5B8C;&#x6210;&#x6784;&#x5EFA;&#x3002;<br><a id="more"></a><br><a href="http://blog.csdn.net/ys_073/article/details/20805345" target="_blank" rel="external">http://blog.csdn.net/ys_073/article/details/20805345</a><br><a href="http://blog.csdn.net/kiwi_coder/article/details/36422385" target="_blank" rel="external">http://blog.csdn.net/kiwi_coder/article/details/36422385</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>gulp.js &#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;&#x6D41;&#x7684;&#xFF0C;&#x4EE3;&#x7801;&#x4F18;&#x4E8E;&#x914D;&#x7F6E;&#x7684;&#x65B0;&#x4E00;&#x4EE3;&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x3002;<br>Gulp &#x548C; Grunt &#x7C7B;&#x4F3C;&#x3002;&#x4F46;&#x76F8;&#x6BD4;&#x4E8E; Grunt &#x7684;&#x9891;&#x7E41;&#x7684; IO &#x64CD;&#x4F5C;&#xFF0C;Gulp &#x7684;&#x6D41;&#x64CD;&#x4F5C;&#xFF0C;&#x80FD;&#x66F4;&#x5FEB;&#x5730;&#x5B8C;&#x6210;&#x6784;&#x5EFA;&#x3002;<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Understanding Prototypes in JavaScript]]></title>
    <link href="http://blog.gyf1.com/2015/01/18/understanding-prototypes-in-javascript/"/>
    <id>http://blog.gyf1.com/2015/01/18/understanding-prototypes-in-javascript/</id>
    <published>2015-01-18T07:47:58.000Z</published>
    <updated>2015-01-22T07:49:37.000Z</updated>
    <content type="html"><![CDATA[<p>For the purposes of this post, I will be talking about JavaScript objects using syntax defined in ECMAScript 5.1.<br>The basic semantics existed in Edition 3, but they were not well exposed.</p>
<a id="more"></a>

<h1 id="&#x5BF9;&#x8C61;">&#x5BF9;&#x8C61;</h1>
<p>&#x5728;js&#x91CC;&#x9762;&#x5BF9;&#x8C61;&#x662F;&#x6307;&#x7684;&#x952E;&#x503C;&#x5BF9;&#x3002;&#x6BD4;&#x5982;&#x6211;&#x60F3;&#x63CF;&#x8FF0;&#x6211;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x6211;&#x4F1A;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x6709;&#x4E24;&#x4E2A;key&#x7684;&#x5BF9;&#x8C61;&#xFF1A;<br>&#x201C;firstName&#x201D; &#x6307;&#x5411;&#x201D;Yinfeng&#x201D; &#x548C; &#x201C;lastName&#x201D; &#x6307;&#x5411; &#x201C;Guo&#x201D;<br>key&#x5728;&#x5BF9;&#x8C61;&#x4E2D;&#x90FD;&#x662F;string</p>
<p>&#x5728;js&#x4E2D;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;Object.create</p>
<pre><code><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(<span class="literal">null</span>); <span class="comment">// this creates an empty objects</span>
</code></pre><p>&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x4EEC;&#x4E0D;&#x76F4;&#x63A5;&#x4F7F;&#x7528;var person = {}; &#xFF1F;</p>
<h1 id="&#x539F;&#x578B;">&#x539F;&#x578B;</h1>
<p>&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;js&#x4E2D;&#x7684;&#x5BF9;&#x8C61;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#xFF1A;&#x6307;&#x5411;&#x53E6;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x6307;&#x9488;&#x3002;<br>&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x4E2A;&#x6307;&#x9488;&#x53EB;&#x505A;&#x539F;&#x578B;&#x3002;<br>&#x5047;&#x5982;&#x4F60;&#x5728;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4E2D;&#xFF0C;&#x67E5;&#x627E;&#x67D0;&#x4E00;&#x4E2A;key&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6CA1;&#x6709;&#x627E;&#x5230;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;js&#x4F1A;&#x7EE7;&#x7EED;&#x5728;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x539F;&#x578B;&#x4E2D;&#x53BB;&#x67E5;&#x627E;&#x3002;<br>&#x627E;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C31;&#x662F;&#x904D;&#x5386;&#x201C;&#x539F;&#x578B;&#x94FE;&#x201D;&#xFF0C;&#x77E5;&#x9053;&#x627E;&#x5230;null&#x503C;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x4F1A;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;undefined.</p>
<p>&#x518D;&#x770B;&#x4E0B;&#x4E0A;&#x9762;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x4EE3;&#x7801; Object.create(null).<br>&#x53C2;&#x6570;&#x544A;&#x8BC9;js&#xFF0C;&#x4EC0;&#x4E48;&#x662F;&#x65B0;&#x5B9A;&#x4E49;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x539F;&#x578B;&#x3002;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;Object.getPrototypeOf&#x6765;&#x67E5;&#x770B;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x539F;&#x578B;&#x3002;</p>
<pre><code><span class="keyword">var</span> man = <span class="built_in">Object</span>.create(<span class="literal">null</span>);
defineProperty(man, <span class="string">&apos;sex&apos;</span>, <span class="string">&quot;male&quot;</span>);

<span class="keyword">var</span> yehuda = <span class="built_in">Object</span>.create(man);
defineProperty(yehuda, <span class="string">&apos;firstName&apos;</span>, <span class="string">&quot;Yehuda&quot;</span>);
defineProperty(yehuda, <span class="string">&apos;lastName&apos;</span>, <span class="string">&quot;Katz&quot;</span>);

yehuda.sex       <span class="comment">// &quot;male&quot;</span>
yehuda.firstName <span class="comment">// &quot;Yehuda&quot;</span>
yehuda.lastName  <span class="comment">// &quot;Katz&quot;</span>

<span class="built_in">Object</span>.getPrototypeOf(yehuda) <span class="comment">// returns the man object</span>
</code></pre><p>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x591A;&#x4E2A;&#x9519;&#x5F00;&#x7684;&#x5171;&#x4EAB;&#x5BF9;&#x8C61;</p>
<pre><code><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(<span class="literal">null</span>);
defineProperty(person, <span class="string">&apos;fullName&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>.lastName;
});

<span class="comment">// this time, let&apos;s make man&apos;s prototype person, so all</span>
<span class="comment">// men share the fullName function</span>
<span class="keyword">var</span> man = <span class="built_in">Object</span>.create(person);
defineProperty(man, <span class="string">&apos;sex&apos;</span>, <span class="string">&quot;male&quot;</span>);

<span class="keyword">var</span> yehuda = <span class="built_in">Object</span>.create(man);
defineProperty(yehuda, <span class="string">&apos;firstName&apos;</span>, <span class="string">&quot;Yehuda&quot;</span>);
defineProperty(yehuda, <span class="string">&apos;lastName&apos;</span>, <span class="string">&quot;Katz&quot;</span>);

yehuda.sex        <span class="comment">// &quot;male&quot;</span>
yehuda.fullName() <span class="comment">// &quot;Yehuda Katz&quot;</span>
</code></pre><h1 id="&#x8BBE;&#x7F6E;&#x5C5E;&#x6027;">&#x8BBE;&#x7F6E;&#x5C5E;&#x6027;</h1>
<p>&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;writable, configurable, enumerable&#x7684;&#x5C5E;&#x6027;&#x662F;&#x975E;&#x5E38;&#x666E;&#x904D;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x6BCF;&#x6B21;&#x90FD;&#x90A3;&#x6837;&#x8C03;&#x7528;defineProperty&#x3002;<br>js&#x63D0;&#x4F9B;&#x4E86;&#x66F4;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;&#x901A;&#x8FC7;=&#x76F4;&#x63A5;&#x8D4B;&#x503C;</p>
<pre><code><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(<span class="literal">null</span>);

<span class="comment">// instead of using defineProperty and specifying writable,</span>
<span class="comment">// configurable, and enumerable, we can just assign the</span>
<span class="comment">// value directly and JavaScript will take care of the rest</span>
person[<span class="string">&apos;fullName&apos;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>.lastName;
};

<span class="comment">// this time, let&apos;s make man&apos;s prototype person, so all</span>
<span class="comment">// men share the fullName function</span>
<span class="keyword">var</span> man = <span class="built_in">Object</span>.create(person);
man[<span class="string">&apos;sex&apos;</span>] = <span class="string">&quot;male&quot;</span>;

<span class="keyword">var</span> yehuda = <span class="built_in">Object</span>.create(man);
yehuda[<span class="string">&apos;firstName&apos;</span>] = <span class="string">&quot;Yehuda&quot;</span>;
yehuda[<span class="string">&apos;lastName&apos;</span>] = <span class="string">&quot;Katz&quot;</span>;

yehuda.sex        <span class="comment">// &quot;male&quot;</span>
yehuda.fullName() <span class="comment">// &quot;Yehuda Katz&quot;</span>
</code></pre><h1 id="&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;">&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;</h1>
<p>&#x6BCF;&#x6B21;&#x90FD;&#x8981;&#x5355;&#x72EC;&#x5B9A;&#x4E49;&#x5F88;&#x591A;&#x5C5E;&#x6027;&#x662F;&#x5F88;&#x70E6;&#x7684;&#x4E00;&#x4EF6;&#x4E8B;&#x60C5;&#x3002;js&#x63D0;&#x4F9B;&#x4E86;&#x5B57;&#x9762;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x5E76;&#x4E14;&#x4E00;&#x6B21;&#x6027;&#x5B9A;&#x4E49;&#x5C5E;&#x6027;&#x3002;</p>
<pre><code><span class="keyword">var</span> person = { firstName: <span class="string">&quot;Paul&quot;</span>, lastName: <span class="string">&quot;Irish&quot;</span> }
</code></pre><p>&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x7B49;&#x540C;&#x4E8E;&#xFF1A;</p>
<pre><code>var person = Object<span class="preprocessor">.create</span>(Object<span class="preprocessor">.prototype</span>)<span class="comment">;</span>
person<span class="preprocessor">.firstName</span> = <span class="string">&quot;Paul&quot;</span><span class="comment">;</span>
person<span class="preprocessor">.lastName</span>  = <span class="string">&quot;Irish&quot;</span><span class="comment">;</span>
</code></pre><p>&#x7528;&#x5B57;&#x9762;&#x91CF;&#x8BED;&#x6CD5;&#x521B;&#x5EFA;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x539F;&#x578B;&#xFF0C;&#x4F1A;&#x9ED8;&#x8BA4;&#x4E3A;Object.prototype&#x3002;&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x4E0B;&#x9762;&#x8FD9;&#x6837;&#x5B50;&#xFF1A;</p>
<p><img src="http://yehudakatz.com/wp-content/uploads/2011/08/prototype-chain.png" alt="&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;&#x521B;&#x5EFA;&#x7684;&#x56FE;&#x7247;"></p>
<p>Object.prototype &#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E9B;&#x5E0C;&#x671B;&#x5BF9;&#x8C61;&#x62E5;&#x6709;&#x7684;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x65B9;&#x6CD5;&#x3002;<br>&#x901A;&#x8FC7;&#x539F;&#x578B;&#x94FE;&#xFF08;prototype chain&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x901A;&#x8FC7;&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;&#x521B;&#x5EFA;&#x7684;&#x5BF9;&#x8C61;&#x90FD;&#x4F1A;&#x6709;&#x4E0A;&#x9762;&#x56FE;&#x7247;&#x4E2D;&#x7684;&#x90A3;&#x4E9B;&#x65B9;&#x6CD5;&#x3002;<br>&#x5F53;&#x7136;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8986;&#x76D6;&#x90A3;&#x4E9B;&#x5C5E;&#x6027;&#x65B9;&#x6CD5;&#xFF0C;&#x53EA;&#x8981;&#x6211;&#x4EEC;&#x76F4;&#x63A5;&#x5B9A;&#x4E49;&#x5728;&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;&#x4E0A;&#x9762;&#x3002;<br>&#x901A;&#x5E38;&#x6765;&#x8BF4;&#xFF0C;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x4E00;&#x822C;&#x4F1A;&#x91CD;&#x5199;toString&#x65B9;&#x6CD5;</p>
<pre><code><span class="keyword">var</span> alex = { firstName: <span class="string">&quot;Alex&quot;</span>, lastName: <span class="string">&quot;Russell&quot;</span> };

alex.toString() <span class="comment">// &quot;[object Object]&quot;</span>

<span class="keyword">var</span> brendan = {
  firstName: <span class="string">&quot;Brendan&quot;</span>,
  lastName: <span class="string">&quot;Eich&quot;</span>,
  toString: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> <span class="keyword">return</span> <span class="string">&quot;Brendan Eich&quot;</span>; }
};

brendan.toString() <span class="comment">// &quot;Brendan Eich&quot;</span>
</code></pre><p>&#x4E0D;&#x5E78;&#x7684;&#x662F;&#xFF0C;&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;&#x53EA;&#x6709;&#x5728;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x5E76;&#x4E14;&#x4E0D;&#x4ECB;&#x610F;Object.prototype&#x4F5C;&#x4E3A;&#x9ED8;&#x8BA4;&#x539F;&#x578B;&#x7684;&#x624D;&#x4F1A;&#x6BD4;&#x8F83;&#x9002;&#x7528;&#x3002;<br>&#x5BF9;&#x8C61;&#x5B57;&#x9762;&#x91CF;&#x7684;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x4E0A;&#x4E0A;&#x9762;&#x90A3;&#x6837;&#x5206;&#x4EAB;&#x6216;&#x8005;&#x4F20;&#x9012;&#x5C5E;&#x6027;&#x3002;<br>&#x6240;&#x4EE5;&#x6709;&#x5F97;&#x6709;&#x5931;&#x3002;<br>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x7ED9;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;&#x539F;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E0B;&#x9762;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;</p>
<pre><code><span class="keyword">var</span> fromPrototype = <span class="function"><span class="keyword">function</span><span class="params">(prototype, object)</span> {</span>
  <span class="keyword">var</span> newObject = <span class="built_in">Object</span>.create(prototype);

  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> object) {
    <span class="keyword">if</span> (object.hasOwnProperty(prop)) {
      newObject[prop] = object[prop];
    }
  }

  <span class="keyword">return</span> newObject;
};

<span class="keyword">var</span> person = {
  toString: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>.lastName;
  }
};

<span class="keyword">var</span> man = fromPrototype(person, {
  sex: <span class="string">&quot;male&quot;</span>
});

<span class="keyword">var</span> jeremy = fromPrototype(man, {
  firstName: <span class="string">&quot;Jeremy&quot;</span>,
  lastName:  <span class="string">&quot;Ashkenas&quot;</span>
});

jeremy.sex        <span class="comment">// &quot;male&quot;</span>
jeremy.toString() <span class="comment">// &quot;Jeremy Ashkenas&quot;</span>
</code></pre><p>&#x5EFA;&#x597D;&#x7684;&#x5BF9;&#x8C61;&#x50CF;&#x4E0B;&#x9762;&#x8FD9;&#x6837;</p>
<p><img src="http://yehudakatz.com/wp-content/uploads/2011/08/prototype-chain-2.png" alt="&#x5E26;&#x6709;&#x6307;&#x5B9A;&#x539F;&#x578B;&#x7684;"></p>
<h1 id="&#x672C;&#x5730;&#x5BF9;&#x8C61;&#x5B9A;&#x5411;">&#x672C;&#x5730;&#x5BF9;&#x8C61;&#x5B9A;&#x5411;</h1>
<p>&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x539F;&#x578B;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5B9E;&#x73B0;&#x7EE7;&#x627F;&#xFF0C;&#x5C31;&#x50CF;&#x4F20;&#x7EDF;&#x7684;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x8BED;&#x8A00;&#x3002;<br>&#x4E3A;&#x4E86;&#x7528;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;js&#x63D0;&#x4F9B;&#x4E86;new&#x64CD;&#x4F5C;&#x7B26;&#x3002;</p>
<p>&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#xFF0C;js&#x5141;&#x8BB8;&#x6211;&#x4EEC;&#x4F7F;&#x7528;function&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x65E2;&#x80FD;&#x4F5C;&#x4E3A;&#x6784;&#x9020;&#x5668;&#x6765;&#x521D;&#x59CB;&#x5316;&#x5BF9;&#x8C61;&#xFF0C;&#x53C8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x539F;&#x578B;&#x7684;&#x7279;&#x6027;&#x3002;</p>
<pre><code><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">(firstName, lastName)</span> {</span>
  <span class="keyword">this</span>.firstName = firstName;
  <span class="keyword">this</span>.lastName = lastName;
}

Person.prototype = {
  toString: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>.lastName; }
}
</code></pre><p>&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x770B;&#x770B;&#x5982;&#x4F55;&#x57FA;&#x4E8E;Person&#x5BF9;&#x8C61;&#x6765;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x5B9E;&#x4F8B;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">newObject</span><span class="params">(func)</span> {</span>
  <span class="comment">// get an Array of all the arguments except the first one</span>
  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);

  <span class="comment">// create a new object with its prototype assigned to func.prototype</span>
  <span class="keyword">var</span> object = <span class="built_in">Object</span>.create(func.prototype);

  <span class="comment">// invoke the constructor, passing the new object as &apos;this&apos;</span>
  <span class="comment">// and the rest of the arguments as the arguments</span>
  func.apply(object, args);

  <span class="comment">// return the new object</span>
  <span class="keyword">return</span> object;
}

<span class="keyword">var</span> brendan = newObject(Person, <span class="string">&quot;Brendan&quot;</span>, <span class="string">&quot;Eich&quot;</span>);
brendan.toString() <span class="comment">// &quot;Brendan Eich&quot;</span>
</code></pre><p>&#x800C;js&#x91CC;&#x7684;new &#x64CD;&#x4F5C;&#x7B26;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x4E0A;&#x9762;&#x540C;&#x6837;&#x7684;&#x529F;&#x80FD;&#x3002;&#x8FD9;&#x548C;&#x5176;&#x4ED6;&#x7684;&#x5F88;&#x6B63;&#x7EDF;&#x7684;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x8BED;&#x8A00;&#x662F;&#x5F88;&#x76F8;&#x4F3C;&#x7684;&#x3002;</p>
<pre><code><span class="keyword">var</span> mark = <span class="keyword">new</span> Person(<span class="string">&quot;Mark&quot;</span>, <span class="string">&quot;Miller&quot;</span>);
mark.toString() <span class="comment">// &quot;Mark Miller&quot;</span>
</code></pre><p>&#x4ECE;&#x672C;&#x8D28;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;js&#x7684;Function&#x5BF9;&#x8C61;&#x770B;&#x6210;&#x662F;class&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x6784;&#x9020;&#x5668;&#x4E5F;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;&#x539F;&#x578B;&#x3002;<br>&#x6211;&#x8BF4;&#x8FC7;&#xFF0C;&#x65E9;&#x8D77;&#x7684;js&#x91CC;&#x5E76;&#x6CA1;&#x6709;Object.create&#x3002;<br>&#x6B63;&#x662F;&#x56E0;&#x4E3A;&#x5B83;&#x5F88;&#x6709;&#x5E2E;&#x52A9;&#xFF0C;&#x53EA;&#x662F;&#x4E4B;&#x524D;&#x4EBA;&#x4EEC;&#x90FD;&#x4F7F;&#x7528;new &#x64CD;&#x4F5C;&#x7B26;&#x6765;&#x5B9E;&#x73B0;&#x76F8;&#x540C;&#x7684;&#x529F;&#x80FD;&#x3002;</p>
<pre><code><span class="keyword">var</span> createObject = <span class="function"><span class="keyword">function</span> <span class="params">(o)</span> {</span>
  <span class="comment">// we only want the prototype part of the `new`</span>
  <span class="comment">// behavior, so make an empty constructor</span>
  <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span> {</span>}

  <span class="comment">// set the function&apos;s `prototype` property to the</span>
  <span class="comment">// object that we want the new object&apos;s prototype</span>
  <span class="comment">// to be.</span>
  F.prototype = o;

  <span class="comment">// use the `new` operator. We will get a new</span>
  <span class="comment">// object whose prototype is o, and we will</span>
  <span class="comment">// invoke the empty function, which does nothing.</span>
  <span class="keyword">return</span> <span class="keyword">new</span> F();
};
</code></pre><p>&#x539F;&#x6587;<br><a href="http://yehudakatz.com/2011/08/12/understanding-prototypes-in-JavaScript/" target="_blank" rel="external">http://yehudakatz.com/2011/08/12/understanding-prototypes-in-JavaScript/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>For the purposes of this post, I will be talking about JavaScript objects using syntax defined in ECMAScript 5.1.<br>The basic semantics existed in Edition 3, but they were not well exposed.</p>
]]>
    
    </summary>
    
      <category term="English" scheme="http://blog.gyf1.com/tags/english/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[offline mobile]]></title>
    <link href="http://blog.gyf1.com/2015/01/16/offline-mobile/"/>
    <id>http://blog.gyf1.com/2015/01/16/offline-mobile/</id>
    <published>2015-01-16T02:51:12.000Z</published>
    <updated>2015-01-19T01:39:02.000Z</updated>
    <content type="html"><![CDATA[<p>web&#x5E94;&#x7528;&#xFF0C;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x79BB;&#x7EBF;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x4F7F;&#x7528;<br>&#x5173;&#x952E;&#x8BCD;:<br>Application Cache<br>Pouchdb</p>
<a id="more"></a>

<p><a href="http://www.cnblogs.com/blackbird/archive/2012/06/12/2546751.html" target="_blank" rel="external">http://www.cnblogs.com/blackbird/archive/2012/06/12/2546751.html</a><br><a href="http://blog.csdn.net/fwwdn/article/details/8082433" target="_blank" rel="external">http://blog.csdn.net/fwwdn/article/details/8082433</a><br><a href="https://github.com/danielzen/ionic-pouchdb-todo" target="_blank" rel="external">https://github.com/danielzen/ionic-pouchdb-todo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>web&#x5E94;&#x7528;&#xFF0C;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x79BB;&#x7EBF;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x4F7F;&#x7528;<br>&#x5173;&#x952E;&#x8BCD;:<br>Application Cache<br>Pouchdb</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[爬虫]]></title>
    <link href="http://blog.gyf1.com/2015/01/16/%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.gyf1.com/2015/01/16/爬虫/</id>
    <published>2015-01-16T01:27:26.000Z</published>
    <updated>2015-01-16T02:41:13.000Z</updated>
    <content type="html"><![CDATA[<p>&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x722C;&#x866B;</p>
<p>&#x5173;&#x952E;&#x5B57;&#xFF1A;Spider Crawler</p>
<a id="more"></a>

<p><a href="http://www.cnblogs.com/hustskyking/p/spider-with-node.html" target="_blank" rel="external">http://www.cnblogs.com/hustskyking/p/spider-with-node.html</a><br><a href="http://www.cnblogs.com/shapherd/archive/2011/03/06/1971670.html" target="_blank" rel="external">http://www.cnblogs.com/shapherd/archive/2011/03/06/1971670.html</a><br><a href="http://www.cnblogs.com/wawlian/archive/2012/06/18/2553061.html" target="_blank" rel="external">http://www.cnblogs.com/wawlian/archive/2012/06/18/2553061.html</a></p>
<p><a href="https://github.com/sylvinus/node-crawler" target="_blank" rel="external">https://github.com/sylvinus/node-crawler</a><br><a href="https://github.com/mikeal/spider" target="_blank" rel="external">https://github.com/mikeal/spider</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x722C;&#x866B;</p>
<p>&#x5173;&#x952E;&#x5B57;&#xFF1A;Spider Crawler</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[box-sizing]]></title>
    <link href="http://blog.gyf1.com/2015/01/14/box-sizing/"/>
    <id>http://blog.gyf1.com/2015/01/14/box-sizing/</id>
    <published>2015-01-14T06:20:44.000Z</published>
    <updated>2015-01-14T06:21:56.000Z</updated>
    <content type="html"><![CDATA[<p>css &#x5C5E;&#x6027; box-sizing</p>
<p><a id="more"></a><br><a href="http://css-tricks.com/box-sizing/" target="_blank" rel="external">http://css-tricks.com/box-sizing/</a><br><a href="http://getbootstrap.com/getting-started/#third-parties" target="_blank" rel="external">http://getbootstrap.com/getting-started/#third-parties</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>css &#x5C5E;&#x6027; box-sizing</p>
<p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fixed Table Layouts]]></title>
    <link href="http://blog.gyf1.com/2015/01/14/fixed-table-layouts/"/>
    <id>http://blog.gyf1.com/2015/01/14/fixed-table-layouts/</id>
    <published>2015-01-14T03:08:45.000Z</published>
    <updated>2015-01-14T06:24:08.000Z</updated>
    <content type="html"><![CDATA[<p>CSS&#x4E2D;&#x6709;&#x4E2A;&#x5C5E;&#x6027;&#x201C;table-layout&#x201D;&#xFF0C;&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#x53EF;&#x4EE5;&#x8BA9;table&#x53EF;&#x4EE5;&#x66F4;&#x597D;&#x7684;&#x6309;&#x7167;&#x6211;&#x4EEC;&#x7684;&#x9884;&#x671F;&#x7684;&#x8BBE;&#x8BA1;&#x663E;&#x793A;&#x3002;<br>&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A;&#x8868;&#x683C;&#x91CC;&#x9762;&#x7531;&#x4E8E;&#x5185;&#x5BB9;&#x592A;&#x591A;&#xFF0C;&#x8868;&#x683C;&#x6491;&#x5F00;&#x4E86;&#x3002;<br>css&#x4EE3;&#x7801;</p>
<pre><code><span class="tag">table</span> <span class="rules">{
  <span class="rule"><span class="attribute">table-layout</span>:<span class="value"> fixed</span></span>;
<span class="rule">}</span></span>
</code></pre><p>table-layout&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x662F;auto</p>
<p><a id="more"></a><br><a href="http://css-tricks.com/fixing-tables-long-strings/" target="_blank" rel="external">http://css-tricks.com/fixing-tables-long-strings/</a><br><a href="http://www.w3school.com.cn/cssref/pr_tab_table-layout.asp" target="_blank" rel="external">http://www.w3school.com.cn/cssref/pr_tab_table-layout.asp</a><br><a href="http://wallimn.iteye.com/blog/366146" target="_blank" rel="external">http://wallimn.iteye.com/blog/366146</a><br><a href="http://stackoverflow.com/questions/4185814/fixed-table-cell-width" target="_blank" rel="external">http://stackoverflow.com/questions/4185814/fixed-table-cell-width</a><br><a href="http://zhidao.baidu.com/link?url=4uNmB1BMIPvfRvoIx9B_b1wQGOs6-aUsjzewH9fd51LVuIZwyh5Vuym6a61CGBMbXKd5aJv5Crcn8ki9cNHrRHrghjE37u-FyC8EGLn0ryS" target="_blank" rel="external">http://zhidao.baidu.com/link?url=4uNmB1BMIPvfRvoIx9B_b1wQGOs6-aUsjzewH9fd51LVuIZwyh5Vuym6a61CGBMbXKd5aJv5Crcn8ki9cNHrRHrghjE37u-FyC8EGLn0ryS</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>CSS&#x4E2D;&#x6709;&#x4E2A;&#x5C5E;&#x6027;&#x201C;table-layout&#x201D;&#xFF0C;&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#x53EF;&#x4EE5;&#x8BA9;table&#x53EF;&#x4EE5;&#x66F4;&#x597D;&#x7684;&#x6309;&#x7167;&#x6211;&#x4EEC;&#x7684;&#x9884;&#x671F;&#x7684;&#x8BBE;&#x8BA1;&#x663E;&#x793A;&#x3002;<br>&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A;&#x8868;&#x683C;&#x91CC;&#x9762;&#x7531;&#x4E8E;&#x5185;&#x5BB9;&#x592A;&#x591A;&#xFF0C;&#x8868;&#x683C;&#x6491;&#x5F00;&#x4E86;&#x3002;<br>css&#x4EE3;&#x7801;</p>
<pre><code><span class="tag">table</span> <span class="rules">{
  <span class="rule"><span class="attribute">table-layout</span>:<span class="value"> fixed</span></span>;
<span class="rule">}</span></span>
</code></pre><p>table-layout&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x662F;auto</p>
<p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.gyf1.com/tags/css/"/>
    
      <category term="Style" scheme="http://blog.gyf1.com/categories/style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[清除浮动]]></title>
    <link href="http://blog.gyf1.com/2015/01/12/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>http://blog.gyf1.com/2015/01/12/清除浮动/</id>
    <published>2015-01-12T12:28:57.000Z</published>
    <updated>2015-01-12T12:44:38.000Z</updated>
    <content type="html"><![CDATA[<p>&#x5927;&#x90E8;&#x5206;&#x90FD;&#x542C;&#x8FC7;&#x6216;&#x8005;&#x770B;&#x8FC7;&#x201C;&#x6E05;&#x9664;&#x6D6E;&#x52A8;&#x201D;&#xFF0C;&#x4F46;&#x662F;&#x4F60;&#x771F;&#x7684;&#x660E;&#x767D;&#x4E3A;&#x4EC0;&#x4E48;&#x6E05;&#x9664;&#x6D6E;&#x52A8;&#xFF0C;&#x600E;&#x4E48;&#x6E05;&#x9664;&#x6D6E;&#x52A8;&#x5417;&#xFF1F;</p>
<a id="more"></a>

<p><a href="http://css-tricks.com/the-how-and-why-of-clearing-floats/" target="_blank" rel="external">http://css-tricks.com/the-how-and-why-of-clearing-floats/</a><br><a href="http://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html" target="_blank" rel="external">http://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x5927;&#x90E8;&#x5206;&#x90FD;&#x542C;&#x8FC7;&#x6216;&#x8005;&#x770B;&#x8FC7;&#x201C;&#x6E05;&#x9664;&#x6D6E;&#x52A8;&#x201D;&#xFF0C;&#x4F46;&#x662F;&#x4F60;&#x771F;&#x7684;&#x660E;&#x767D;&#x4E3A;&#x4EC0;&#x4E48;&#x6E05;&#x9664;&#x6D6E;&#x52A8;&#xFF0C;&#x600E;&#x4E48;&#x6E05;&#x9664;&#x6D6E;&#x52A8;&#x5417;&#xFF1F;</p>
]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.gyf1.com/tags/css/"/>
    
      <category term="Style" scheme="http://blog.gyf1.com/categories/style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript 最佳实践]]></title>
    <link href="http://blog.gyf1.com/2015/01/08/javascript-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blog.gyf1.com/2015/01/08/javascript-最佳实践/</id>
    <published>2015-01-08T07:51:31.000Z</published>
    <updated>2015-01-09T08:36:43.000Z</updated>
    <content type="html"><![CDATA[<p>&#x7AD9;&#x5728;&#x5DE8;&#x4EBA;&#x7684;&#x80A9;&#x8180;&#xFF0C;&#x80FD;&#x8DF3;&#x7684;&#x66F4;&#x9AD8;&#x3002;<br>&#x7ECF;&#x9A8C;&#x4E0D;&#x5B8C;&#x5168;&#x7B49;&#x4E8E;&#x5DE5;&#x4F5C;&#x65F6;&#x95F4;<br>&#x672C;&#x7BC7;&#x4E3B;&#x8981;&#x6574;&#x7406;&#x4E00;&#x4E9B;&#x524D;&#x4EBA;&#x7684;&#x6700;&#x4F73;&#x5B9E;&#x8DF5;<br>&#x5BF9;&#x4E8E;&#x65B0;&#x4EBA;&#x53EF;&#x80FD;&#x4E00;&#x4E0B;&#x5B50;&#x4E0D;&#x80FD;&#x5B8C;&#x5168;&#x7528;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;jslint&#x6216;&#x8005;jshint&#x4F5C;&#x4E3A;&#x76D1;&#x7763;&#x3002;<br><a id="more"></a></p>
<h3 id="1_&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x7ED9;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x8D4B;&#x503C;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x4F7F;&#x7528;var&#x5173;&#x952E;&#x5B57;"><em>1</em> &#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x7ED9;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x8D4B;&#x503C;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x4F7F;&#x7528;var&#x5173;&#x952E;&#x5B57;</h3>
<p>&#x7ED9;&#x4E00;&#x4E2A;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x53D8;&#x91CF;&#x8D4B;&#x503C;&#x4F1A;&#x5BFC;&#x81F4;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x3002;&#x8981;&#x907F;&#x514D;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x3002;</p>
<h3 id="2_&#x4F7F;&#x7528;===&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#xFF1D;&#xFF1D;"><em>2</em> &#x4F7F;&#x7528;===&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#xFF1D;&#xFF1D;</h3>
<p>==&#xFF08;&#x6216;!=&#xFF09;&#x64CD;&#x4F5C;&#x7B26;&#x5728;&#x9700;&#x8981;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x81EA;&#x52A8;&#x6267;&#x884C; <em>&#x7C7B;&#x578B;&#x8F6C;&#x6362;</em> ;<br>===&#xFF08;&#x6216;!==&#xFF09;&#x64CD;&#x4F5C;&#x4E0D;&#x4F1A;&#x6267;&#x884C;&#x4EFB;&#x4F55;&#x8F6C;&#x6362;&#x3002;&#x5B83;&#x5C06;&#x6BD4;&#x8F83;&#x503C;&#x548C;&#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x4E14;&#x5728;&#x901F;&#x5EA6;&#x4E0A;&#x4E5F;&#x88AB;&#x8BA4;&#x4E3A;&#x4F18;&#x4E8E;==&#x3002;</p>
<pre><code>[<span class="number">10</span>] === <span class="number">10</span>    // <span class="keyword">is</span> <span class="literal">false</span>
[<span class="number">10</span>]  == <span class="number">10</span>    // <span class="keyword">is</span> <span class="literal">true</span>
<span class="string">&apos;10&apos;</span> == <span class="number">10</span>     // <span class="keyword">is</span> <span class="literal">true</span>
<span class="string">&apos;10&apos;</span> === <span class="number">10</span>    // <span class="keyword">is</span> <span class="literal">false</span>
 []   == <span class="number">0</span>     // <span class="keyword">is</span> <span class="literal">true</span>
 [] ===  <span class="number">0</span>     // <span class="keyword">is</span> <span class="literal">false</span>
 <span class="string">&apos;&apos;</span> == <span class="literal">false</span>   <span class="regexp">//</span> <span class="keyword">is</span> <span class="literal">true</span> but <span class="literal">true</span> == <span class="string">&quot;a&quot;</span> <span class="keyword">is</span> <span class="literal">false</span>
 <span class="string">&apos;&apos;</span> ===   <span class="literal">false</span> <span class="regexp">//</span> <span class="keyword">is</span> <span class="literal">false</span>
</code></pre><h3 id="3_&#x4F7F;&#x7528;&#x95ED;&#x5305;&#x5B9E;&#x73B0;&#x79C1;&#x6709;&#x53D8;&#x91CF;"><em>3</em> &#x4F7F;&#x7528;&#x95ED;&#x5305;&#x5B9E;&#x73B0;&#x79C1;&#x6709;&#x53D8;&#x91CF;</h3>
<pre><code>a = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> privatefunction = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&apos;hello&apos;</span>);
    }

    <span class="keyword">return</span> {
        publicfunction : <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
            privatefunction();
        }
    }
})();
</code></pre><h3 id="4_&#x5728;&#x8BED;&#x53E5;&#x7ED3;&#x5C3E;&#x5904;&#x4F7F;&#x7528;&#x5206;&#x53F7;"><em>4</em> &#x5728;&#x8BED;&#x53E5;&#x7ED3;&#x5C3E;&#x5904;&#x4F7F;&#x7528;&#x5206;&#x53F7;</h3>
<p>&#x5728;&#x8BED;&#x53E5;&#x7ED3;&#x5C3E;&#x5904;&#x4F7F;&#x7528;&#x5206;&#x53F7;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x5B9E;&#x8DF5;&#x3002;&#x5982;&#x679C;&#x4F60;&#x5FD8;&#x8BB0;&#x5199;&#x4E86;&#x4F60;&#x4E5F;&#x4E0D;&#x4F1A;&#x88AB;&#x8B66;&#x544A;&#xFF0C;&#x56E0;&#x4E3A;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;JavaScript&#x89E3;&#x91CA;&#x5668;&#x4F1A;&#x5E2E;&#x4F60;&#x52A0;&#x4E0A;&#x5206;&#x53F7;&#x3002;</p>
<h3 id="5_&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;"><em>5</em> &#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;</h3>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(firstName, lastName)</span>{</span>
    <span class="keyword">this</span>.firstName =  firstName;
    <span class="keyword">this</span>.lastName = lastName;
}

<span class="keyword">var</span> Saad = <span class="keyword">new</span> Person(<span class="string">&quot;Saad&quot;</span>, <span class="string">&quot;Mousliki&quot;</span>);
</code></pre><h3 id="6_&#x5C0F;&#x5FC3;&#x4F7F;&#x7528;typeof&#x3001;instanceof&#x548C;constructor"><em>6</em> &#x5C0F;&#x5FC3;&#x4F7F;&#x7528;typeof&#x3001;instanceof&#x548C;constructor</h3>
<pre><code><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];
<span class="keyword">typeof</span> arr;   <span class="comment">// return &quot;object&quot;</span>
arr  <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span>
arr.constructor();  <span class="comment">//[]</span>
</code></pre><h3 id="7_&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x81EA;&#x8C03;&#x7528;&#x51FD;&#x6570;&#xFF08;Self-calling_Funtion&#xFF09;"><em>7</em> &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x81EA;&#x8C03;&#x7528;&#x51FD;&#x6570;&#xFF08;Self-calling Funtion&#xFF09;</h3>
<p>&#x8FD9;&#x4E2A;&#x7ECF;&#x5E38;&#x88AB;&#x79F0;&#x4E3A;&#x81EA;&#x8C03;&#x7528;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF08;Self-Invoked Anonymous Function&#xFF09;&#x6216;&#x8005;&#x5373;&#x65F6;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;IIFE-Immediately Invoked Function Expression)&#x3002;<br>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5728;&#x521B;&#x5EFA;&#x540E;&#x7ACB;&#x5373;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x901A;&#x5E38;&#x5982;&#x4E0B;&#xFF1A;</p>
<pre><code><span class="list">(<span class="title">function</span><span class="list">()</span>{
    // some private code that will be executed automatically
})</span><span class="list">()</span><span class="comment">;</span>
<span class="list">(<span class="title">function</span><span class="list">(<span class="title">a</span>,b)</span>{
    var result = a+b<span class="comment">;</span>
    return result<span class="comment">;</span>
})</span><span class="list">(<span class="number">10</span>,<span class="number">20</span>)</span>
</code></pre><h3 id="8_&#x4ECE;&#x6570;&#x7EC4;&#x4E2D;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x9879;"><em>8</em> &#x4ECE;&#x6570;&#x7EC4;&#x4E2D;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x9879;</h3>
<pre><code>var items = [<span class="number">12</span>, <span class="number">548</span> , &apos;<span class="literal">a</span>&apos; , <span class="number">2</span> , <span class="number">5478</span> , &apos;foo&apos; , <span class="number">8852</span>, , &apos;Doe&apos; , <span class="number">2145</span> , <span class="number">119</span>]<span class="comment">;</span>
var  randomItem = items[Math.floor(Math.random() * items.length)]<span class="comment">;</span>
</code></pre><h3 id="9_&#x5728;&#x7279;&#x5B9A;&#x8303;&#x56F4;&#x5185;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6570;"><em>9</em> &#x5728;&#x7279;&#x5B9A;&#x8303;&#x56F4;&#x5185;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6570;</h3>
<p>&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x7247;&#x6BB5;&#x5728;&#x4F60;&#x60F3;&#x8981;&#x751F;&#x6210;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#x975E;&#x5E38;&#x6709;&#x7528;&#xFF0C;&#x6BD4;&#x5982;&#x4E00;&#x4E2A;&#x5728;&#x6700;&#x5C0F;&#x6700;&#x5927;&#x503C;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x85AA;&#x6C34;&#x503C;&#x3002;</p>
<pre><code>var x = Math.<span class="built_in">floor</span>(Math.<span class="built_in">random</span>() * (<span class="built_in">max</span> - <span class="built_in">min</span> + <span class="number">1</span>)) + <span class="built_in">min</span>;
</code></pre><h3 id="10_&#x5728;0&#x548C;&#x8BBE;&#x5B9A;&#x7684;&#x6700;&#x5927;&#x503C;&#x4E4B;&#x95F4;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x6570;&#x7EC4;"><em>10</em> &#x5728;0&#x548C;&#x8BBE;&#x5B9A;&#x7684;&#x6700;&#x5927;&#x503C;&#x4E4B;&#x95F4;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x6570;&#x7EC4;</h3>
<pre><code>var numbersArray = [] , max = <span class="number">100</span>;

<span class="keyword">for</span>( var i=<span class="number">1</span>; numbersArray.push(i++) &lt; max;);  // numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">...</span> <span class="number">100</span>]
</code></pre><h3 id="11_&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x7684;&#x6570;&#x5B57;&#x5B57;&#x6BCD;&#x5B57;&#x7B26;&#x4E32;"><em>11</em> &#x751F;&#x6210;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x7684;&#x6570;&#x5B57;&#x5B57;&#x6BCD;&#x5B57;&#x7B26;&#x4E32;</h3>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">generateRandomAlphaNum</span><span class="params">(len)</span> {</span>
    <span class="keyword">var</span> rdmstring = <span class="string">&quot;&quot;</span>;
    <span class="keyword">for</span>( ; rdmString.length &amp;lt; len; rdmString  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));
    <span class="keyword">return</span>  rdmString.substr(<span class="number">0</span>, len);
}
</code></pre><p>&#x7279;&#x610F;&#x67E5;&#x4E86;&#x4E00;&#x4E0B;Math.random()&#x751F;&#x6210;0&#x5230;1&#x4E4B;&#x95F4;&#x7684;&#x968F;&#x673A;&#x6570;&#xFF0C;number.toString(36)&#x662F;&#x5C06;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x8F6C;&#x6362;&#x6210;36&#x8FDB;&#x5236;&#xFF08;0-9&#xFF0C;a-z&#xFF09;&#xFF0C;&#x6700;&#x540E;substr&#x53BB;&#x6389;&#x524D;&#x9762;&#x7684;&#x201C;0.&#x201D;&#x5B57;&#x7B26;&#x4E32;</p>
<h3 id="12_&#x6253;&#x4E71;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x6570;&#x7EC4;"><em>12</em> &#x6253;&#x4E71;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x6570;&#x7EC4;</h3>
<pre><code><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>];
numbers = numbers.sort(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>});
<span class="comment">/* the array numbers will be equal for example to [120, 5, 228, -215, 400, 458, -85411, 122205]  */</span>
</code></pre><h3 id="13_String&#x7684;trim&#x51FD;&#x6570;"><em>13</em> String&#x7684;trim&#x51FD;&#x6570;</h3>
<p>&#x5728;Java&#x3001;C#&#x3001;PHP&#x548C;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x4E2D;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x7ECF;&#x5178;&#x7684; trim &#x51FD;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x53BB;&#x9664;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x7A7A;&#x683C;&#x7B26;&#xFF0C;&#x800C;&#x5728;JavaScript&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;String&#x5BF9;&#x8C61;&#x4E0A;&#x52A0;&#x4E0A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;</p>
<pre><code><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span><span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&quot;&quot;</span>);};
</code></pre><p>&#x53BB;&#x6389;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x524D;&#x540E;&#x7A7A;&#x683C;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x5B57;&#x7B26;&#x4E32;&#x5185;&#x90E8;&#x7A7A;&#x683C;</p>
<h3 id="14_&#x9644;&#x52A0;&#xFF08;append&#xFF09;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E0A;"><em>14</em> &#x9644;&#x52A0;&#xFF08;append&#xFF09;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E0A;</h3>
<pre><code>var array1 = [<span class="number">12</span> , <span class="string">&quot;foo&quot;</span> , {<span class="property">name</span>: <span class="string">&quot;Joe&quot;</span>} , -<span class="number">2458</span>];

var array2 = [<span class="string">&quot;Doe&quot;</span> , <span class="number">555</span> , <span class="number">100</span>];
Array.prototype.push.apply(array1, array2);
/* array1 will be <span class="keyword">equal</span> <span class="keyword">to</span>  [<span class="number">12</span> , <span class="string">&quot;foo&quot;</span> , {<span class="property">name</span> <span class="string">&quot;Joe&quot;</span>} , -<span class="number">2458</span> , <span class="string">&quot;Doe&quot;</span> , <span class="number">555</span> , <span class="number">100</span>] */
</code></pre><p>&#x5176;&#x5B9E;concat&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x8FDE;&#x63A5;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6570;&#x7EC4;&#x3002;&#x8FD9;&#x91CC;&#x662F;&#x76F4;&#x63A5;&#x6539;&#x53D8;array1</p>
<h3 id="15_&#x5C06;arguments&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;"><em>15</em> &#x5C06;arguments&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;</h3>
<pre><code><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);
</code></pre><p>arguments&#x5BF9;&#x8C61;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x6570;&#x7EC4;&#x5BF9;&#x8C61;&#xFF0C;&#x4F46;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x771F;&#x6B63;&#x7684;&#x6570;&#x7EC4;</p>
<h3 id="16_&#x9A8C;&#x8BC1;&#x53C2;&#x6570;&#x662F;&#x5426;&#x662F;&#x6570;&#x5B57;&#xFF08;number&#xFF09;"><em>16</em> &#x9A8C;&#x8BC1;&#x53C2;&#x6570;&#x662F;&#x5426;&#x662F;&#x6570;&#x5B57;&#xFF08;number&#xFF09;</h3>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span><span class="params">(n)</span>{</span>
    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n);
}
</code></pre><h3 id="17_&#x9A8C;&#x8BC1;&#x53C2;&#x6570;&#x662F;&#x5426;&#x662F;&#x6570;&#x7EC4;"><em>17</em> &#x9A8C;&#x8BC1;&#x53C2;&#x6570;&#x662F;&#x5426;&#x662F;&#x6570;&#x7EC4;</h3>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">isArray</span><span class="params">(obj)</span>{</span>
    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">&apos;[object Array]&apos;</span> ;
}
</code></pre><p>&#x6CE8;&#x610F;&#xFF1A;&#x5982;&#x679C;toString()&#x65B9;&#x6CD5;&#x88AB;&#x91CD;&#x5199;&#x4E86;&#xFF08;overridden&#xFF09;&#xFF0C;&#x4F60;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x6280;&#x5DE7;&#x5C31;&#x4E0D;&#x80FD;&#x5F97;&#x5230;&#x60F3;&#x8981;&#x7684;&#x7ED3;&#x679C;&#x4E86;&#x3002;&#x6216;&#x8005;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#xFF1A;</p>
<pre><code><span class="built_in">Array</span>.isArray(obj); <span class="comment">// &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;array&#x7684;&#x65B9;&#x6CD5;</span>
</code></pre><p>&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x5728;&#x4F7F;&#x7528;&#x591A;&#x91CD;frames&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F60;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; instanceof &#x65B9;&#x6CD5;&#x3002;&#x4F46;&#x5982;&#x679C;&#x4F60;&#x6709;&#x591A;&#x4E2A;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x4F60;&#x5C31;&#x4F1A;&#x5F97;&#x5230;&#x9519;&#x8BEF;&#x7684;&#x7ED3;&#x679C;&#x3002;</p>
<pre><code><span class="reserved">var</span> myFrame = <span class="built_in">document</span>.createElement(<span class="string">&apos;iframe&apos;</span>);
<span class="built_in">document</span>.body.appendChild(myFrame);

<span class="reserved">var</span> myArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length-<span class="number">1</span>].Array;
<span class="reserved">var</span> arr = <span class="keyword">new</span> myArray(a,b,<span class="number">10</span>); <span class="regexp">//</span> [a,b,<span class="number">10</span>]

<span class="regexp">//</span> <span class="keyword">instanceof</span> will <span class="keyword">not</span> work correctly, myArray loses his constructor
<span class="regexp">//</span> constructor <span class="keyword">is</span> <span class="keyword">not</span> shared between frames
arr <span class="keyword">instanceof</span> Array; <span class="regexp">//</span> <span class="literal">false</span>
</code></pre><h3 id="18_&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x503C;&#x6216;&#x6700;&#x5C0F;&#x503C;"><em>18</em> &#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x503C;&#x6216;&#x6700;&#x5C0F;&#x503C;</h3>
<pre><code><span class="keyword">var</span>  numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>];
<span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers);
<span class="keyword">var</span> minInNumbers = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, numbers);
</code></pre><p>&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E86;Function.prototype.apply&#x65B9;&#x6CD5;&#x4F20;&#x9012;&#x53C2;&#x6570;&#x7684;&#x6280;&#x5DE7;</p>
<h3 id="19_&#x6E05;&#x7A7A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;"><em>19</em> &#x6E05;&#x7A7A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;</h3>
<pre><code><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> ];
myArray.length = <span class="number">0</span>; <span class="comment">// myArray will be equal to [].</span>
</code></pre><h3 id="20_&#x4E0D;&#x8981;&#x4F7F;&#x7528;_delete_&#x6765;&#x5220;&#x9664;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x9879;&#x3002;"><em>20</em> &#x4E0D;&#x8981;&#x4F7F;&#x7528; delete &#x6765;&#x5220;&#x9664;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x9879;&#x3002;</h3>
<p>&#x4F7F;&#x7528; splice &#x800C;&#x4E0D;&#x8981;&#x4F7F;&#x7528; delete &#x6765;&#x5220;&#x9664;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x67D0;&#x4E2A;&#x9879;&#x3002;<br>&#x4F7F;&#x7528; delete &#x53EA;&#x662F;&#x7528; undefined &#x6765;&#x66FF;&#x6362;&#x6389;&#x539F;&#x6709;&#x7684;&#x9879;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x771F;&#x6B63;&#x7684;&#x4ECE;&#x6570;&#x7EC4;&#x4E2D;&#x5220;&#x9664;&#x3002;</p>
<p>&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;</p>
<pre><code>var items = [<span class="number">12</span>, <span class="number">548</span> ,&apos;<span class="literal">a</span>&apos; , <span class="number">2</span> , <span class="number">5478</span> , &apos;foo&apos; , <span class="number">8852</span>, , &apos;Doe&apos; ,<span class="number">2154</span> , <span class="number">119</span> ]<span class="comment">;</span>
items.length<span class="comment">; // return 11</span>
delete items[<span class="number">3</span>]<span class="comment">; // return true</span>
items.length<span class="comment">; // return 11</span>
/* items will be equal to [<span class="number">12</span>, <span class="number">548</span>, <span class="string">&quot;a&quot;</span>, undefined &#xD7; <span class="number">1</span>, <span class="number">5478</span>, <span class="string">&quot;foo&quot;</span>, <span class="number">8852</span>, undefined &#xD7; <span class="number">1</span>, <span class="string">&quot;Doe&quot;</span>, <span class="number">2154</span>,       <span class="number">119</span>]   */
</code></pre><p>&#x800C;&#x4F7F;&#x7528;&#xFF1A;</p>
<pre><code>var items = [<span class="number">12</span>, <span class="number">548</span> ,&apos;<span class="literal">a</span>&apos; , <span class="number">2</span> , <span class="number">5478</span> , &apos;foo&apos; , <span class="number">8852</span>, , &apos;Doe&apos; ,<span class="number">2154</span> , <span class="number">119</span> ]<span class="comment">;</span>
items.length<span class="comment">; // return 11</span>
items.splice(<span class="number">3</span>,<span class="number">1</span>) <span class="comment">;</span>
items.length<span class="comment">; // return 10</span>
/* items will be equal to [<span class="number">12</span>, <span class="number">548</span>, <span class="string">&quot;a&quot;</span>, <span class="number">5478</span>, <span class="string">&quot;foo&quot;</span>, <span class="number">8852</span>, undefined &#xD7; <span class="number">1</span>, <span class="string">&quot;Doe&quot;</span>, <span class="number">2154</span>,       <span class="number">119</span>]   */
</code></pre><p>delete &#x65B9;&#x6CD5;&#x5E94;&#x8BE5;&#x88AB;&#x7528;&#x6765;&#x5220;&#x9664;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E2A;&#x5C5E;&#x6027;&#x3002;</p>
<h3 id="21_&#x4F7F;&#x7528;_length_&#x6765;&#x622A;&#x77ED;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;"><em>21</em> &#x4F7F;&#x7528; length &#x6765;&#x622A;&#x77ED;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;</h3>
<p>&#x8DDF;&#x4E0A;&#x9762;&#x7684;&#x6E05;&#x7A7A;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528; length &#x5C5E;&#x6027;&#x6765;&#x622A;&#x77ED;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x3002;</p>
<pre><code><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> , <span class="number">124</span> , <span class="number">98</span> , <span class="number">10</span> ];
myArray.length = <span class="number">4</span>; <span class="comment">// myArray will be equal to [12 , 222 , 1000 , 124].</span>
</code></pre><p>&#x6B64;&#x5916;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x5C06;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x7684; length &#x8BBE;&#x7F6E;&#x6210;&#x4E00;&#x4E2A;&#x6BD4;&#x73B0;&#x5728;&#x5927;&#x7684;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6;&#x5C31;&#x4F1A;&#x88AB;&#x6539;&#x53D8;&#xFF0C;&#x4F1A;&#x589E;&#x52A0;&#x65B0;&#x7684; undefined &#x7684;&#x9879;&#x8865;&#x4E0A;&#x3002; &#x6570;&#x7EC4;&#x7684; length &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x53EA;&#x8BFB;&#x5C5E;&#x6027;&#x3002;</p>
<pre><code>myArray.<span class="built_in">length</span> = <span class="number">10</span>; <span class="comment">// the new array length is 10</span>
myArray[myArray.<span class="built_in">length</span> - <span class="number">1</span>] ; <span class="comment">// undefined</span>
</code></pre><h3 id="22_&#x4F7F;&#x7528;&#x903B;&#x8F91;_AND/OR_&#x505A;&#x6761;&#x4EF6;&#x5224;&#x65AD;"><em>22</em> &#x4F7F;&#x7528;&#x903B;&#x8F91; AND/OR &#x505A;&#x6761;&#x4EF6;&#x5224;&#x65AD;</h3>
<pre><code>var foo = <span class="number">10</span>;
foo == <span class="number">10</span> &amp;&amp; <span class="keyword">do</span>Something(); // &#x7B49;&#x4EF7;&#x4E8E; <span class="keyword">if</span> (foo == <span class="number">10</span>) <span class="keyword">do</span>Something();
foo == <span class="number">5</span> || <span class="keyword">do</span>Something(); // &#x7B49;&#x4EF7;&#x4E8E; <span class="keyword">if</span> (foo != <span class="number">5</span>) <span class="keyword">do</span>Something();
</code></pre><p>&#x903B;&#x8F91; &#x6216; &#x8FD8;&#x53EF;&#x4EE5;&#x88AB;&#x4F7F;&#x7528;&#x6765;&#x4E3A;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x9ED8;&#x8BA4;&#x503C;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(arg1)</span>{</span>
    Arg1 = arg1 || <span class="number">10</span>; <span class="comment">// &#x5982;&#x679C;arg1&#x6CA1;&#x6709;&#x88AB;&#x8BBE;&#x7F6E;&#x7684;&#x8BDD;&#xFF0C;Arg1&#x5C06;&#x88AB;&#x9ED8;&#x8BA4;&#x8BBE;&#x6210;10</span>
}
</code></pre><h3 id="23_&#x4F7F;&#x7528;_map()_&#x65B9;&#x6CD5;&#x6765;&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x91CC;&#x7684;&#x9879;"><em>23</em> &#x4F7F;&#x7528; map() &#x65B9;&#x6CD5;&#x6765;&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x91CC;&#x7684;&#x9879;</h3>
<pre><code><span class="keyword">var</span> squares = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span> <span class="params">(val)</span> {</span>
    <span class="keyword">return</span> val * val;
});
<span class="comment">// squares will be equal to [1, 4, 9, 16]</span>
</code></pre><h3 id="24_&#x56DB;&#x820D;&#x4E94;&#x5165;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4FDD;&#x7559;N&#x4F4D;&#x5C0F;&#x6570;"><em>24</em> &#x56DB;&#x820D;&#x4E94;&#x5165;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4FDD;&#x7559;N&#x4F4D;&#x5C0F;&#x6570;</h3>
<p>var num =2.443242342;<br>num = num.toFixed(4);  // num will be equal to 2.4432</p>
<h3 id="25_&#x6D6E;&#x70B9;&#x6570;&#x95EE;&#x9898;"><em>25</em> &#x6D6E;&#x70B9;&#x6570;&#x95EE;&#x9898;</h3>
<pre><code><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> // <span class="keyword">is</span> false
<span class="number">9007199254740992</span> + <span class="number">1</span> // <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="number">9007199254740992</span>
<span class="number">9007199254740992</span> + <span class="number">2</span> // <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="number">9007199254740994</span>
</code></pre><p>&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x8FD9;&#x6837;&#xFF1F; 0.1+0.2&#x7B49;&#x4E8E;0.30000000000000004&#x3002;<br>&#x4F60;&#x8981;&#x77E5;&#x9053;&#xFF0C;&#x6240;&#x6709;&#x7684;JavaScript&#x6570;&#x5B57;&#x5728;&#x5185;&#x90E8;&#x90FD;&#x662F;&#x4EE5;64&#x4F4D;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x7684;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;&#x7B26;&#x5408;IEEE 754&#x6807;&#x51C6;&#x3002;<br>&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; toFixed() &#x548C; toPrecision() &#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;</p>
<h3 id="26_&#x4F7F;&#x7528;for-in&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5185;&#x90E8;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;&#x6CE8;&#x610F;&#x68C0;&#x67E5;&#x5C5E;&#x6027;"><em>26</em> &#x4F7F;&#x7528;for-in&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5185;&#x90E8;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;&#x6CE8;&#x610F;&#x68C0;&#x67E5;&#x5C5E;&#x6027;</h3>
<p>&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x7247;&#x6BB5;&#x80FD;&#x591F;&#x907F;&#x514D;&#x5728;&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x7684;&#x65F6;&#x5019;&#x8BBF;&#x95EE;&#x539F;&#x578B;&#x7684;&#x5C5E;&#x6027;</p>
<pre><code><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> <span class="keyword">object</span>) {
    <span class="keyword">if</span> (<span class="keyword">object</span>.hasOwnProperty(name)) {
        <span class="comment">// do something with name</span>
    }
}
</code></pre><h3 id="27_&#x9017;&#x53F7;&#x64CD;&#x4F5C;&#x7B26;"><em>27</em> &#x9017;&#x53F7;&#x64CD;&#x4F5C;&#x7B26;</h3>
<pre><code><span class="built_in">var</span> a <span class="subst">=</span> <span class="number">0</span>;
<span class="built_in">var</span> b <span class="subst">=</span> ( a<span class="subst">++</span>, <span class="number">99</span> );
console<span class="built_in">.</span><span class="keyword">log</span>(a);  <span class="comment">// a will be equal to 1</span>
console<span class="built_in">.</span><span class="keyword">log</span>(b);  <span class="comment">// b is equal to 99</span>
</code></pre><h3 id="28_&#x7F13;&#x5B58;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x548C;&#x67E5;&#x8BE2;&#xFF08;calculation_or_querying&#xFF09;&#x7684;&#x53D8;&#x91CF;"><em>28</em> &#x7F13;&#x5B58;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x548C;&#x67E5;&#x8BE2;&#xFF08;calculation or querying&#xFF09;&#x7684;&#x53D8;&#x91CF;</h3>
<p>&#x5BF9;&#x4E8E;jQuery&#x9009;&#x62E9;&#x5668;&#xFF0C;&#x6211;&#x4EEC;&#x6700;&#x597D;&#x7F13;&#x5B58;&#x8FD9;&#x4E9B;DOM&#x5143;&#x7D20;&#x3002;</p>
<pre><code><span class="reserved">var</span> navright = <span class="built_in">document</span>.querySelector(<span class="string">&apos;#right&apos;</span>);
<span class="reserved">var</span> navleft = <span class="built_in">document</span>.querySelector(<span class="string">&apos;#left&apos;</span>);
<span class="reserved">var</span> navup = <span class="built_in">document</span>.querySelector(<span class="string">&apos;#up&apos;</span>);
<span class="reserved">var</span> navdown = <span class="built_in">document</span>.querySelector(<span class="string">&apos;#down&apos;</span>);
</code></pre><h3 id="29_&#x5728;&#x8C03;&#x7528;_isFinite()&#x4E4B;&#x524D;&#x9A8C;&#x8BC1;&#x53C2;&#x6570;"><em>29</em> &#x5728;&#x8C03;&#x7528; isFinite()&#x4E4B;&#x524D;&#x9A8C;&#x8BC1;&#x53C2;&#x6570;</h3>
<pre><code><span class="built_in">isFinite</span>(<span class="number">0</span>/<span class="number">0</span>) ; <span class="comment">// false</span>
<span class="built_in">isFinite</span>(<span class="string">&quot;foo&quot;</span>); <span class="comment">// false</span>
<span class="built_in">isFinite</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">// true</span>
<span class="built_in">isFinite</span>(<span class="number">10</span>);   <span class="comment">// true</span>
<span class="built_in">isFinite</span>(undifined);  <span class="comment">// false</span>
<span class="built_in">isFinite</span>();   <span class="comment">// false</span>
<span class="built_in">isFinite</span>(<span class="literal">null</span>);  <span class="comment">// true  !!!</span>
</code></pre><h3 id="30_&#x907F;&#x514D;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#xFF08;negative_indexes&#xFF09;"><em>30</em> &#x907F;&#x514D;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#xFF08;negative indexes&#xFF09;</h3>
<pre><code><span class="keyword">var</span> numbersArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];
<span class="keyword">var</span> <span class="keyword">from</span> = numbersArray.indexOf(<span class="string">&quot;foo&quot;</span>) ;  <span class="comment">// from is equal to -1</span>
numbersArray.splice(<span class="keyword">from</span>,<span class="number">2</span>);    <span class="comment">// will return [5]</span>
</code></pre><p>&#x786E;&#x4FDD;&#x8C03;&#x7528; indexOf &#x65F6;&#x7684;&#x53C2;&#x6570;&#x4E0D;&#x662F;&#x8D1F;&#x6570;&#x3002;</p>
<h3 id="31_&#x57FA;&#x4E8E;JSON&#x7684;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF08;serialization_and_deserialization&#xFF09;"><em>31</em> &#x57FA;&#x4E8E;JSON&#x7684;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF08;serialization and deserialization&#xFF09;</h3>
<pre><code>var person = {<span class="property">name</span> :&apos;Saad&apos;, age : <span class="number">26</span>, department : {ID : <span class="number">15</span>, <span class="property">name</span> : <span class="string">&quot;R&amp;D&quot;</span>} };
var stringFromPerson = JSON.stringify(person);
/* stringFromPerson <span class="keyword">is</span> <span class="keyword">equal</span> <span class="keyword">to</span> <span class="string">&quot;{&quot;</span><span class="property">name</span><span class="string">&quot;:&quot;</span>Saad<span class="string">&quot;,&quot;</span>age<span class="string">&quot;:26,&quot;</span>department<span class="string">&quot;:{&quot;</span>ID<span class="string">&quot;:15,&quot;</span><span class="property">name</span><span class="string">&quot;:&quot;</span>R&amp;D<span class="string">&quot;}}&quot;</span>   */
var personFromString = JSON.parse(stringFromPerson);
/* personFromString <span class="keyword">is</span> <span class="keyword">equal</span> <span class="keyword">to</span> person object  */
</code></pre><h3 id="32_&#x907F;&#x514D;&#x4F7F;&#x7528;_eval()_&#x548C;_Function_&#x6784;&#x9020;&#x51FD;&#x6570;"><em>32</em> &#x907F;&#x514D;&#x4F7F;&#x7528; eval() &#x548C; Function &#x6784;&#x9020;&#x51FD;&#x6570;</h3>
<p>&#x4F7F;&#x7528; eval &#x548C; Function &#x6784;&#x9020;&#x51FD;&#x6570;&#x662F;&#x975E;&#x5E38;&#x6602;&#x8D35;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF;&#x6B21;&#x4ED6;&#x4EEC;&#x90FD;&#x4F1A;&#x8C03;&#x7528;&#x811A;&#x672C;&#x5F15;&#x64CE;&#x5C06;&#x6E90;&#x4EE3;&#x7801;&#x8F6C;&#x6362;&#x6210;&#x53EF;&#x6267;&#x884C;&#x4EE3;&#x7801;&#x3002;</p>
<pre><code><span class="keyword">var</span> func1 = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(functionCode)</span>;</span>
<span class="keyword">var</span> func2 = <span class="keyword">eval</span>(functionCode);
</code></pre><h3 id="33_&#x907F;&#x514D;&#x4F7F;&#x7528;_with()"><em>33</em> &#x907F;&#x514D;&#x4F7F;&#x7528; with()</h3>
<p>&#x4F7F;&#x7528; with() &#x4F1A;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x540C;&#x540D;&#x7684;&#x53D8;&#x91CF;&#x4F1A;&#x88AB;&#x8986;&#x76D6;&#x503C;&#x800C;&#x5F15;&#x8D77;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x9EBB;&#x70E6;&#x3002;</p>
<h3 id="34_&#x907F;&#x514D;&#x4F7F;&#x7528;_for-in_&#x6765;&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;"><em>34</em> &#x907F;&#x514D;&#x4F7F;&#x7528; for-in &#x6765;&#x904D;&#x5386;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;</h3>
<p>&#x907F;&#x514D;&#x4F7F;&#x7528;&#x8FD9;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#xFF1A;</p>
<pre><code><span class="built_in">var</span> <span class="keyword">sum</span> <span class="subst">=</span> <span class="number">0</span>;
for (<span class="built_in">var</span> i <span class="keyword">in</span> arrayNumbers) {
    <span class="keyword">sum</span> <span class="subst">+=</span> arrayNumbers<span class="preprocessor">[</span>i<span class="preprocessor">]</span><span class="markup">;
}</span>
</code></pre><p>&#x66F4;&#x597D;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#xFF1A;</p>
<pre><code>var sum = <span class="number">0</span>;
<span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>, len = <span class="transposed_variable">arrayNumbers.</span><span class="built_in">length</span>; <span class="built_in">i</span> &lt; len; <span class="built_in">i</span>++) <span class="cell">{
    sum += arrayNumbers[i];
}</span>
</code></pre><p>&#x9644;&#x52A0;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF0C;i &#x548C; len &#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x53D6;&#x503C;&#x90FD;&#x53EA;&#x6267;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#xFF0C;&#x4F1A;&#x6BD4;&#x4E0B;&#x9762;&#x7684;&#x65B9;&#x5F0F;&#x66F4;&#x9AD8;&#x6548;&#xFF1A;</p>
<pre><code><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; <span class="transposed_variable">arrayNumbers.</span><span class="built_in">length</span>; <span class="built_in">i</span>++)
</code></pre><p>&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#x56E0;&#x4E3A;arrayNumbers.length&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x65F6;&#x5019;&#x90FD;&#x4F1A;&#x88AB;&#x8BA1;&#x7B97;&#x3002;</p>
<h3 id="35_&#x5728;&#x8C03;&#x7528;_setTimeout()_&#x548C;_setInterval()_&#x7684;&#x65F6;&#x5019;&#x4F20;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x3002;"><em>35</em> &#x5728;&#x8C03;&#x7528; setTimeout() &#x548C; setInterval() &#x7684;&#x65F6;&#x5019;&#x4F20;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x3002;</h3>
<p>&#x5982;&#x679C;&#x4F60;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x4F20;&#x9012;&#x7ED9; setTimeout() &#x6216;&#x8005; setInterval()&#xFF0C;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5C06;&#x88AB;&#x5982;&#x4F7F;&#x7528; eval &#x4E00;&#x6837;&#x88AB;&#x89E3;&#x6790;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x975E;&#x5E38;&#x8017;&#x65F6;&#x7684;&#x3002;<br>&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#xFF1A;</p>
<pre><code><span class="keyword">set</span>Interval(<span class="string">&apos;doSomethingPeriodically()&apos;</span>, <span class="number">1000</span>);
<span class="keyword">set</span>TimeOut(<span class="string">&apos;doSomethingAfterFiveSeconds()&apos;</span>, <span class="number">5000</span>)
</code></pre><p>&#x800C;&#x7528;&#xFF1A;</p>
<pre><code><span class="keyword">set</span>Interval(<span class="keyword">do</span>SomethingPeriodically, <span class="number">1000</span>);
<span class="keyword">set</span>TimeOut(<span class="keyword">do</span>SomethingAfterFiveSeconds, <span class="number">5000</span>);
</code></pre><h3 id="36_&#x4F7F;&#x7528;_switch/case_&#x8BED;&#x53E5;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E00;&#x957F;&#x4E32;&#x7684;_if/else"><em>36</em> &#x4F7F;&#x7528; switch/case &#x8BED;&#x53E5;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E00;&#x957F;&#x4E32;&#x7684; if/else</h3>
<p>&#x5728;&#x5224;&#x65AD;&#x60C5;&#x51B5;&#x5927;&#x4E8E;2&#x79CD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F7F;&#x7528; switch/case &#x66F4;&#x9AD8;&#x6548;&#xFF0C;&#x800C;&#x4E14;&#x66F4;&#x4F18;&#x96C5;&#xFF08;&#x66F4;&#x6613;&#x4E8E;&#x7EC4;&#x7EC7;&#x4EE3;&#x7801;&#xFF09;&#x3002;&#x4F46;&#x5728;&#x5224;&#x65AD;&#x7684;&#x60C5;&#x51B5;&#x8D85;&#x8FC7;10&#x79CD;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x8981;&#x4F7F;&#x7528; switch/case&#x3002;</p>
<h3 id="37_&#x5728;&#x5224;&#x65AD;&#x6570;&#x503C;&#x8303;&#x56F4;&#x65F6;&#x4F7F;&#x7528;_switch/case"><em>37</em> &#x5728;&#x5224;&#x65AD;&#x6570;&#x503C;&#x8303;&#x56F4;&#x65F6;&#x4F7F;&#x7528; switch/case</h3>
<p>&#x5728;&#x4E0B;&#x9762;&#x7684;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x4F7F;&#x7528; switch/case &#x5224;&#x65AD;&#x6570;&#x503C;&#x8303;&#x56F4;&#x7684;&#x65F6;&#x5019;&#x662F;&#x5408;&#x7406;&#x7684;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">getCategory</span><span class="params">(age)</span> {</span>
    <span class="keyword">var</span> category = <span class="string">&quot;&quot;</span>;
    <span class="keyword">switch</span> (<span class="literal">true</span>) {
        <span class="keyword">case</span> <span class="built_in">isNaN</span>(age):
            category = <span class="string">&quot;not an age&quot;</span>;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> (age &gt;= <span class="number">50</span>):
            category = <span class="string">&quot;Old&quot;</span>;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> (age &lt;= <span class="number">20</span>):
            category = <span class="string">&quot;Baby&quot;</span>;
            <span class="keyword">break</span>;
        <span class="keyword">default</span>:
            category = <span class="string">&quot;Young&quot;</span>;
            <span class="keyword">break</span>;
    };
    <span class="keyword">return</span> category;
}
getCategory(<span class="number">5</span>);  <span class="comment">// will return &quot;Baby&quot;</span>
</code></pre><h3 id="38_&#x4E3A;&#x521B;&#x5EFA;&#x7684;&#x5BF9;&#x8C61;&#x6307;&#x5B9A;prototype&#x5BF9;&#x8C61;"><em>38</em> &#x4E3A;&#x521B;&#x5EFA;&#x7684;&#x5BF9;&#x8C61;&#x6307;&#x5B9A;prototype&#x5BF9;&#x8C61;</h3>
<p>&#x5199;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x6765;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x4EE5;&#x6307;&#x5B9A;&#x53C2;&#x6570;&#x4F5C;&#x4E3A;prototype&#x7684;&#x5BF9;&#x8C61;&#x662F;&#x6709;&#x53EF;&#x80FD;&#xFF1A;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">clone</span><span class="params">(object)</span> {</span>
    <span class="function"><span class="keyword">function</span> <span class="title">OneShotConstructor</span><span class="params">()</span>{</span>};
    OneShotConstructor.prototype= object;
    <span class="keyword">return</span> <span class="keyword">new</span> OneShotConstructor();
}
<span class="keyword">clone</span>(<span class="keyword">Array</span>).prototype ;  <span class="comment">// []</span>
</code></pre><h3 id="39_&#x4E00;&#x4E2A;HTML&#x8F6C;&#x4E49;&#x51FD;&#x6570;"><em>39</em> &#x4E00;&#x4E2A;HTML&#x8F6C;&#x4E49;&#x51FD;&#x6570;</h3>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">escapeHTML</span><span class="params">(text)</span> {</span>
    <span class="keyword">var</span> replacements= {<span class="string">&quot;&lt;&quot;</span>: <span class="string">&quot;&amp;lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>: <span class="string">&quot;&amp;gt;&quot;</span>,<span class="string">&quot;&amp;&quot;</span>: <span class="string">&quot;&amp;amp;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>: <span class="string">&quot;&amp;quot;&quot;</span>};
    <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&amp;&quot;]/g</span>, <span class="function"><span class="keyword">function</span><span class="params">(character)</span> {</span>
        <span class="keyword">return</span> replacements[character];
    });
}
</code></pre><h3 id="40_&#x907F;&#x514D;&#x5728;&#x5FAA;&#x73AF;&#x5185;&#x90E8;&#x4F7F;&#x7528;_try-catch-finally"><em>40</em> &#x907F;&#x514D;&#x5728;&#x5FAA;&#x73AF;&#x5185;&#x90E8;&#x4F7F;&#x7528; try-catch-finally</h3>
<p>&#x5728;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x6BCF;&#x6B21;&#x5F53; catch &#x4ECE;&#x53E5;&#x88AB;&#x6267;&#x884C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x88AB;&#x6355;&#x83B7;&#x7684;&#x5F02;&#x5E38;&#x5BF9;&#x8C61;&#x4F1A;&#x8D4B;&#x503C;&#x7ED9;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x800C;&#x5728; try-catch-finally &#x7ED3;&#x6784;&#x4E2D;&#xFF0C;&#x6BCF;&#x6B21;&#x90FD;&#x4F1A;&#x65B0;&#x5EFA;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x3002;</p>
<p>&#x907F;&#x514D;&#x8FD9;&#x6837;&#x7684;&#x5199;&#x6CD5;&#xFF1A;</p>
<pre><code>var object = <span class="matrix">[<span class="string">&apos;foo&apos;</span>, <span class="string">&apos;bar&apos;</span>]</span>, <span class="built_in">i</span>;
<span class="keyword">for</span> (<span class="built_in">i</span> = <span class="number">0</span>, len = <span class="transposed_variable">object.</span><span class="built_in">length</span>; <span class="built_in">i</span> &lt;len; <span class="built_in">i</span>++) <span class="cell">{
    try {
        // do something that throws an exception
    }</span>
    <span class="keyword">catch</span> (e) <span class="cell">{
        // handle exception
    }</span>
}
</code></pre><p>&#x800C;&#x4F7F;&#x7528;&#xFF1A;</p>
<pre><code><span class="keyword">var</span> <span class="keyword">object</span> = [<span class="string">&apos;foo&apos;</span>, <span class="string">&apos;bar&apos;</span>], i;
<span class="keyword">try</span> {
    <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">object</span>.length; i &lt;len; i++) {
        <span class="comment">// do something that throws an exception</span>
    }
}
<span class="keyword">catch</span> (e) {
    <span class="comment">// handle exception</span>
}
</code></pre><h3 id="41_&#x4E3A;_XMLHttpRequests_&#x8BBE;&#x7F6E;&#x8D85;&#x65F6;&#x3002;"><em>41</em> &#x4E3A; XMLHttpRequests &#x8BBE;&#x7F6E;&#x8D85;&#x65F6;&#x3002;</h3>
<p>&#x5728;&#x4E00;&#x4E2A;XHR&#x8BF7;&#x6C42;&#x5360;&#x7528;&#x5F88;&#x957F;&#x65F6;&#x95F4;&#x540E;&#xFF08;&#x6BD4;&#x5982;&#x7531;&#x4E8E;&#x7F51;&#x7EDC;&#x95EE;&#x9898;&#xFF09;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4E2D;&#x6B62;&#x8FD9;&#x6B21;&#x8BF7;&#x6C42;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x53EF;&#x4EE5;&#x5BF9;XHR&#x8C03;&#x7528;&#x914D;&#x5957;&#x4F7F;&#x7528; setTimeout()&#x3002;</p>
<pre><code><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest ();
xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span>) {
        clearTimeout(timeout);
        <span class="comment">// do something with response data</span>
    }
}
<span class="keyword">var</span> timeout = setTimeout( <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    xhr.abort(); <span class="comment">// call error callback</span>
}, <span class="number">60</span>*<span class="number">1000</span> <span class="comment">/* timeout after a minute */</span> );
xhr.open(<span class="string">&apos;GET&apos;</span>, url, <span class="literal">true</span>);

xhr.send();
</code></pre><p>&#x6B64;&#x5916;&#xFF0C;&#x4E00;&#x822C;&#x4F60;&#x5E94;&#x8BE5;&#x5B8C;&#x5168;&#x907F;&#x514D;&#x540C;&#x6B65;&#x7684;Ajax&#x8BF7;&#x6C42;&#x3002;</p>
<h3 id="42_&#x5904;&#x7406;WebSocket&#x8D85;&#x65F6;"><em>42</em> &#x5904;&#x7406;WebSocket&#x8D85;&#x65F6;</h3>
<p>&#x901A;&#x5E38;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;WebSocket&#x8FDE;&#x63A5;&#x521B;&#x5EFA;&#x4E4B;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x6CA1;&#x6709;&#x6D3B;&#x52A8;&#x7684;&#x8BDD;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x4F1A;&#x5728;30&#x79D2;&#x4E4B;&#x540E;&#x65AD;&#x5F00;&#xFF08;time out&#xFF09;&#x4F60;&#x7684;&#x8FDE;&#x63A5;&#x3002;<br>&#x9632;&#x706B;&#x5899;&#x4E5F;&#x4F1A;&#x5728;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x4E0D;&#x6D3B;&#x52A8;&#x4E4B;&#x540E;&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#x3002;</p>
<p>&#x4E3A;&#x4E86;&#x9632;&#x6B62;&#x8D85;&#x65F6;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x95F4;&#x6B47;&#x6027;&#x5730;&#x5411;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x53D1;&#x9001;&#x7A7A;&#x6D88;&#x606F;&#x3002;&#x8981;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5728;&#x4F60;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#x6DFB;&#x52A0;&#x4E0B;&#x9762;&#x7684;&#x4E24;&#x4E2A;&#x51FD;&#x6570;&#xFF1A;&#x4E00;&#x4E2A;&#x7528;&#x6765;&#x4FDD;&#x6301;&#x8FDE;&#x63A5;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7528;&#x6765;&#x53D6;&#x6D88;&#x8FDE;&#x63A5;&#x7684;&#x4FDD;&#x6301;&#x3002;<br>&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x6280;&#x5DE7;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x8D85;&#x65F6;&#x7684;&#x95EE;&#x9898;&#x3002;</p>
<p>&#x4F7F;&#x7528;&#x4E00;&#x4E2A; timerID&#xFF1A;</p>
<pre><code><span class="keyword">var</span> timerID = <span class="number">0</span>;
<span class="function"><span class="keyword">function</span> <span class="title">keepAlive</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> timeout = <span class="number">15000</span>;
    <span class="keyword">if</span> (webSocket.readyState == webSocket.OPEN) {
        webSocket.send(<span class="string">&apos;&apos;</span>);
    }
    timerId = setTimeout(keepAlive, timeout);
}
<span class="function"><span class="keyword">function</span> <span class="title">cancelKeepAlive</span><span class="params">()</span> {</span>
    <span class="keyword">if</span> (timerId) {
        cancelTimeout(timerId);
    }
}
</code></pre><p>keepAlive()&#x65B9;&#x6CD5;&#x5E94;&#x8BE5;&#x88AB;&#x6DFB;&#x52A0;&#x5728;webSOcket&#x8FDE;&#x63A5;&#x7684; onOpen() &#x65B9;&#x6CD5;&#x7684;&#x6700;&#x540E;&#xFF0C;&#x800C; cancelKeepAlive() &#x6DFB;&#x52A0;&#x5728; onClose() &#x65B9;&#x6CD5;&#x7684;&#x6700;&#x540E;&#x3002;</p>
<h3 id="43_&#x7262;&#x8BB0;&#xFF0C;&#x539F;&#x59CB;&#x8FD0;&#x7B97;&#x7B26;&#x59CB;&#x7EC8;&#x6BD4;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x8981;&#x9AD8;&#x6548;&#x3002;&#x4F7F;&#x7528;VanillaJS&#x3002;"><em>43</em> &#x7262;&#x8BB0;&#xFF0C;&#x539F;&#x59CB;&#x8FD0;&#x7B97;&#x7B26;&#x59CB;&#x7EC8;&#x6BD4;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x8981;&#x9AD8;&#x6548;&#x3002;&#x4F7F;&#x7528;<a href="http://vanilla-js.com/" target="_blank" rel="external">VanillaJS</a>&#x3002;</h3>
<p>&#x4E3E;&#x4F8B;&#x6765;&#x8BF4;&#xFF0C;&#x4E0D;&#x4F7F;&#x7528;&#xFF1A;</p>
<pre><code><span class="built_in">var</span> <span class="keyword">min</span> <span class="subst">=</span> Math<span class="built_in">.</span><span class="keyword">min</span>(a,b);
A<span class="built_in">.</span>push(v);
</code></pre><p>&#x800C;&#x7528;&#xFF1A;</p>
<pre><code>var <span class="built_in">min</span> = a &lt; b ? a : b;
A[A.<span class="built_in">length</span>] = v;
</code></pre><h3 id="44_&#x7F16;&#x7801;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x4F7F;&#x7528;&#x4EE3;&#x7801;&#x6574;&#x6D01;&#x5DE5;&#x5177;&#x3002;&#x5728;&#x4E0A;&#x7EBF;&#x4E4B;&#x524D;&#x4F7F;&#x7528;JSLint&#x548C;&#x4EE3;&#x7801;&#x538B;&#x7F29;&#x5DE5;&#x5177;&#xFF08;minification&#xFF09;&#xFF08;&#x6BD4;&#x5982;JSMin&#xFF09;&#x3002;"><em>44</em> &#x7F16;&#x7801;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x4F7F;&#x7528;&#x4EE3;&#x7801;&#x6574;&#x6D01;&#x5DE5;&#x5177;&#x3002;&#x5728;&#x4E0A;&#x7EBF;&#x4E4B;&#x524D;&#x4F7F;&#x7528;JSLint&#x548C;&#x4EE3;&#x7801;&#x538B;&#x7F29;&#x5DE5;&#x5177;&#xFF08;minification&#xFF09;&#xFF08;&#x6BD4;&#x5982;JSMin&#xFF09;&#x3002;</h3>
<h3 id="45_JavaScript&#x662F;&#x4E0D;&#x53EF;&#x601D;&#x8BAE;&#x7684;&#x3002;&#x6700;&#x597D;&#x7684;JavaScript&#x5B66;&#x4E60;&#x8D44;&#x6E90;&#x3002;"><em>45</em> JavaScript&#x662F;&#x4E0D;&#x53EF;&#x601D;&#x8BAE;&#x7684;&#x3002;&#x6700;&#x597D;&#x7684;JavaScript&#x5B66;&#x4E60;&#x8D44;&#x6E90;&#x3002;</h3>
<p>======</p>
<pre><code><span class="label">http:</span>//blog<span class="preprocessor">.jobbole</span><span class="preprocessor">.com</span>/<span class="number">54495</span>/
<span class="label">http:</span>//modernweb<span class="preprocessor">.com</span>/<span class="number">2013</span>/<span class="number">12</span>/<span class="number">23</span>/<span class="number">45</span>-useful-javascript-tips-tricks-<span class="keyword">and</span>-best-practices/
<span class="label">http:</span>//djt<span class="preprocessor">.qq</span><span class="preprocessor">.com</span>/article/view/<span class="number">945</span>?ADTAG=email<span class="preprocessor">.InnerAD</span><span class="preprocessor">.weekly</span><span class="number">.20131125</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>&#x7AD9;&#x5728;&#x5DE8;&#x4EBA;&#x7684;&#x80A9;&#x8180;&#xFF0C;&#x80FD;&#x8DF3;&#x7684;&#x66F4;&#x9AD8;&#x3002;<br>&#x7ECF;&#x9A8C;&#x4E0D;&#x5B8C;&#x5168;&#x7B49;&#x4E8E;&#x5DE5;&#x4F5C;&#x65F6;&#x95F4;<br>&#x672C;&#x7BC7;&#x4E3B;&#x8981;&#x6574;&#x7406;&#x4E00;&#x4E9B;&#x524D;&#x4EBA;&#x7684;&#x6700;&#x4F73;&#x5B9E;&#x8DF5;<br>&#x5BF9;&#x4E8E;&#x65B0;&#x4EBA;&#x53EF;&#x80FD;&#x4E00;&#x4E0B;&#x5B50;&#x4E0D;&#x80FD;&#x5B8C;&#x5168;&#x7528;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;jslint&#x6216;&#x8005;jshint&#x4F5C;&#x4E3A;&#x76D1;&#x7763;&#x3002;<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[what is 'this']]></title>
    <link href="http://blog.gyf1.com/2015/01/08/what-is-this/"/>
    <id>http://blog.gyf1.com/2015/01/08/what-is-this/</id>
    <published>2015-01-08T03:49:13.000Z</published>
    <updated>2015-01-08T07:52:26.000Z</updated>
    <content type="html"><![CDATA[<p>&#x5F88;&#x591A;&#x5B66;&#x4E60;JavaScript&#x7684;&#x4EBA;&#xFF0C;&#x4E4B;&#x524D;&#x90FD;&#x662F;&#x5B66;&#x4E60;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x7684;&#x3002;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x5F88;&#x591A;&#x5B66;&#x4E60;JavaScript&#x7684;&#x4EBA;&#xFF0C;&#x4E4B;&#x524D;&#x90FD;&#x662F;&#x5B66;&#x4E60;&#x5176;&#x4ED6;&#x8BED]]>
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[闭包实践]]></title>
    <link href="http://blog.gyf1.com/2015/01/08/%E9%97%AD%E5%8C%85%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blog.gyf1.com/2015/01/08/闭包实践/</id>
    <published>2015-01-08T03:28:38.000Z</published>
    <updated>2015-01-08T07:52:28.000Z</updated>
    <content type="html"><![CDATA[<p>&#x95ED;&#x5305;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x4E0D;&#x592A;&#x5BB9;&#x6613;&#x63CF;&#x8FF0;<br>&#x4F46;&#x662F;&#x672C;&#x8D28;&#x4E0A;&#x5374;&#x662F;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x7684;</p>
<p>&#x95ED;&#x5305;&#x53EF;&#x4EE5;&#x505A;&#x4EC0;&#x4E48;:</p>
<h2 id="&#x7528;&#x6765;&#x9690;&#x85CF;&#x4E00;&#x4E9B;&#x79C1;&#x6709;&#x7684;&#x65B9;&#x6CD5;"><em>&#x7528;&#x6765;&#x9690;&#x85CF;&#x4E00;&#x4E9B;&#x79C1;&#x6709;&#x7684;&#x65B9;&#x6CD5;</em></h2>
<p>&#x4F8B;&#x5B50;&#xFF1A;</p>
<pre><code>a = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> privatefunction = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&apos;hello&apos;</span>);
    }

    <span class="keyword">return</span> {
        publicfunction : <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
            privatefunction();
        }
    }
})();
</code></pre><p>a&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;a&#x8C03;&#x7528;&#x5230;publicfunction&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x8C03;&#x7528;&#x5230;privatefunction<br>&#x5F88;&#x591A;&#x4EBA;&#x4E00;&#x770B;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x70B9;&#x5403;&#x60CA;&#xFF0C;&#x56E0;&#x4E3A;&#x81EA;&#x5DF1;&#x65E9;&#x5C31;&#x8FD9;&#x4E48;&#x4F7F;&#x7528;&#x4E86;&#xFF0C;&#x53EA;&#x662F;&#x81EA;&#x5DF1;&#x4E0D;&#x77E5;&#x9053;&#x8FD9;&#x5C31;&#x662F;&#x95ED;&#x5305;&#x3002;</p>
<p><a id="more"></a><br><a href="http://stackoverflow.com/questions/2728278/what-is-a-practical-use-for-a-closure-in-javascript" target="_blank" rel="external">http://stackoverflow.com/questions/2728278/what-is-a-practical-use-for-a-closure-in-javascript</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x95ED;&#x5305;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x4E0D;&#x592A;&#x5BB9;&#x6613;&#x63CF;&#x8FF0;<br>&#x4F46;&#x662F;&#x672C;&#x8D28;&#x4E0A;&#x5374;&#x662F;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x7684;</p>
<p>&#x95ED;&#x5305;&#x53EF;&#x4EE5;&#x505A;&#x4EC0;&#x4E48;:</p>
<h2 id="&#x7528;&#x6765;&#x9690;&#x85CF;&#x4E00;&#x4E9B;&#x79C1;&#x6709;&#x7684;&#x65B9;&#x6CD5;"><em>&#x7528;&#x6765;&#x9690;&#x85CF;&#x4E00;&#x4E9B;&#x79C1;&#x6709;&#x7684;&#x65B9;&#x6CD5;</em></h2>
<p>&#x4F8B;&#x5B50;&#xFF1A;</p>
<pre><code>a = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> privatefunction = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&apos;hello&apos;</span>);
    }

    <span class="keyword">return</span> {
        publicfunction : <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
            privatefunction();
        }
    }
})();
</code></pre><p>a&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;a&#x8C03;&#x7528;&#x5230;publicfunction&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x8C03;&#x7528;&#x5230;privatefunction<br>&#x5F88;&#x591A;&#x4EBA;&#x4E00;&#x770B;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x70B9;&#x5403;&#x60CA;&#xFF0C;&#x56E0;&#x4E3A;&#x81EA;&#x5DF1;&#x65E9;&#x5C31;&#x8FD9;&#x4E48;&#x4F7F;&#x7528;&#x4E86;&#xFF0C;&#x53EA;&#x662F;&#x81EA;&#x5DF1;&#x4E0D;&#x77E5;&#x9053;&#x8FD9;&#x5C31;&#x662F;&#x95ED;&#x5305;&#x3002;</p>
<p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript promise]]></title>
    <link href="http://blog.gyf1.com/2014/12/31/javascript-promise/"/>
    <id>http://blog.gyf1.com/2014/12/31/javascript-promise/</id>
    <published>2014-12-31T03:51:02.000Z</published>
    <updated>2014-12-31T03:51:23.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.infoq.com/cn/news/2011/09/js-promise/" target="_blank" rel="external">http://www.infoq.com/cn/news/2011/09/js-promise/</a><br><a href="http://www.jb51.net/article/48680.htm" target="_blank" rel="external">http://www.jb51.net/article/48680.htm</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.infoq.com/cn/news/2011/09/js-promise/" target="_blank" rel="external">http://www.infoq.com/cn/news/2011/09/js-promise]]>
    </summary>
    
  </entry>
  
</feed>
