<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[GYF1]]></title>
  <subtitle><![CDATA[Web Platform, Cloud and Mobile Application Development]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.gyf1.com/"/>
  <updated>2015-02-04T06:38:56.429Z</updated>
  <id>http://blog.gyf1.com/</id>
  
  <author>
    <name><![CDATA[GYF1]]></name>
    <email><![CDATA[admin@gyf1.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CSS display: inline vs inline-block]]></title>
    <link href="http://blog.gyf1.com/2015/02/04/css-display-inline-vs-inline-block/"/>
    <id>http://blog.gyf1.com/2015/02/04/css-display-inline-vs-inline-block/</id>
    <published>2015-02-04T11:32:05.000Z</published>
    <updated>2015-02-04T06:38:42.000Z</updated>
    <content type="html"><![CDATA[<p>Inline elements:</p>
<ol>
<li>respect left &amp; right margins and padding, but not top &amp; bottom</li>
<li>cannot have a width and height set</li>
<li>allow other elements to sit to their left and right.</li>
</ol>
<p>Block elements:</p>
<ol>
<li>respect all of those</li>
<li>force a line break after the block element</li>
</ol>
<p>Inline-block elements:</p>
<ol>
<li>allow other elements to sit to their left and right</li>
<li>respect top &amp; bottom margins and padding</li>
<li>respect height and width</li>
</ol>
<p>From W3Schools:</p>
<pre><code>An inline element has no line break <span class="keyword">before</span> <span class="keyword">or</span> <span class="keyword">after</span> <span class="keyword">it</span>, <span class="keyword">and</span> <span class="keyword">it</span> tolerates HTML elements next <span class="keyword">to</span> <span class="keyword">it</span>.

A block element has <span class="keyword">some</span> whitespace <span class="keyword">above</span> <span class="keyword">and</span> <span class="keyword">below</span> <span class="keyword">it</span> <span class="keyword">and</span> <span class="keyword">does</span> <span class="keyword">not</span> tolerate any HTML elements next <span class="keyword">to</span> <span class="keyword">it</span>.

An inline-block element <span class="keyword">is</span> placed <span class="keyword">as</span> an inline element (<span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> same line <span class="keyword">as</span> adjacent content), <span class="keyword">but</span> <span class="keyword">it</span> behaves <span class="keyword">as</span> a block element.
</code></pre><p><a id="more"></a><br><a href="http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block" target="_blank" rel="external">http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block</a><br><a href="http://dustwell.com/div-span-inline-block.html" target="_blank" rel="external">http://dustwell.com/div-span-inline-block.html</a><br><a href="http://www.cnblogs.com/jdonson/archive/2011/06/10/2077932.html" target="_blank" rel="external">http://www.cnblogs.com/jdonson/archive/2011/06/10/2077932.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Inline elements:</p>
<ol>
<li>respect left &amp; right margins and padding, but not top &amp; bottom</li>
<li>cannot have a width and height set</li>
<li>allow other elements to sit to their left and right.</li>
</ol>
<p>Block elements:</p>
<ol>
<li>respect all of those</li>
<li>force a line break after the block element</li>
</ol>
<p>Inline-block elements:</p>
<ol>
<li>allow other elements to sit to their left and right</li>
<li>respect top &amp; bottom margins and padding</li>
<li>respect height and width</li>
</ol>
<p>From W3Schools:</p>
<pre><code>An inline element has no line break <span class="keyword">before</span> <span class="keyword">or</span> <span class="keyword">after</span> <span class="keyword">it</span>, <span class="keyword">and</span> <span class="keyword">it</span> tolerates HTML elements next <span class="keyword">to</span> <span class="keyword">it</span>.

A block element has <span class="keyword">some</span> whitespace <span class="keyword">above</span> <span class="keyword">and</span> <span class="keyword">below</span> <span class="keyword">it</span> <span class="keyword">and</span> <span class="keyword">does</span> <span class="keyword">not</span> tolerate any HTML elements next <span class="keyword">to</span> <span class="keyword">it</span>.

An inline-block element <span class="keyword">is</span> placed <span class="keyword">as</span> an inline element (<span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> same line <span class="keyword">as</span> adjacent content), <span class="keyword">but</span> <span class="keyword">it</span> behaves <span class="keyword">as</span> a block element.
</code></pre><p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.gyf1.com/tags/css/"/>
    
      <category term="Style" scheme="http://blog.gyf1.com/categories/style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Microdata]]></title>
    <link href="http://blog.gyf1.com/2015/02/03/microdata/"/>
    <id>http://blog.gyf1.com/2015/02/03/microdata/</id>
    <published>2015-02-03T11:24:35.000Z</published>
    <updated>2015-02-04T05:27:17.000Z</updated>
    <content type="html"><![CDATA[<p>&#x4E00;&#x4E2A;&#x9875;&#x9762;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F8B;&#x5982;&#x4EBA;&#x7269;&#x3001;&#x4E8B;&#x4EF6;&#x6216;&#x8BC4;&#x8BBA;&#x4E0D;&#x4EC5;&#x8981;&#x7ED9;&#x7528;&#x6237;&#x770B;&#xFF0C;&#x8FD8;&#x8981;&#x8BA9;&#x673A;&#x5668;&#x53EF;&#x8BC6;&#x522B;&#x3002;&#x800C;&#x76EE;&#x524D;&#x673A;&#x5668;&#x667A;&#x80FD;&#x7A0B;&#x5EA6;&#x6709;&#x9650;&#xFF0C;&#x8981;&#x8BA9;&#x5176;&#x77E5;&#x4F1A;&#x7279;&#x5B9A;&#x5185;&#x5BB9;&#x542B;&#x4E49;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x89C4;&#x5B9A;&#x7684;&#x6807;&#x7B7E;&#x3001;&#x5C5E;&#x6027;&#x540D;&#x4EE5;&#x53CA;&#x7279;&#x5B9A;&#x7528;&#x6CD5;&#x7B49;&#x3002;&#x4E3E;&#x4E2A;&#x7B80;&#x5355;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;<h1>&#x6807;&#x7B7E;&#x5305;&#x88F9;&#x9875;&#x9762;&#x6807;&#x9898;&#x4FE1;&#x606F;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x673A;&#x5668;&#x8BC6;&#x522B;&#xFF08;&#x641C;&#x7D22;&#x5F15;&#x64CE; &#x2013; SEO&#xFF09;&#x3002;</h1></p>
<a id="more"></a>

<p><a href="http://www.zhangxinxu.com/wordpress/2011/12/html5%E6%89%A9%E5%B1%95-%E5%BE%AE%E6%95%B0%E6%8D%AE-%E4%B8%B0%E5%AF%8C%E7%BD%91%E9%A1%B5%E6%91%98%E8%A6%81/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2011/12/html5%E6%89%A9%E5%B1%95-%E5%BE%AE%E6%95%B0%E6%8D%AE-%E4%B8%B0%E5%AF%8C%E7%BD%91%E9%A1%B5%E6%91%98%E8%A6%81/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x4E00;&#x4E2A;&#x9875;&#x9762;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F8B;&#x5982;&#x4EBA;&#x7269;&#x3001;&#x4E8B;&#x4EF6;&#x6216;&#x8BC4;&#x8BBA;&#x4E0D;&#x4EC5;&#x8981;&#x7ED9;&#x7528;&#x6237;&#x770B;&#xFF0C;&#x8FD8;&#x8981;&#x8BA9;&#x673A;&#x5668;&#x53EF;&#x8BC6;&#x522B;&#x3002;&#x800C;&#x76EE;&#x524D;&#x673A;&#x5668;&#x667A;&#x80FD;&#x7A0B;&#x5EA6;&#x6709;&#x9650;&#xFF0C;&#x8981;&#x8BA9;&#x5176;&#x77E5;&#x4F1A;&#x7279;&#x5B9A;&#x5185;&#x5BB9;&#x542B;&#x4E49;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x89C4;&#x5B9A;&#x7684;&#x6807;&#x7B7E;&#x3001;&#x5C5E;&#x6027;&#x540D;&#x4EE5;&#x53CA;&#x7279;&#x5B9A;&#x7528;&#x6CD5;&#x7B49;&#x3002;&#x4E3E;&#x4E2A;&#x7B80;&#x5355;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;<h1>&#x6807;&#x7B7E;&#x5305;&#x88F9;&#x9875;&#x9762;&#x6807;&#x9898;&#x4FE1;&#x606F;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x673A;&#x5668;&#x8BC6;&#x522B;&#xFF08;&#x641C;&#x7D22;&#x5F15;&#x64CE; &#x2013; SEO&#xFF09;&#x3002;</h1></p>
]]>
    
    </summary>
    
      <category term="HTML" scheme="http://blog.gyf1.com/categories/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[difference between visibility:hidden and display:none]]></title>
    <link href="http://blog.gyf1.com/2015/02/03/difference-between-visibilityhidden-and-displaynone/"/>
    <id>http://blog.gyf1.com/2015/02/03/difference-between-visibilityhidden-and-displaynone/</id>
    <published>2015-02-03T11:17:30.000Z</published>
    <updated>2015-02-04T01:19:09.000Z</updated>
    <content type="html"><![CDATA[<p>What is the difference between visibility:hidden and display:none?</p>
<p><a id="more"></a><br>display:none means that the the tag in question will not appear on the page at all (although you can still interact with it through the dom). There will be no space allocated for it between the other tags.</p>
<p>visibility:hidden means that unlike display:none, the tag is not visible, but space is allocated for it on the page. The tag is rendered, it just isn&#x2019;t seen on the page.</p>
<p>For example:</p>
<pre><code>test | &lt;span style=<span class="string">&quot;[style-tag-value]&quot;</span>&gt;Appropriate style <span class="keyword">in</span> <span class="keyword">this</span> tag&lt;/span&gt; | test
</code></pre><p>Replacing [style-tag-value] with display:none results in:</p>
<p>test |   | test</p>
<p>Replacing [style-tag-value] with visibility:hidden results in:</p>
<p>test |                        | test</p>
<p><a href="http://stackoverflow.com/questions/133051/what-is-the-difference-between-visibilityhidden-and-displaynone" target="_blank" rel="external">http://stackoverflow.com/questions/133051/what-is-the-difference-between-visibilityhidden-and-displaynone</a><br><a href="http://webdesign.about.com/od/css/f/blfaqhidden.htm" target="_blank" rel="external">http://webdesign.about.com/od/css/f/blfaqhidden.htm</a><br><a href="http://blog.csdn.net/gaofeng2000/article/details/7058550" target="_blank" rel="external">http://blog.csdn.net/gaofeng2000/article/details/7058550</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>What is the difference between visibility:hidden and display:none?</p>
<p>]]>
    
    </summary>
    
      <category term="Style" scheme="http://blog.gyf1.com/categories/style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[grunt task to generate spritesheet]]></title>
    <link href="http://blog.gyf1.com/2015/02/03/grunt-task-to-generate-spritesheet/"/>
    <id>http://blog.gyf1.com/2015/02/03/grunt-task-to-generate-spritesheet/</id>
    <published>2015-02-03T02:59:43.000Z</published>
    <updated>2015-02-03T06:10:28.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/Ensighten/grunt-spritesmith" target="_blank" rel="external">https://github.com/Ensighten/grunt-spritesmith</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/Ensighten/grunt-spritesmith" target="_blank" rel="external">https://github.com/Ensighten/grunt-spritesmith</a]]>
    </summary>
    
      <category term="Grunt" scheme="http://blog.gyf1.com/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Dive Into Plain JavaScript]]></title>
    <link href="http://blog.gyf1.com/2015/02/01/a-dive-into-plain-javascript/"/>
    <id>http://blog.gyf1.com/2015/02/01/a-dive-into-plain-javascript/</id>
    <published>2015-02-01T08:52:38.000Z</published>
    <updated>2015-02-02T09:39:22.000Z</updated>
    <content type="html"><![CDATA[<p>While I&#x2019;ve worked over a decade building various websites,<br>it has only been the past 3 years that I&#x2019;ve started learning more on how to work with plain JavaScript,<br>instead of using jQuery always as the starting point.<br>The fact that I&#x2019;m learning a dozen new things every day now, has made working on Adtile&#x2019;s JavaScript SDK feel more like building an open source project than &#x201C;actual work,&#x201D;<br>and I have to say I like that a lot.</p>
<p>Today, I&#x2019;m going to share some of the basic things I&#x2019;ve learned during the past years,<br>which will hopefully also help you to dive into the world of plain JavaScript,<br>making it easier to decide whether or not you will need jQuery in your next project.</p>
<a id="more"></a>

<h1 id="Progressive_Enhancement">Progressive Enhancement</h1>
<p>While libraries like jQuery help to forget most of the browser inconsistencies, you really become familiar with them once you start using plain JavaScript for everything.<br>To avoid writing JavaScript that&#x2019;s full of browser hacks and code which only solves browser compatibility issues,<br>I recommend building a progressively enhanced experience using feature detection to only target the more modern browsers.<br>This doesn&#x2019;t mean that browsers like IE7 don&#x2019;t see anything at all, it just means that they get a more basic experience without JavaScript enhancements.</p>
<h2 id="Here&#x2019;s_How_We&#x2019;re_Doing_It">Here&#x2019;s How We&#x2019;re Doing It</h2>
<p>We have a separate JavaScript partial called &#x201C;feature.js&#x201D; which has all the feature tests.<br>The actual list of tests is much longer, but let&#x2019;s get back to this a bit later.<br>To rule out some of the older browsers we use these two tests:</p>
<pre><code><span class="function_or_atom">var</span> <span class="function_or_atom">feature</span> = {
  <span class="function_or_atom">addEventListener</span> : <span class="exclamation_mark">!</span><span class="exclamation_mark">!</span><span class="function_or_atom">window</span>.<span class="function_or_atom">addEventListener</span>,
  <span class="function_or_atom">querySelectorAll</span> : <span class="exclamation_mark">!</span><span class="exclamation_mark">!</span><span class="function_or_atom">document</span>.<span class="function_or_atom">querySelectorAll</span>,
};
</code></pre><p>Then, in the main application partial, we detect if these features are supported by using this simple &#x201C;if&#x201D; statement below.<br>If they aren&#x2019;t supported, the browser won&#x2019;t execute any of this code:</p>
<pre><code>if (feature<span class="preprocessor">.addEventListener</span> &amp;&amp; feature<span class="preprocessor">.querySelectorAll</span>) {
  this<span class="preprocessor">.init</span>()<span class="comment">;</span>
}
</code></pre><p>These two tests make sure that we have a native way of using CSS selectors in our JavaScript (querySelectorAll),<br>a way to easily add and remove events (addEventListener) and also that the browser&#x2019;s standards support is better than what IE8 has.<br>Read more about this technique called &#x201C;Cutting the mustard&#x201D; from BBC&#x2019;s blog.</p>
<h2 id="Browser_Support">Browser Support</h2>
<p>Here&#x2019;s a rough list of the browsers which support the features we are testing, and will hence keep executing the JavaScript:</p>
<ul>
<li>IE9+</li>
<li>Firefox 3.5+</li>
<li>Opera 9+</li>
<li>Safari 4+</li>
<li>Chrome 1+</li>
<li>iPhone and iPad iOS1+</li>
<li>Android phone and tablets 2.1+</li>
<li>Blackberry OS6+</li>
<li>Windows 7.5+</li>
<li>Mobile Firefox</li>
<li>Opera Mobile</li>
</ul>
<h1 id="The_Basics,_Plain_JavaSript_Way">The Basics, Plain JavaSript Way</h1>
<p>Let&#x2019;s start looking how the most basic and often needed functionalities work in plain JavaScript, compared to jQuery.<br>For each example, I&#x2019;m going to provide both the jQuery and plain JavaScript approach.</p>
<h2 id="Document_Ready">Document Ready</h2>
<p>With jQuery, many of you are probably used to using document.ready like so:</p>
<pre><code>$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// Code</span>
});
</code></pre><p>But did you know that you can just put all of your JavaScript at the bottom of your page and that does basically the same thing?<br>JavaScript has also an event listener for the DOM content loaded event which you can use instead of jQuery&#x2019;s document.ready:</p>
<pre><code>document.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// Code</span>
}, <span class="literal">false</span>);
</code></pre><h2 id="Selectors_API">Selectors API</h2>
<p>JavaScript&#x2019;s native selectors API is very good. It works with CSS selectors and is very similar to what jQuery provides. If you are used to writing this in jQuery:</p>
<pre><code><span class="keyword">var</span> element = $(<span class="string">&quot;div&quot;</span>);
</code></pre><p>You can now replace that with:</p>
<pre><code><span class="reserved">var</span> element = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);
</code></pre><p>Or, to select all div&#x2019;s inside some container:</p>
<pre><code><span class="reserved">var</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.container div&quot;</span>);
</code></pre><p>You can also query against a specific element to find it&#x2019;s children:</p>
<pre><code><span class="reserved">var</span> navigation = <span class="built_in">document</span>.querySelector(<span class="string">&quot;nav&quot;</span>);
<span class="reserved">var</span> links = navigation.querySelectorAll(<span class="string">&quot;a&quot;</span>);
</code></pre><p>Quite straightforward, easy to understand, and doesn&#x2019;t really require much more writing now does it?<br>To go a little further, we could even build a tiny JavaScript library for ourselves for simple DOM querying.<br>Here&#x2019;s something that Andrew Lunny has came up with:</p>
<pre><code><span class="regexp">//</span> This gives us simple dollar <span class="reserved">function</span> <span class="keyword">and</span> event binding
<span class="reserved">var</span> $ = <span class="built_in">document</span>.querySelectorAll.bind(<span class="built_in">document</span>);
Element.prototype.<span class="literal">on</span> = Element.prototype.addEventListener;

<span class="regexp">//</span> This <span class="keyword">is</span> how you use it
$(<span class="string">&quot;.element&quot;</span>)[<span class="number">0</span>].<span class="literal">on</span>(<span class="string">&quot;touchstart&quot;</span>, handleTouch, <span class="literal">false</span>);
</code></pre><h2 id="Traversing_the_DOM">Traversing the DOM</h2>
<p>Traversing the DOM with plain JavaScript is a bit harder than it is with jQuery. But not too hard. Here are some simple examples:</p>
<pre><code><span class="comment">// Getting the parent node</span>
<span class="keyword">var</span> <span class="keyword">parent</span> = document.querySelector(<span class="string">&quot;div&quot;</span>).parentNode;

<span class="comment">// Getting the next node</span>
<span class="keyword">var</span> next = document.querySelector(<span class="string">&quot;div&quot;</span>).nextSibling;

<span class="comment">// Getting the previous node</span>
<span class="keyword">var</span> next = document.querySelector(<span class="string">&quot;div&quot;</span>).previousSibling;

<span class="comment">// Getting the first child element</span>
<span class="keyword">var</span> child = document.querySelector(<span class="string">&quot;div&quot;</span>).children[<span class="number">0</span>];

<span class="comment">// Getting the last child</span>
<span class="keyword">var</span> last = document.querySelector(<span class="string">&quot;div&quot;</span>).lastElementChild;
</code></pre><p><a href="http://blog.adtile.me/2014/01/16/a-dive-into-plain-javascript/" target="_blank" rel="external">http://blog.adtile.me/2014/01/16/a-dive-into-plain-javascript/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>While I&#x2019;ve worked over a decade building various websites,<br>it has only been the past 3 years that I&#x2019;ve started learning more on how to work with plain JavaScript,<br>instead of using jQuery always as the starting point.<br>The fact that I&#x2019;m learning a dozen new things every day now, has made working on Adtile&#x2019;s JavaScript SDK feel more like building an open source project than &#x201C;actual work,&#x201D;<br>and I have to say I like that a lot.</p>
<p>Today, I&#x2019;m going to share some of the basic things I&#x2019;ve learned during the past years,<br>which will hopefully also help you to dive into the world of plain JavaScript,<br>making it easier to decide whether or not you will need jQuery in your next project.</p>
]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Scoping and Hoisting]]></title>
    <link href="http://blog.gyf1.com/2015/02/01/javascript-scoping-and-hoisting/"/>
    <id>http://blog.gyf1.com/2015/02/01/javascript-scoping-and-hoisting/</id>
    <published>2015-02-01T07:38:14.000Z</published>
    <updated>2015-02-02T08:27:19.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript Scoping and Hoisting</p>
<p>Do you know what value will be alerted if the following is executed as a JavaScript program?</p>
<pre><code><span class="keyword">var</span> foo = <span class="number">1</span>;
<span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> {</span>
    <span class="keyword">if</span> (!foo) {
        <span class="keyword">var</span> foo = <span class="number">10</span>;
    }
    alert(foo);
}
bar();
</code></pre><p>If it surprises you that the answer is &#x201C;10&#x201D;, then this one will probably really throw you for a loop:</p>
<pre><code><span class="keyword">var</span> a = <span class="number">1</span>;
<span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span> {</span>
    a = <span class="number">10</span>;
    <span class="keyword">return</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> {</span>console.log(<span class="string">&apos;!&apos;</span>);}
}
b();
alert(a);
</code></pre><p>Here, of course, the browser will alert &#x201C;1&#x201D;. So what&#x2019;s going on here?<br>While it might seem strange, dangerous, and confusing, this is actually a powerful and expressive feature of the language.<br>I don&#x2019;t know if there is a standard name for this specific behavior, but I&#x2019;ve come to like the term &#x201C;hoisting&#x201D;.<br>This article will try to shed some light on this mechanism, but first lets take a necessary detour to understand JavaScript&#x2019;s scoping.<br><a id="more"></a></p>
<h1 id="Scoping_in_JavaScript">Scoping in JavaScript</h1>
<p>One of the sources of most confusion for JavaScript beginners is scoping.<br>Actually, it&#x2019;s not just beginners.<br>I&#x2019;ve met a lot of experienced JavaScript programmers who don&#x2019;t fully understand scoping.<br>The reason scoping is so confusing in JavaScript is because it looks like a C-family language.<br>Consider the following C program:</p>
<pre><code><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<span class="keyword">int</span> main() {
    <span class="keyword">int</span> x = <span class="number">1</span>;
    <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, x); <span class="comment">// 1</span>
    <span class="keyword">if</span> (<span class="number">1</span>) {
        <span class="keyword">int</span> x = <span class="number">2</span>;
        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, x); <span class="comment">// 2</span>
    }
    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x); <span class="comment">// 1</span>
}
</code></pre><p>The output from this program will be 1, 2, 1.<br>This is because C, and the rest of the C family, has block-level scope.<br>When control enters a block, such as the if statement, new variables can be declared within that scope, without affecting the outer scope.<br>This is not the case in JavaScript. Try the following in Firebug:</p>
<pre><code><span class="built_in">var</span> x <span class="subst">=</span> <span class="number">1</span>;
console<span class="built_in">.</span><span class="keyword">log</span>(x); <span class="comment">// 1</span>
<span class="keyword">if</span> (<span class="literal">true</span>) {
    <span class="built_in">var</span> x <span class="subst">=</span> <span class="number">2</span>;
    console<span class="built_in">.</span><span class="keyword">log</span>(x); <span class="comment">// 2</span>
}
console<span class="built_in">.</span><span class="keyword">log</span>(x); <span class="comment">// 2</span>
</code></pre><p>In this case, Firebug will show 1, 2, 2.<br>This is because JavaScript has function-level scope.<br>This is radically different from the C family.<br>Blocks, such as if statements, do not create a new scope. Only functions create a new scope.</p>
<p>To a lot of programmers who are used to languages like C, C++, C#, or Java, this is unexpected and unwelcome.<br>Luckily, because of the flexibility of JavaScript functions, there is a workaround.<br>If you must create temporary scopes within a function, do the following:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> x = <span class="number">1</span>;
    <span class="keyword">if</span> (x) {
        (<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
            <span class="keyword">var</span> x = <span class="number">2</span>;
            <span class="comment">// some other code</span>
        }());
    }
    <span class="comment">// x is still 1.</span>
}
</code></pre><p>This method is actually quite flexible, and can be used anywhere you need a temporary scope, not just within block statements.<br>However, I strongly recommend that you take the time to really understand and appreciate JavaScript scoping.<br>It&#x2019;s quite powerful, and one of my favorite features of the language.<br>If you understand scoping, hoisting will make a lot more sense to you.</p>
<h1 id="Declarations,_Names,_and_Hoisting">Declarations, Names, and Hoisting</h1>
<p>In JavaScript, a name enters a scope in one of four basic ways:</p>
<ol>
<li>Language-defined: All scopes are, by default, given the names this and arguments.</li>
<li>Formal parameters: Functions can have named formal parameters, which are scoped to the body of that function.</li>
<li>Function declarations: These are of the form function foo() {}.</li>
<li>Variable declarations: These take the form var foo;.</li>
</ol>
<p>Function declarations and variable declarations are always moved (&#x201C;hoisted&#x201D;) invisibly to the top of their containing scope by the JavaScript interpreter.<br>Function parameters and language-defined names are, obviously, already there. This means that code like this:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> {</span>
    bar();
    <span class="keyword">var</span> x = <span class="number">1</span>;
}
</code></pre><p>is actually interpreted like this:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> x;
    bar();
    x = <span class="number">1</span>;
}
</code></pre><p>It turns out that it doesn&#x2019;t matter whether the line that contains the declaration would ever be executed. The following two functions are equivalent:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> {</span>
    <span class="keyword">if</span> (<span class="literal">false</span>) {
        <span class="keyword">var</span> x = <span class="number">1</span>;
    }
    <span class="keyword">return</span>;
    <span class="keyword">var</span> y = <span class="number">1</span>;
}
<span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> x, y;
    <span class="keyword">if</span> (<span class="literal">false</span>) {
        x = <span class="number">1</span>;
    }
    <span class="keyword">return</span>;
    y = <span class="number">1</span>;
}
</code></pre><p>Notice that the assignment portion of the declarations were not hoisted.<br>Only the name is hoisted.<br>This is not the case with function declarations, where the entire function body will be hoisted as well.<br>But remember that there are two normal ways to declare functions. Consider the following JavaScript:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span> {
    foo(); // TypeError <span class="string">&quot;foo is not a function&quot;</span>
    bar(); // <span class="string">&quot;this will run!&quot;</span>
    var foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> { // <span class="function"><span class="keyword">function</span> <span class="title">expression</span> <span class="title">assigned</span> <span class="title">to</span> <span class="title">local</span> <span class="title">variable</span> &apos;<span class="title">foo</span>&apos;
        <span class="title">alert</span><span class="params">(&quot;this won&apos;t run!&quot;)</span></span>;
    }
    <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span> { // <span class="function"><span class="keyword">function</span> <span class="title">declaration</span>, <span class="title">given</span> <span class="title">the</span> <span class="title">name</span> &apos;<span class="title">bar</span>&apos;
        <span class="title">alert</span><span class="params">(&quot;this will run!&quot;)</span></span>;
    }
}
test();
</code></pre><p>In this case, only the function declaration has its body hoisted to the top.<br>The name &#x2018;foo&#x2019; is hoisted, but the body is left behind, to be assigned during execution.</p>
<p>That covers the basics of hoisting, which is not as complex or confusing as it seems.<br>Of course, this being JavaScript, there is a little more complexity in certain special cases.</p>
<h1 id="Name_Resolution_Order">Name Resolution Order</h1>
<p>The most important special case to keep in mind is name resolution order.<br>Remember that there are four ways for names to enter a given scope.<br>The order I listed them above is the order they are resolved in.<br>In general, if a name has already been defined, it is never overridden by another property of the same name.<br>This means that a function declaration takes priority over a variable declaration.<br>This does not mean that an assignment to that name will not work, just that the declaration portion will be ignored.<br>There are a few exceptions:</p>
<ul>
<li>The built-in name arguments behaves oddly. It seems to be declared following the formal parameters, but before function declarations. This means that a formal parameter with the name arguments will take precedence over the built-in, even if it is undefined. This is a bad feature. Don&#x2019;t use the name arguments as a formal parameter.</li>
<li>Trying to use the name this as an identifier anywhere will cause a SyntaxError. This is a good feature.</li>
<li>If multiple formal parameters have the same name, the one occurring latest in the list will take precedence, even if it is undefined.</li>
</ul>
<h1 id="Named_Function_Expressions">Named Function Expressions</h1>
<p>You can give names to functions defined in function expressions, with syntax like a function declaration.<br>This does not make it a function declaration, and the name is not brought into scope, nor is the body hoisted.<br>Here&#x2019;s some code to illustrate what I mean:</p>
<pre><code>foo(); <span class="comment">// TypeError &quot;foo is not a function&quot;</span>
bar(); <span class="comment">// valid</span>
baz(); <span class="comment">// TypeError &quot;baz is not a function&quot;</span>
spam(); <span class="comment">// ReferenceError &quot;spam is not defined&quot;</span>

<span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>}; <span class="comment">// anonymous function expression (&apos;foo&apos; gets hoisted)</span>
<span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> {</span>}; <span class="comment">// function declaration (&apos;bar&apos; and the function body get hoisted)</span>
<span class="keyword">var</span> baz = <span class="function"><span class="keyword">function</span> <span class="title">spam</span><span class="params">()</span> {</span>}; <span class="comment">// named function expression (only &apos;baz&apos; gets hoisted)</span>

foo(); <span class="comment">// valid</span>
bar(); <span class="comment">// valid</span>
baz(); <span class="comment">// valid</span>
spam(); <span class="comment">// ReferenceError &quot;spam is not defined&quot;</span>
</code></pre><h1 id="How_to_Code_With_This_Knowledge">How to Code With This Knowledge</h1>
<p>Now that you understand scoping and hoisting, what does that mean for coding in JavaScript?<br>The most important thing is to always declare your variables with a var statement.<br>I strongly recommend that you have exactly one var statement per scope, and that it be at the top.<br>If you force yourself to do this, you will never have hoisting-related confusion.<br>However, doing this can make it hard to keep track of which variables have actually been declared in the current scope.<br>I recommend using JSLint with the onevar option to enforce this. If you&#x2019;ve done all of this, your code should look something like this:</p>
<pre><code>/*jslint onevar: true [<span class="keyword">...</span>] */
<span class="keyword">function</span> foo(a, b, c) {
    var x = <span class="number">1</span>,
        bar,
        baz = <span class="string">&quot;something&quot;</span>;
}
</code></pre><h1 id="What_the_Standard_Says">What the Standard Says</h1>
<p>I find that it&#x2019;s often useful to just consult the ECMAScript Standard (pdf) directly to understand how these things work.<br>Here&#x2019;s what it has to say about variable declarations and scope (section 12.2.2 in the older version):</p>
<pre><code>If <span class="keyword">the</span> variable statement occurs inside a FunctionDeclaration,
<span class="keyword">the</span> variables are defined <span class="keyword">with</span> function-<span class="keyword">local</span> scope <span class="keyword">in</span> <span class="keyword">that</span> function, <span class="keyword">as</span> described <span class="keyword">in</span> section <span class="number">10.1</span><span class="number">.3</span>.
Otherwise, they are defined <span class="keyword">with</span> <span class="keyword">global</span> scope (<span class="keyword">that</span> <span class="keyword">is</span>, they are created <span class="keyword">as</span> members <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">global</span> object, <span class="keyword">as</span> described <span class="keyword">in</span> section <span class="number">10.1</span><span class="number">.3</span>) using <span class="keyword">property</span> attributes { DontDelete }.
Variables are created when <span class="keyword">the</span> execution scope <span class="keyword">is</span> entered. A Block <span class="keyword">does</span> <span class="keyword">not</span> define a new execution scope.
Only Program <span class="keyword">and</span> FunctionDeclaration produce a new scope. Variables are initialised <span class="keyword">to</span> undefined when created.
A variable <span class="keyword">with</span> an Initialiser <span class="keyword">is</span> assigned <span class="keyword">the</span> value <span class="keyword">of</span> <span class="keyword">its</span> AssignmentExpression when <span class="keyword">the</span> VariableStatement <span class="keyword">is</span> executed, <span class="keyword">not</span> when <span class="keyword">the</span> variable <span class="keyword">is</span> created.
</code></pre><p>I hope this article has shed some light on one of the most common sources of confusion to JavaScript programmers.<br>I have tried to be as thorough as possible, to avoid creating more confusion. If I have made any mistakes or have large omissions, please let me know.</p>
<p>&#x539F;&#x6587;<br><a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html" target="_blank" rel="external">http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript Scoping and Hoisting</p>
<p>Do you know what value will be alerted if the following is executed as a JavaScript program?</p>
<pre><code><span class="keyword">var</span> foo = <span class="number">1</span>;
<span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> {</span>
    <span class="keyword">if</span> (!foo) {
        <span class="keyword">var</span> foo = <span class="number">10</span>;
    }
    alert(foo);
}
bar();
</code></pre><p>If it surprises you that the answer is &#x201C;10&#x201D;, then this one will probably really throw you for a loop:</p>
<pre><code><span class="keyword">var</span> a = <span class="number">1</span>;
<span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span> {</span>
    a = <span class="number">10</span>;
    <span class="keyword">return</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> {</span>console.log(<span class="string">&apos;!&apos;</span>);}
}
b();
alert(a);
</code></pre><p>Here, of course, the browser will alert &#x201C;1&#x201D;. So what&#x2019;s going on here?<br>While it might seem strange, dangerous, and confusing, this is actually a powerful and expressive feature of the language.<br>I don&#x2019;t know if there is a standard name for this specific behavior, but I&#x2019;ve come to like the term &#x201C;hoisting&#x201D;.<br>This article will try to shed some light on this mechanism, but first lets take a necessary detour to understand JavaScript&#x2019;s scoping.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css underline attributes for ie]]></title>
    <link href="http://blog.gyf1.com/2015/02/01/css-underline-attributes-for-ie/"/>
    <id>http://blog.gyf1.com/2015/02/01/css-underline-attributes-for-ie/</id>
    <published>2015-02-01T06:11:07.000Z</published>
    <updated>2015-02-03T06:15:28.000Z</updated>
    <content type="html"><![CDATA[<p>CSS &#x4E2D; _width&#x3001;_height &#x662F;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#xFF1F;</p>
<p>CSS &#x5C5E;&#x6027;&#x524D;&#x9762;&#x52A0;&#x4E86;&#x4E0B;&#x5212;&#x7EBF;&#x201C;_&#x201D;&#xFF0C;&#x5728; IE 6 &#x4E2D;&#xFF0C;&#x8DDF;&#x6CA1;&#x52A0;&#x4E0B;&#x5212;&#x7EBF;&#x6548;&#x679C;&#x76F8;&#x540C;&#x3002;</p>
<p>&#x5982;&#xFF1A;_width &#x7B49;&#x4EF7;&#x4E8E; width&#xFF1B;_height &#x7B49;&#x4EF7;&#x4E8E; height&#xFF1B;_color &#x7B49;&#x4EF7;&#x4E8E; color&#x2026;&#x2026;</p>
<p>&#x4E5F;&#x6709;&#x7528;&#x201C;\&#x201D;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x201C;\width&#x201D;&#x7B49;&#x4EF7;&#x4E8E; width&#x3002;&#x4F46;&#x5176;&#x5E94;&#x7528;&#x8303;&#x56F4;&#x6709;&#x9650;&#xFF0C;&#x6BD4;&#x5982;&#x201C;\color&#x201D;&#x5C31;&#x8BA4;&#x4E0D;&#x5230;&#x3002;<br><a id="more"></a></p>
<p>&#x7C7B;&#x4F3C;&#x8FD9;&#x79CD;&#x524D;&#x9762;&#x5E26;&#x4E0B;&#x5212;&#x7EBF;&#x7684;css&#x6837;&#x5F0F;_position  _display _width _height&#x662F;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#xFF1F;</p>
<p>&#x4E0D;&#x52A0;&#x4E0B;&#x5212;&#x7EBF;&#x7684;css&#x6837;&#x5F0F;position  display width height&#x6211;&#x90FD;&#x77E5;&#x9053;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x4F46;&#x662F;&#x52A0;&#x4E86;&#x4E0B;&#x5212;&#x7EBF;&#x540E;&#x662F;&#x4EC0;&#x4E48;&#x4E1C;&#x897F;&#x5462;&#xFF1F;<br>&#x7C7B;&#x4F3C;&#x8FD9;&#x79CD;&#xFF1A;_position  _display _width _height</p>
<p>&#x662F;&#x4E3A;&#x4E86;CSS HACK&#xFF0C;&#x60F3;&#x8BA9;&#x5728;IE6&#x4E0B;&#x663E;&#x793A;&#x7684;&#x548C;&#x5176;&#x4ED6;&#x7248;&#x672C;&#x7684;IE&#x4E2D;&#x663E;&#x793A;&#x4E00;&#x6837;&#xFF0C;&#x9700;&#x8981;&#x7279;&#x522B;&#x4E3A;IE6&#x5199;CSS&#x4EE3;&#x7801;&#xFF0C;&#x5E26;&#x4E0B;&#x5212;&#x7EBF;&#x7684;&#x5C31;&#x53EA;&#x6709;IE6&#x80FD;&#x8BA4;&#x8BC6;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x6709;IE6&#x4F1A;&#x6309;&#x5B83;&#x540E;&#x9762;&#x7684;CSS&#x8BBE;&#x7F6E;&#x5904;&#x7406;&#x3002;</p>
<p><a href="http://stackoverflow.com/questions/10335446/what-does-height-mean-in-css" target="_blank" rel="external">http://stackoverflow.com/questions/10335446/what-does-height-mean-in-css</a><br><a href="http://www.cftea.com/c/2009/11/9DEQ6F51Z8B1QXJN.asp" target="_blank" rel="external">http://www.cftea.com/c/2009/11/9DEQ6F51Z8B1QXJN.asp</a><br><a href="http://bbs.blueidea.com/thread-2867074-1-1.html" target="_blank" rel="external">http://bbs.blueidea.com/thread-2867074-1-1.html</a><br><a href="http://zhidao.baidu.com/question/114226381.html" target="_blank" rel="external">http://zhidao.baidu.com/question/114226381.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>CSS &#x4E2D; _width&#x3001;_height &#x662F;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#xFF1F;</p>
<p>CSS &#x5C5E;&#x6027;&#x524D;&#x9762;&#x52A0;&#x4E86;&#x4E0B;&#x5212;&#x7EBF;&#x201C;_&#x201D;&#xFF0C;&#x5728; IE 6 &#x4E2D;&#xFF0C;&#x8DDF;&#x6CA1;&#x52A0;&#x4E0B;&#x5212;&#x7EBF;&#x6548;&#x679C;&#x76F8;&#x540C;&#x3002;</p>
<p>&#x5982;&#xFF1A;_width &#x7B49;&#x4EF7;&#x4E8E; width&#xFF1B;_height &#x7B49;&#x4EF7;&#x4E8E; height&#xFF1B;_color &#x7B49;&#x4EF7;&#x4E8E; color&#x2026;&#x2026;</p>
<p>&#x4E5F;&#x6709;&#x7528;&#x201C;\&#x201D;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x201C;\width&#x201D;&#x7B49;&#x4EF7;&#x4E8E; width&#x3002;&#x4F46;&#x5176;&#x5E94;&#x7528;&#x8303;&#x56F4;&#x6709;&#x9650;&#xFF0C;&#x6BD4;&#x5982;&#x201C;\color&#x201D;&#x5C31;&#x8BA4;&#x4E0D;&#x5230;&#x3002;<br>]]>
    
    </summary>
    
      <category term="Style" scheme="http://blog.gyf1.com/categories/style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[config android environment on mac]]></title>
    <link href="http://blog.gyf1.com/2015/01/29/config-android-environment-on-mac/"/>
    <id>http://blog.gyf1.com/2015/01/29/config-android-environment-on-mac/</id>
    <published>2015-01-29T14:28:46.000Z</published>
    <updated>2015-01-29T06:38:32.000Z</updated>
    <content type="html"><![CDATA[<p>&#x9996;&#x5148;&#x4E0B;&#x8F7D;android sdk<br><a href="http://developer.android.com/sdk/installing/index.html?pkg=tools" target="_blank" rel="external">Installing the Stand-alone SDK Tools</a></p>
<p>&#x4E0B;&#x8F7D;&#x4E0B;&#x6765;&#x540E;&#x89E3;&#x538B;&#x5230;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x91CC;&#x9762;</p>
<p>&#x6253;&#x5F00;&#x7EC8;&#x7AEF;<br>export ANDROID_HOME=&#x201D;/Users/guoyinfeng/Development/android-sdk-macosx&#x201D;<br>export PATH=${PATH}:/Users/guoyinfeng/Development/android-sdk-macosx/tools</p>
<p>&#x4E24;&#x4E2A;&#x547D;&#x4EE4;&#x8F93;&#x5165;&#x5B8C;&#x4E86;&#x540E;&#xFF0C;&#x5C31;ok&#x4E86;</p>
<p>&#x4F7F;&#x7528;androd&#x547D;&#x4EE4;&#x53EF;&#x4EE5;&#x5728;&#x6253;&#x5F00;&#x7A97;&#x53E3;&#x4E2D;&#x505A;&#x4E00;&#x4E9B;&#x64CD;&#x4F5C;&#x914D;&#x7F6E;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x9996;&#x5148;&#x4E0B;&#x8F7D;android sdk<br><a href="http://developer.android.com/sdk/installing/index.html?pkg=tools" target="_blank"]]>
    </summary>
    
      <category term="Android" scheme="http://blog.gyf1.com/tags/android/"/>
    
      <category term="Mobile" scheme="http://blog.gyf1.com/categories/mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rubik's Cube]]></title>
    <link href="http://blog.gyf1.com/2015/01/29/rubiks-cube/"/>
    <id>http://blog.gyf1.com/2015/01/29/rubiks-cube/</id>
    <published>2015-01-29T08:46:00.000Z</published>
    <updated>2015-01-29T08:59:09.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://svejkgames.com/blog/post/create-your-own-rubiks-cube/" target="_blank" rel="external">http://svejkgames.com/blog/post/create-your-own-rubiks-cube/</a><br><a href="https://www.chrome.com/cubelab#demo" target="_blank" rel="external">https://www.chrome.com/cubelab#demo</a><br><a href="http://ondras.zarovi.cz/demos/rubik/" target="_blank" rel="external">http://ondras.zarovi.cz/demos/rubik/</a><br><a href="https://developer.mozilla.org/en-US/demos/detail/rubiks-cube" target="_blank" rel="external">https://developer.mozilla.org/en-US/demos/detail/rubiks-cube</a><br><a href="http://paulrhayes.com/2009-07/animated-css3-cube-interface-using-3d-transforms/" target="_blank" rel="external">http://paulrhayes.com/2009-07/animated-css3-cube-interface-using-3d-transforms/</a><br><a href="http://css-tricks.com/creating-a-3d-cube-image-gallery/" target="_blank" rel="external">http://css-tricks.com/creating-a-3d-cube-image-gallery/</a><br><a href="http://www.html5rubik.com/tutorial/" target="_blank" rel="external">http://www.html5rubik.com/tutorial/</a><br><a href="https://cube3x.com/magic-animation-using-css3/" target="_blank" rel="external">https://cube3x.com/magic-animation-using-css3/</a><br><a href="http://www.minimamente.com/magic-css3-animations-by-minimac/" target="_blank" rel="external">http://www.minimamente.com/magic-css3-animations-by-minimac/</a><br><a href="http://codepen.io/wenbin5243/pen/tcAeJ" target="_blank" rel="external">http://codepen.io/wenbin5243/pen/tcAeJ</a><br><a href="http://www.smashingmagazine.com/wp-content/uploads/uploader/images/css3-designs/css3-rubiks-cube/index.html" target="_blank" rel="external">http://www.smashingmagazine.com/wp-content/uploads/uploader/images/css3-designs/css3-rubiks-cube/index.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://svejkgames.com/blog/post/create-your-own-rubiks-cube/" target="_blank" rel="external">http://svejkgames.com/blog/post/cre]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[iframe not rendering in ie9 mode]]></title>
    <link href="http://blog.gyf1.com/2015/01/28/iframe-not-rendering-in-ie9-mode/"/>
    <id>http://blog.gyf1.com/2015/01/28/iframe-not-rendering-in-ie9-mode/</id>
    <published>2015-01-28T09:33:30.000Z</published>
    <updated>2015-01-28T09:42:27.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/12467151/iframe-not-rendering-in-ie9-mode-when-containing-page-is-in-quirks-mode" target="_blank" rel="external">http://stackoverflow.com/questions/12467151/iframe-not-rendering-in-ie9-mode-when-containing-page-is-in-quirks-mode</a><br><a href="http://community.sitepoint.com/t/ie9-iframes-doctypes-and-you/7225" target="_blank" rel="external">http://community.sitepoint.com/t/ie9-iframes-doctypes-and-you/7225</a><br><a href="http://zhidao.baidu.com/link?url=f5UXDlsJRftImuyCq-JVHJluV4VWaquUsMnmOep-0QvQfQW6LfQhGsnKnhoP0h0TxYRtNIEIgFd5xGL5VdUzuq" target="_blank" rel="external">http://zhidao.baidu.com/link?url=f5UXDlsJRftImuyCq-JVHJluV4VWaquUsMnmOep-0QvQfQW6LfQhGsnKnhoP0h0TxYRtNIEIgFd5xGL5VdUzuq</a><br><a href="http://stackoverflow.com/questions/1244788/embed-vs-object" target="_blank" rel="external">http://stackoverflow.com/questions/1244788/embed-vs-object</a><br><a href="http://stackoverflow.com/questions/12467151/iframe-not-rendering-in-ie9-mode-when-containing-page-is-in-quirks-mode" target="_blank" rel="external">http://stackoverflow.com/questions/12467151/iframe-not-rendering-in-ie9-mode-when-containing-page-is-in-quirks-mode</a><br><a href="https://social.msdn.microsoft.com/forums/ie/en-us/0bced61d-7f89-4204-a000-dcdd2253d2f1/not-rendering-iframe-under-ie9" target="_blank" rel="external">https://social.msdn.microsoft.com/forums/ie/en-us/0bced61d-7f89-4204-a000-dcdd2253d2f1/not-rendering-iframe-under-ie9</a><br><a href="http://stackoverflow.com/questions/5653523/ie9-iframe-display-issue-controls-not-rendering-until-refresh" target="_blank" rel="external">http://stackoverflow.com/questions/5653523/ie9-iframe-display-issue-controls-not-rendering-until-refresh</a><br><a href="http://aubreypwd.com/iframe-not-loading-properly-in-internet-explorer-9-fix/" target="_blank" rel="external">http://aubreypwd.com/iframe-not-loading-properly-in-internet-explorer-9-fix/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/12467151/iframe-not-rendering-in-ie9-mode-when-containing-page-is-in-quirks-mode" target="_bl]]>
    </summary>
    
      <category term="HTML" scheme="http://blog.gyf1.com/categories/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[browser difference list]]></title>
    <link href="http://blog.gyf1.com/2015/01/28/browser-difference-list/"/>
    <id>http://blog.gyf1.com/2015/01/28/browser-difference-list/</id>
    <published>2015-01-28T09:31:58.000Z</published>
    <updated>2015-01-28T09:32:49.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/1045830/dealing-with-firefox-and-internet-explorers-differences" target="_blank" rel="external">http://stackoverflow.com/questions/1045830/dealing-with-firefox-and-internet-explorers-differences</a><br><a href="http://www.smashingmagazine.com/2009/10/14/css-differences-in-internet-explorer-6-7-and-8/" target="_blank" rel="external">http://www.smashingmagazine.com/2009/10/14/css-differences-in-internet-explorer-6-7-and-8/</a><br><a href="http://stackoverflow.com/questions/1064594/what-are-the-best-practices-for-cross-browser-web-sites" target="_blank" rel="external">http://stackoverflow.com/questions/1064594/what-are-the-best-practices-for-cross-browser-web-sites</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/1045830/dealing-with-firefox-and-internet-explorers-differences" target="_blank" rel="externa]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Quirks Mode vs Standards Mode]]></title>
    <link href="http://blog.gyf1.com/2015/01/28/quirks-mode-vs-standards-mode/"/>
    <id>http://blog.gyf1.com/2015/01/28/quirks-mode-vs-standards-mode/</id>
    <published>2015-01-28T07:43:46.000Z</published>
    <updated>2015-01-28T07:47:03.000Z</updated>
    <content type="html"><![CDATA[<p>&#x517C;&#x5BB9;&#x6A21;&#x5F0F;&#x548C;&#x6807;&#x51C6;&#x6A21;&#x5F0F;</p>
<a id="more"></a>

<p><a href="http://www.aoao.org.cn/blog/2007/01/browser-mode/" target="_blank" rel="external">http://www.aoao.org.cn/blog/2007/01/browser-mode/</a><br><a href="http://younglab.blog.51cto.com/416652/264161/" target="_blank" rel="external">http://younglab.blog.51cto.com/416652/264161/</a><br><a href="https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode</a><br><a href="http://www.quirksmode.org/css/quirksmode.html" target="_blank" rel="external">http://www.quirksmode.org/css/quirksmode.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x517C;&#x5BB9;&#x6A21;&#x5F0F;&#x548C;&#x6807;&#x51C6;&#x6A21;&#x5F0F;</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Placeholder in IE9]]></title>
    <link href="http://blog.gyf1.com/2015/01/28/placeholder-in-ie9/"/>
    <id>http://blog.gyf1.com/2015/01/28/placeholder-in-ie9/</id>
    <published>2015-01-28T07:14:58.000Z</published>
    <updated>2015-01-28T07:16:22.000Z</updated>
    <content type="html"><![CDATA[<p>input&#x7684;placeholder&#x5728;ie9&#x4E0A;&#x6CA1;&#x6709;&#x663E;&#x793A;</p>
<a id="more"></a>

<p><a href="http://stackoverflow.com/questions/6366021/placeholder-in-ie9" target="_blank" rel="external">http://stackoverflow.com/questions/6366021/placeholder-in-ie9</a><br><a href="http://blog.163.com/yhwwen@126/blog/static/17046885320135915529172/" target="_blank" rel="external">http://blog.163.com/yhwwen@126/blog/static/17046885320135915529172/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>input&#x7684;placeholder&#x5728;ie9&#x4E0A;&#x6CA1;&#x6709;&#x663E;&#x793A;</p>
]]>
    
    </summary>
    
      <category term="HTML" scheme="http://blog.gyf1.com/categories/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[angular apply already in progress]]></title>
    <link href="http://blog.gyf1.com/2015/01/28/angular-apply-already-in-progress/"/>
    <id>http://blog.gyf1.com/2015/01/28/angular-apply-already-in-progress/</id>
    <published>2015-01-28T06:16:35.000Z</published>
    <updated>2015-01-28T06:18:15.000Z</updated>
    <content type="html"><![CDATA[<p>&#x89E3;&#x51B3;&#x65B9;&#x6CD5;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">safeApply</span><span class="params">(scope, fn)</span> {</span>
  <span class="keyword">var</span> phase = scope.<span class="variable">$root</span>.<span class="variable">$$phase</span>;
  <span class="keyword">if</span>(phase == <span class="string">&apos;$apply&apos;</span> || phase == <span class="string">&apos;$digest&apos;</span>)
    scope.<span class="variable">$eval</span>(fn);
  <span class="keyword">else</span>
    scope.<span class="variable">$apply</span>(fn);
}
</code></pre><p><a id="more"></a><br><a href="https://gist.github.com/siongui/4969449" target="_blank" rel="external">https://gist.github.com/siongui/4969449</a><br><a href="http://stackoverflow.com/questions/18626039/apply-already-in-progress-error" target="_blank" rel="external">http://stackoverflow.com/questions/18626039/apply-already-in-progress-error</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#x89E3;&#x51B3;&#x65B9;&#x6CD5;</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">safeApply</span><span class="params">(scope, fn)</span> {</span>
  <span class="keyword">var</span> phase = scope.<span class="variable">$root</span>.<span class="variable">$$phase</span>;
  <span class="keyword">if</span>(phase == <span class="string">&apos;$apply&apos;</span> || phase == <span class="string">&apos;$digest&apos;</span>)
    scope.<span class="variable">$eval</span>(fn);
  <span class="keyword">else</span>
    scope.<span class="variable">$apply</span>(fn);
}
</code></pre><p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://blog.gyf1.com/tags/angularjs/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[video editor online]]></title>
    <link href="http://blog.gyf1.com/2015/01/27/video-editor-online/"/>
    <id>http://blog.gyf1.com/2015/01/27/video-editor-online/</id>
    <published>2015-01-27T08:05:24.000Z</published>
    <updated>2015-01-27T09:01:12.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/22449285/video-editing-using-html-css-and-javascript" target="_blank" rel="external">http://stackoverflow.com/questions/22449285/video-editing-using-html-css-and-javascript</a><br><a href="https://popcorn.webmaker.org/" target="_blank" rel="external">https://popcorn.webmaker.org/</a><br><a href="https://github.com/casatt/html5-videoEditor" target="_blank" rel="external">https://github.com/casatt/html5-videoEditor</a><br><a href="https://github.com/mozilla/popcorn-js" target="_blank" rel="external">https://github.com/mozilla/popcorn-js</a><br><a href="https://github.com/bgrins/videoconverter.js" target="_blank" rel="external">https://github.com/bgrins/videoconverter.js</a><br><a href="https://github.com/DGIProject/VideoEditorJS" target="_blank" rel="external">https://github.com/DGIProject/VideoEditorJS</a><br><a href="http://www.videojs.com/" target="_blank" rel="external">http://www.videojs.com/</a><br><a href="https://github.com/videojs/video.js/" target="_blank" rel="external">https://github.com/videojs/video.js/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/22449285/video-editing-using-html-css-and-javascript" target="_blank" rel="external">http://s]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Closures in JavaScript]]></title>
    <link href="http://blog.gyf1.com/2015/01/25/closures-in-javascript/"/>
    <id>http://blog.gyf1.com/2015/01/25/closures-in-javascript/</id>
    <published>2015-01-25T06:22:55.000Z</published>
    <updated>2015-01-26T01:18:43.000Z</updated>
    <content type="html"><![CDATA[<p>By now, you probably know all about functions and all the fun functiony things that they do.<br>An important part of working with functions, with JavaScript, and (possibly) life in general is understanding the topic known as closures.<br>Closures touch upon a gray area where functions and variable scope intersect:</p>
<p><img src="http://www.kirupa.com/images/gray_area_72.png" alt="Closure"></p>
<p>Now, I am not going to say any more about closures, for this is something best explained by seeing code.<br>Any words I add right now to define or describe what closures are will only serve to confuse things.<br>In the following sections, we&#x2019;ll start off in familiar territory and then slowly venture into hostile areas where closures can be found.</p>
<p>Onwards!</p>
<a id="more"></a>

<h1 id="Functions_within_Functions">Functions within Functions</h1>
<p>The first thing we are going to do is really drill in on what happens when you have functions within functions&#x2026;and the inner function gets returned.<br>As part of that, let&#x2019;s do a quick review of functions.</p>
<p>Take a look at the following code:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">calculateRectangleArea</span><span class="params">(length, width)</span> {</span>
    <span class="keyword">return</span> length * width;
}

<span class="keyword">var</span> roomArea = calculateRectangleArea(<span class="number">10</span>, <span class="number">10</span>);
alert(roomArea);
</code></pre><p>The calculateRectangleArea function takes two arguments and returns the multiplied value of those arguments to whatever called it.<br>In this example, the &#x201C;whatever called it part&#x201D; is played by the roomArea variable.</p>
<p>After this code has run, the roomArea variable contains the result of multiplying 10 and 10&#x2026;which is simply 100:</p>
<p><img src="http://www.kirupa.com/images/function_value_72.png" alt="Closure"></p>
<p>As you know, what a function returns can pretty much be anything.<br>In this case, we returned a number.<br>You can very easily return some text (aka a String), the undefined value, a custom object, etc.<br>As long as the code that is calling the function knows what to do with what the function returns, you can do pretty much whatever you want.<br>You can even return another function. Let me rathole on this a bit.</p>
<p>Below is a very simple example of what I am talking about:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">youSayGoodBye</span><span class="params">()</span> {</span>

    alert(<span class="string">&quot;Good Bye!&quot;</span>);

    <span class="function"><span class="keyword">function</span> <span class="title">andISayHello</span><span class="params">()</span> {</span>
        alert(<span class="string">&quot;Hello!&quot;</span>);
    }

    <span class="keyword">return</span> andISayHello;
}
</code></pre><p>You can have functions that contain functions inside them.<br>In this example, we have our youSayGoodBye function that contains an alert and another function called andISayHello:</p>
<p><img src="http://www.kirupa.com/images/visualization_inner_72.png" alt="Closure"></p>
<p>The interesting part is what the youSayGoodBye function returns when it gets called. It returns the andISayHello function:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">youSayGoodBye</span><span class="params">()</span> {</span>

    alert(<span class="string">&quot;Good Bye!&quot;</span>);

    <span class="function"><span class="keyword">function</span> <span class="title">andISayHello</span><span class="params">()</span> {</span>
        alert(<span class="string">&quot;Hello!&quot;</span>);
    }

    <span class="keyword">return</span> andISayHello;
}
</code></pre><p>Let&#x2019;s go ahead and play this example out. To call this function, initialize a variable that points to youSayGoodBye:</p>
<pre><code><span class="attribute">var something </span>=<span class="string"> youSayGoodBye();</span>
</code></pre><p>The moment this line of code runs, all of the code inside your youSayGoodBye function will get run as well. This means, you will see a dialog (thanks to the alert) that says Good Bye!:</p>
<p><img src="http://www.kirupa.com/images/goodbye_72.png" alt="Closure"></p>
<p>As part of running to completion, the andISayHello function will be created and then returned as well.<br>At this point, your something variable only has eyes for one thing, and that thing is the andISayHello function:</p>
<p><img src="http://www.kirupa.com/images/var_something_72.png" alt="Closure"></p>
<p>The youSayGoodBye outer function, from the something variable&#x2019;s point of view, simply goes away.<br>Because the something variable now points to a function, you can invoke this function by just calling it using the open and close parentheses like you normally would:</p>
<pre><code><span class="attribute">var something </span>=<span class="string"> youSayGoodBye();
something();</span>
</code></pre><p>When you do this, the returned inner function (aka andISayHello) will execute.<br>Just like before, you will see a dialog appear, but this dialog will say Hello! - which is what the alert inside this function specified:</p>
<p><img src="http://www.kirupa.com/images/hello_72.png" alt="Closure"></p>
<p>All of this should be pretty straightforward and probably a review.<br>The only thing that you may have found new is realizing once a function returns a value, it is no longer around.<br>The only thing that remains is the returned value.</p>
<p>Ok, we are getting close to the promised hostile territory.<br>In the next section, we will extend what we&#x2019;ve just seen by taking a look at another example with a slight twist.</p>
<h1 id="When_the_Inner_Functions_Aren&#x2019;t_Self-Contained">When the Inner Functions Aren&#x2019;t Self-Contained</h1>
<p>In the previous example, your andISayHello inner function was self-contained and didn&#x2019;t rely on any variables or state from the outer function:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">youSayGoodBye</span><span class="params">()</span> {</span>

    alert(<span class="string">&quot;Good Bye!&quot;</span>);

    <span class="function"><span class="keyword">function</span> <span class="title">andISayHello</span><span class="params">()</span> {</span>
        alert(<span class="string">&quot;Hello!&quot;</span>);
    }

    <span class="keyword">return</span> andISayHello;
}
</code></pre><p>In many real scenarios, very rarely will you run into a case like this.<br>You&#x2019;ll often have variables and data that is shared between the outer function and the inner function.<br>To highlight this, take a look at the following:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">stopWatch</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();

    <span class="function"><span class="keyword">function</span> <span class="title">getDelay</span><span class="params">()</span> {</span>
        <span class="keyword">var</span> elapsedTime = <span class="built_in">Date</span>.now() - startTime;
        alert(elapsedTime);
    }

    <span class="keyword">return</span> getDelay;
}
</code></pre><p>This example shows a very simple way of measuring the time it takes to do something.<br>Inside the stopWatch function, you have a startTime variable that is set to the value of Date.now():</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">stopWatch</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();

    <span class="function"><span class="keyword">function</span> <span class="title">getDelay</span><span class="params">()</span> {</span>
        <span class="keyword">var</span> elapsedTime = <span class="built_in">Date</span>.now() - startTime;
        alert(elapsedTime);
    }

    <span class="keyword">return</span> getDelay;
}
</code></pre><p>You also have an inner function called getDelay:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">stopWatch</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();

    <span class="function"><span class="keyword">function</span> <span class="title">getDelay</span><span class="params">()</span> {</span>
        <span class="keyword">var</span> elapsedTime = <span class="built_in">Date</span>.now() - startTime;
        alert(elapsedTime);
    }

    <span class="keyword">return</span> getDelay;
}
</code></pre><p>The getDelay function displays a dialog containing the difference in time between a new call to Date.now() and the startTime variable declared earlier.</p>
<p>Getting back to the outer stopWatch function, the last thing that happens is that it returns the getDelay function before exiting.<br>As you can see, the code you see here is very similar to the earlier example.<br>You have an outer function, you have an inner function, and you have the outer function returning the inner function.</p>
<p>Now, to see the stopWatch function at work, add the following lines of code:</p>
<pre><code><span class="keyword">var</span> timer = stopWatch();

<span class="comment">// do something that takes some time</span>
<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) {
    <span class="keyword">var</span> foo = <span class="built_in">Math</span>.random() * <span class="number">10000</span>;
}

<span class="comment">// invoke the returned function</span>
timer();
</code></pre><p>If you run this example, you&#x2019;ll see a dialog displaying the number of milliseconds it took between your timer variable getting initialized,<br>your for loop running to completion, and the timer variable getting invoked as a function:</p>
<p><img src="http://www.kirupa.com/images/elapsed_time_72.png" alt="Closure"></p>
<p>Basically, you have a stopwatch that you invoke, run some long-running operation, and invoke again to see how long the long-running operation took place.</p>
<p>Now that you can see our little stopwatch example working, let&#x2019;s go back to the stopWatch function and see what exactly is going on.<br>Like I mentioned a few lines ago, a lot of what you see is similar to the youSayGoodBye / andISayHello example.<br>There is a twist that makes this example different, and the important part to note is what happens when the getDelay function is returned to the timer variable.</p>
<p>Here is an incomplete visualization of what this looks like:</p>
<p><img src="http://www.kirupa.com/images/timer_blah_72.png" alt="Closure"></p>
<p>The stopWatch outer function is no longer in play, and the timer variable is bound to the getDelay function.<br>Now, here is the twist. The getDelay function relies on the startTime variable that lives in the context of the outer stopWatch function:</p>
<p>&#x539F;&#x6587;&#xFF1A;<br><a href="http://www.kirupa.com/html5/closures_in_javascript.htm" target="_blank" rel="external">http://www.kirupa.com/html5/closures_in_javascript.htm</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>By now, you probably know all about functions and all the fun functiony things that they do.<br>An important part of working with functions, with JavaScript, and (possibly) life in general is understanding the topic known as closures.<br>Closures touch upon a gray area where functions and variable scope intersect:</p>
<p><img src="http://www.kirupa.com/images/gray_area_72.png" alt="Closure"></p>
<p>Now, I am not going to say any more about closures, for this is something best explained by seeing code.<br>Any words I add right now to define or describe what closures are will only serve to confuse things.<br>In the following sections, we&#x2019;ll start off in familiar territory and then slowly venture into hostile areas where closures can be found.</p>
<p>Onwards!</p>
]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS Style Guide]]></title>
    <link href="http://blog.gyf1.com/2015/01/23/angularjs-style-guide/"/>
    <id>http://blog.gyf1.com/2015/01/23/angularjs-style-guide/</id>
    <published>2015-01-23T15:12:58.000Z</published>
    <updated>2015-01-26T01:07:43.000Z</updated>
    <content type="html"><![CDATA[<p>Best practices for AngularJS</p>
<a id="more"></a>

<h1 id="AngularJS_Style_Guide">AngularJS Style Guide</h1>
<p><em>Opinionated AngularJS style guide for teams by <a href="//twitter.com/john_papa">@john_papa</a></em></p>
<p>If you are looking for an opinionated style guide for syntax, conventions, and structuring AngularJS applications, then step right in. These styles are based on my development experience with <a href="//angularjs.org">AngularJS</a>, presentations, <a href="http://pluralsight.com/training/Authors/Details/john-papa" target="_blank" rel="external">Pluralsight training courses</a> and working in teams.</p>
<p>The purpose of this style guide is to provide guidance on building AngularJS applications by showing the conventions I use and, more importantly, why I choose them.</p>
<blockquote>
<p>If you like this guide, check out my <a href="http://jpapa.me/ngclean" target="_blank" rel="external">AngularJS Patterns: Clean Code</a> course at Pluralsight.</p>
</blockquote>
<p>  <a href="http://jpapa.me/ngclean" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/johnpapa/angularjs-styleguide/master/assets/ng-clean-code-banner.png" alt="AngularJs Patterns: Clean Code"></a></p>
<h2 id="Community_Awesomeness_and_Credit">Community Awesomeness and Credit</h2>
<p>Never work in a vacuum. I find that the AngularJS community is an incredible group who are passionate about sharing experiences. As such, a friend and AngularJS expert Todd Motto and I have collaborated on many styles and conventions. We agree on most, and some we diverge. I encourage you to check out <a href="https://github.com/toddmotto/angularjs-styleguide" target="_blank" rel="external">Todd&#x2019;s guidelines</a> to get a sense for his approach and how it compares.</p>
<p>Many of my styles have been from the many pair programming sessions <a href="http://twitter.com/wardbell" target="_blank" rel="external">Ward Bell</a> and I have had. While we don&#x2019;t always agree, my friend Ward has certainly helped influence the ultimate evolution of this guide.</p>
<h2 id="See_the_Styles_in_a_Sample_App">See the Styles in a Sample App</h2>
<p>While this guide explains the <em>what</em>, <em>why</em> and <em>how</em>, I find it helpful to see them in practice. This guide is accompanied by a sample application that follows these styles and patterns. You can find the <a href="https://github.com/johnpapa/ng-demos" target="_blank" rel="external">sample application (named modular) here</a> in the <code>modular</code> folder. Feel free to grab it, clone it, or fork it. <a href="https://github.com/johnpapa/ng-demos/tree/master/modular" target="_blank" rel="external">Instructions on running it are in its readme</a>.</p>
<h2 id="Translations">Translations</h2>
<p><a href="https://github.com/johnpapa/angularjs-styleguide/tree/master/i18n" target="_blank" rel="external">Translations of this Angular style guide</a> are maintained by the community and can be found here.</p>
<h2 id="Table_of_Contents">Table of Contents</h2>
<ol>
<li><a href="#single-responsibility">Single Responsibility</a></li>
<li><a href="#iife">IIFE</a></li>
<li><a href="#modules">Modules</a></li>
<li><a href="#controllers">Controllers</a></li>
<li><a href="#services">Services</a></li>
<li><a href="#factories">Factories</a></li>
<li><a href="#data-services">Data Services</a></li>
<li><a href="#directives">Directives</a></li>
<li><a href="#resolving-promises-for-a-controller">Resolving Promises for a Controller</a></li>
<li><a href="#manual-annotating-for-dependency-injection">Manual Annotating for Dependency Injection</a></li>
<li><a href="#minification-and-annotation">Minification and Annotation</a></li>
<li><a href="#exception-handling">Exception Handling</a></li>
<li><a href="#naming">Naming</a></li>
<li><a href="#application-structure-lift-principle">Application Structure LIFT Principle</a></li>
<li><a href="#application-structure">Application Structure</a></li>
<li><a href="#modularity">Modularity</a></li>
<li><a href="#startup-logic">Startup Logic</a></li>
<li><a href="#angular--wrapper-services">Angular $ Wrapper Services</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#animations">Animations</a></li>
<li><a href="#comments">Comments</a></li>
<li><a href="#js-hint">JSHint</a></li>
<li><a href="#constants">Constants</a></li>
<li><a href="#file-templates-and-snippets">File Templates and Snippets</a></li>
<li><a href="#yeoman-generator">Yeoman Generator</a></li>
<li><a href="#routing">Routing</a></li>
<li><a href="#task-automation">Task Automation</a></li>
<li><a href="#angularjs-docs">AngularJS Docs</a></li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#license">License</a></li>
</ol>
<h2 id="Single_Responsibility">Single Responsibility</h2>
<h3 id="Rule_of_1">Rule of 1</h3>
<h6 id="[Style_Y001]">[Style <a href="#style-y001">Y001</a>]</h6>
<ul>
<li><p>Define 1 component per file.</p>
<p>The following example defines the <code>app</code> module and its dependencies, defines a controller, and defines a factory all in the same file.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>, [<span class="string">&apos;ngRoute&apos;</span>])
    .controller(<span class="string">&apos;SomeController&apos;</span>, SomeController)
    .factory(<span class="string">&apos;someFactory&apos;</span>, someFactory);

<span class="function"><span class="keyword">function</span> <span class="title">SomeController</span><span class="params">()</span> {</span> }

<span class="function"><span class="keyword">function</span> <span class="title">someFactory</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

<p>The same components are now separated into their own files.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// app.module.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>, [<span class="string">&apos;ngRoute&apos;</span>]);
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// someController.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;SomeController&apos;</span>, SomeController);

<span class="function"><span class="keyword">function</span> <span class="title">SomeController</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// someFactory.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .factory(<span class="string">&apos;someFactory&apos;</span>, someFactory);

<span class="function"><span class="keyword">function</span> <span class="title">someFactory</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="IIFE">IIFE</h2>
<h3 id="JavaScript_Closures">JavaScript Closures</h3>
<h6 id="[Style_Y010]">[Style <a href="#style-y010">Y010</a>]</h6>
<ul>
<li><p>Wrap AngularJS components in an Immediately Invoked Function Expression (IIFE).</p>
<p><em>Why?</em>: An IIFE removes variables from the global scope. This helps prevent variables and function declarations from living longer than expected in the global scope, which also helps avoid variable collisions.</p>
<p><em>Why?</em>: When your code is minified and bundled into a single file for deployment to a production server, you could have collisions of variables and many global variables. An IIFE protects you against both of these by providing variable scope for each file.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="comment">// logger.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .factory(<span class="string">&apos;logger&apos;</span>, logger);

<span class="comment">// logger function is added as a global variable</span>
<span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">()</span> {</span> }

<span class="comment">// storage.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .factory(<span class="string">&apos;storage&apos;</span>, storage);

<span class="comment">// storage function is added as a global variable</span>
<span class="function"><span class="keyword">function</span> <span class="title">storage</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 *
 * no globals are left behind
 */</span>

<span class="comment">// logger.js</span>
(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
<span class="pi">    &apos;use strict&apos;</span>;

    angular
        .module(<span class="string">&apos;app&apos;</span>)
        .factory(<span class="string">&apos;logger&apos;</span>, logger);

    <span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">()</span> {</span> }
})();

<span class="comment">// storage.js</span>
(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
<span class="pi">    &apos;use strict&apos;</span>;

    angular
        .module(<span class="string">&apos;app&apos;</span>)
        .factory(<span class="string">&apos;storage&apos;</span>, storage);

    <span class="function"><span class="keyword">function</span> <span class="title">storage</span><span class="params">()</span> {</span> }
})();
</pre></td></tr></table></figure>
</li>
<li><p>Note: For brevity only, the rest of the examples in this guide may omit the IIFE syntax.</p>
</li>
<li><p>Note: IIFE&#x2019;s prevent test code from reaching private members like regular expressions or helper functions which are often good to unit test directly on their own. However you can test these through accessible members or by exposing them through their own component. For example placing helper functions, regular expressions or constants in their own factory or constant.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Modules">Modules</h2>
<h3 id="Avoid_Naming_Collisions">Avoid Naming Collisions</h3>
<h6 id="[Style_Y020]">[Style <a href="#style-y020">Y020</a>]</h6>
<ul>
<li><p>Use unique naming conventions with separators for sub-modules.</p>
<p><em>Why?</em>: Unique names help avoid module name collisions. Separators help define modules and their submodule hierarchy. For example <code>app</code> may be your root module while <code>app.dashboard</code> and <code>app.users</code> may be modules that are used as dependencies of <code>app</code>.</p>
</li>
</ul>
<h3 id="Definitions_(aka_Setters)">Definitions (aka Setters)</h3>
<h6 id="[Style_Y021]">[Style <a href="#style-y021">Y021</a>]</h6>
<ul>
<li><p>Declare modules without a variable using the setter syntax.</p>
<p><em>Why?</em>: With 1 component per file, there is rarely a need to introduce a variable for the module.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="keyword">var</span> app = angular.module(<span class="string">&apos;app&apos;</span>, [
    <span class="string">&apos;ngAnimate&apos;</span>,
    <span class="string">&apos;ngRoute&apos;</span>,
    <span class="string">&apos;app.shared&apos;</span>,
    <span class="string">&apos;app.dashboard&apos;</span>
]);
</pre></td></tr></table></figure>

<p>Instead use the simple setter syntax.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>, [
        <span class="string">&apos;ngAnimate&apos;</span>,
        <span class="string">&apos;ngRoute&apos;</span>,
        <span class="string">&apos;app.shared&apos;</span>,
        <span class="string">&apos;app.dashboard&apos;</span>
    ]);
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Getters">Getters</h3>
<h6 id="[Style_Y022]">[Style <a href="#style-y022">Y022</a>]</h6>
<ul>
<li><p>When using a module, avoid using a variable and instead use chaining with the getter syntax.</p>
<p><em>Why?</em>: This produces more readable code and avoids variable collisions or leaks.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="keyword">var</span> app = angular.module(<span class="string">&apos;app&apos;</span>);
app.controller(<span class="string">&apos;SomeController&apos;</span>, SomeController);

<span class="function"><span class="keyword">function</span> <span class="title">SomeController</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;SomeController&apos;</span>, SomeController);

<span class="function"><span class="keyword">function</span> <span class="title">SomeController</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Setting_vs_Getting">Setting vs Getting</h3>
<h6 id="[Style_Y023]">[Style <a href="#style-y023">Y023</a>]</h6>
<ul>
<li><p>Only set once and get for all other instances.</p>
<p><em>Why?</em>: A module should only be created once, then retrieved from that point and after.</p>
<ul>
<li>Use <code>angular.module(&apos;app&apos;, []);</code> to set a module.</li>
<li>Use <code>angular.module(&apos;app&apos;);</code> to get a module.</li>
</ul>
</li>
</ul>
<h3 id="Named_vs_Anonymous_Functions">Named vs Anonymous Functions</h3>
<h6 id="[Style_Y024]">[Style <a href="#style-y024">Y024</a>]</h6>
<ul>
<li><p>Use named functions instead of passing an anonymous function in as a callback.</p>
<p><em>Why?</em>: This produces more readable code, is much easier to debug, and reduces the amount of nested callback code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Dashboard&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> })
    .factory(<span class="string">&apos;logger&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> });
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// dashboard.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Dashboard&apos;</span>, Dashboard);

<span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// logger.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .factory(<span class="string">&apos;logger&apos;</span>, logger);

<span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Controllers">Controllers</h2>
<h3 id="controllerAs_View_Syntax">controllerAs View Syntax</h3>
<h6 id="[Style_Y030]">[Style <a href="#style-y030">Y030</a>]</h6>
<ul>
<li><p>Use the <a href="http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/" target="_blank" rel="external"><code>controllerAs</code></a> syntax over the <code>classic controller with $scope</code> syntax.</p>
<p><em>Why?</em>: Controllers are constructed, &#x201C;newed&#x201D; up, and provide a single new instance, and the <code>controllerAs</code> syntax is closer to that of a JavaScript constructor than the <code>classic $scope syntax</code>.</p>
<p><em>Why?</em>: It promotes the use of binding to a &#x201C;dotted&#x201D; object in the View (e.g. <code>customer.name</code> instead of <code>name</code>), which is more contextual, easier to read, and avoids any reference issues that may occur without &#x201C;dotting&#x201D;.</p>
<p><em>Why?</em>: Helps avoid using <code>$parent</code> calls in Views with nested controllers.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- avoid --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">&quot;Customer&quot;</span>&gt;</span>
    
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- recommended --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">&quot;Customer as customer&quot;</span>&gt;</span>
    
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="controllerAs_Controller_Syntax">controllerAs Controller Syntax</h3>
<h6 id="[Style_Y031]">[Style <a href="#style-y031">Y031</a>]</h6>
<ul>
<li><p>Use the <code>controllerAs</code> syntax over the <code>classic controller with $scope</code> syntax.</p>
</li>
<li><p>The <code>controllerAs</code> syntax uses <code>this</code> inside controllers which gets bound to <code>$scope</code></p>
<p><em>Why?</em>: <code>controllerAs</code> is syntactic sugar over <code>$scope</code>. You can still bind to the View and still access <code>$scope</code> methods.</p>
<p><em>Why?</em>: Helps avoid the temptation of using <code>$scope</code> methods inside a controller when it may otherwise be better to avoid them or move them to a factory. Consider using <code>$scope</code> in a factory, or if in a controller just when needed. For example when publishing and subscribing events using <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit" target="_blank" rel="external"><code>$emit</code></a>, <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast" target="_blank" rel="external"><code>$broadcast</code></a>, or <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on" target="_blank" rel="external"><code>$on</code></a> consider moving these uses to a factory and invoke from the controller.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Customer</span><span class="params">($scope)</span> {</span>
    $scope.name = {};
    $scope.sendMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> };
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">/* recommended - but see next section */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Customer</span><span class="params">()</span> {</span>
    <span class="keyword">this</span>.name = {};
    <span class="keyword">this</span>.sendMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> };
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="controllerAs_with_vm">controllerAs with vm</h3>
<h6 id="[Style_Y032]">[Style <a href="#style-y032">Y032</a>]</h6>
<ul>
<li><p>Use a capture variable for <code>this</code> when using the <code>controllerAs</code> syntax. Choose a consistent variable name such as <code>vm</code>, which stands for ViewModel.</p>
<p><em>Why?</em>: The <code>this</code> keyword is contextual and when used within a function inside a controller may change its context. Capturing the context of <code>this</code> avoids encountering this problem.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Customer</span><span class="params">()</span> {</span>
    <span class="keyword">this</span>.name = {};
    <span class="keyword">this</span>.sendMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> };
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Customer</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.name = {};
    vm.sendMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span> };
}
</pre></td></tr></table></figure>

<p>Note: You can avoid any <a href="http://www.jshint.com/" target="_blank" rel="external">jshint</a> warnings by placing the comment below above the line of code. However it is not needed when the function is named using UpperCasing, as this convention means it is a constructor function, which is what a controller is in Angular.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* jshint validthis: true */</span>
<span class="keyword">var</span> vm = <span class="keyword">this</span>;
</pre></td></tr></table></figure>

<p>Note: When creating watches in a controller using <code>controller as</code>, you can watch the <code>vm.*</code> member using the following syntax. (Create watches with caution as they add more load to the digest cycle.)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">&quot;vm.title&quot;</span>/&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span><span class="params">($scope, $log)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.title = <span class="string">&apos;Some Title&apos;</span>;

    $scope.$watch(<span class="string">&apos;vm.title&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">(current, original)</span> {</span>
        $log.info(<span class="string">&apos;vm.title was %s&apos;</span>, original);
        $log.info(<span class="string">&apos;vm.title is now %s&apos;</span>, current);
    });
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Bindable_Members_Up_Top">Bindable Members Up Top</h3>
<h6 id="[Style_Y033]">[Style <a href="#style-y033">Y033</a>]</h6>
<ul>
<li><p>Place bindable members at the top of the controller, alphabetized, and not spread through the controller code.</p>
<p><em>Why?</em>: Placing bindable members at the top makes it easy to read and helps you instantly identify which members of the controller can be bound and used in the View.</p>
<p><em>Why?</em>: Setting anonymous functions in-line can be easy, but when those functions are more than 1 line of code they can reduce the readability. Defining the functions below the bindable members (the functions will be hoisted) moves the implementation details down, keeps the bindable members up top, and makes it easier to read.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Sessions</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;

    vm.gotoSession = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="comment">/* ... */</span>
    };
    vm.refresh = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="comment">/* ... */</span>
    };
    vm.search = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="comment">/* ... */</span>
    };
    vm.sessions = [];
    vm.title = <span class="string">&apos;Sessions&apos;</span>;
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Sessions</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;

    vm.gotoSession = gotoSession;
    vm.refresh = refresh;
    vm.search = search;
    vm.sessions = [];
    vm.title = <span class="string">&apos;Sessions&apos;</span>;

    <span class="comment">////////////</span>

    <span class="function"><span class="keyword">function</span> <span class="title">gotoSession</span><span class="params">()</span> {</span>
      <span class="comment">/* */</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">()</span> {</span>
      <span class="comment">/* */</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">()</span> {</span>
      <span class="comment">/* */</span>
    }
</pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/johnpapa/angularjs-styleguide/master/assets/above-the-fold-1.png" alt="Controller Using &#x22;Above the Fold&#x22;"></p>
<p>Note: If the function is a 1 liner consider keeping it right up top, as long as readability is not affected.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Sessions</span><span class="params">(data)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;

    vm.gotoSession = gotoSession;
    vm.refresh = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="comment">/**
         * lines
         * of
         * code
         * affects
         * readability
         */</span>
    };
    vm.search = search;
    vm.sessions = [];
    vm.title = <span class="string">&apos;Sessions&apos;</span>;
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Sessions</span><span class="params">(dataservice)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;

    vm.gotoSession = gotoSession;
    vm.refresh = dataservice.refresh; <span class="comment">// 1 liner is OK</span>
    vm.search = search;
    vm.sessions = [];
    vm.title = <span class="string">&apos;Sessions&apos;</span>;
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Function_Declarations_to_Hide_Implementation_Details">Function Declarations to Hide Implementation Details</h3>
<h6 id="[Style_Y034]">[Style <a href="#style-y034">Y034</a>]</h6>
<ul>
<li><p>Use function declarations to hide implementation details. Keep your bindable members up top. When you need to bind a function in a controller, point it to a function declaration that appears later in the file. This is tied directly to the section Bindable Members Up Top. For more details see <a href="http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code" target="_blank" rel="external">this post</a>.</p>
<p><em>Why?</em>: Placing bindable members at the top makes it easy to read and helps you instantly identify which members of the controller can be bound and used in the View. (Same as above.)</p>
<p><em>Why?</em>: Placing the implementation details of a function later in the file moves that complexity out of view so you can see the important stuff up top.</p>
<p><em>Why?</em>: Function declaration are hoisted so there are no concerns over using a function before it is defined (as there would be with function expressions).</p>
<p><em>Why?</em>: You never have to worry with function declarations that moving <code>var a</code> before <code>var b</code> will break your code because <code>a</code> depends on <code>b</code>.</p>
<p><em>Why?</em>: Order is critical with function expressions</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">/**
 * avoid
 * Using function expressions.
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(dataservice, logger)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.avengers = [];
    vm.title = <span class="string">&apos;Avengers&apos;</span>;

    <span class="keyword">var</span> activate = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            logger.info(<span class="string">&apos;Activated Avengers View&apos;</span>);
        });
    }

    <span class="keyword">var</span> getAvengers = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
            vm.avengers = data;
            <span class="keyword">return</span> vm.avengers;
        });
    }

    vm.getAvengers = getAvengers;

    activate();
}
</pre></td></tr></table></figure>

<p>Notice that the important stuff is scattered in the preceding example. In the example below, notice that the important stuff is up top. For example, the members bound to the controller such as <code>vm.avengers</code> and <code>vm.title</code>. The implementation details are down below. This is just easier to read.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">/*
 * recommend
 * Using function declarations
 * and bindable members up top.
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(dataservice, logger)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.avengers = [];
    vm.getAvengers = getAvengers;
    vm.title = <span class="string">&apos;Avengers&apos;</span>;

    activate();

    <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            logger.info(<span class="string">&apos;Activated Avengers View&apos;</span>);
        });
    }

    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
            vm.avengers = data;
            <span class="keyword">return</span> vm.avengers;
        });
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Defer_Controller_Logic">Defer Controller Logic</h3>
<h6 id="[Style_Y035]">[Style <a href="#style-y035">Y035</a>]</h6>
<ul>
<li><p>Defer logic in a controller by delegating to services and factories.</p>
<p><em>Why?</em>: Logic may be reused by multiple controllers when placed within a service and exposed via a function.</p>
<p><em>Why?</em>: Logic in a service can more easily be isolated in a unit test, while the calling logic in the controller can be easily mocked.</p>
<p><em>Why?</em>: Removes dependencies and hides implementation details from the controller.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre>
  <span class="comment">/* avoid */</span>
  <span class="function"><span class="keyword">function</span> <span class="title">Order</span><span class="params">($http, $q, config, userInfo)</span> {</span>
      <span class="keyword">var</span> vm = <span class="keyword">this</span>;
      vm.checkCredit = checkCredit;
      vm.isCreditOk;
      vm.total = <span class="number">0</span>;

      <span class="function"><span class="keyword">function</span> <span class="title">checkCredit</span><span class="params">()</span> {</span>
          <span class="keyword">var</span> settings = {};
          <span class="comment">// Get the credit service base URL from config</span>
          <span class="comment">// Set credit service required headers</span>
          <span class="comment">// Prepare URL query string or data object with request data</span>
          <span class="comment">// Add user-identifying info so service gets the right credit limit for this user.</span>
          <span class="comment">// Use JSONP for this browser if it doesn&apos;t support CORS</span>
          <span class="keyword">return</span> $http.get(settings)
              .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
               <span class="comment">// Unpack JSON data in the response object</span>
                 <span class="comment">// to find maxRemainingAmount</span>
                 vm.isCreditOk = vm.total &lt;= maxRemainingAmount
              })
              .catch(<span class="function"><span class="keyword">function</span><span class="params">(error)</span> {</span>
                 <span class="comment">// Interpret error</span>
                 <span class="comment">// Cope w/ timeout? retry? try alternate service?</span>
                 <span class="comment">// Re-reject with appropriate error for a user to see</span>
              });
      };
  }
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Order</span><span class="params">(creditService)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.checkCredit = checkCredit;
    vm.isCreditOk;
    vm.total = <span class="number">0</span>;

    <span class="function"><span class="keyword">function</span> <span class="title">checkCredit</span><span class="params">()</span> {</span>
       <span class="keyword">return</span> creditService.isOrderTotalOk(vm.total)
    .then(<span class="function"><span class="keyword">function</span><span class="params">(isOk)</span> {</span> vm.isCreditOk = isOk; })
          .catch(showServiceError);
    };
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Keep_Controllers_Focused">Keep Controllers Focused</h3>
<h6 id="[Style_Y037]">[Style <a href="#style-y037">Y037</a>]</h6>
<ul>
<li><p>Define a controller for a view, and try not to reuse the controller for other views. Instead, move reusable logic to factories and keep the controller simple and focused on its view.</p>
<p><em>Why?</em>: Reusing controllers with several views is brittle and good end to end (e2e) test coverage is required to ensure stability across large applications.</p>
</li>
</ul>
<h3 id="Assigning_Controllers">Assigning Controllers</h3>
<h6 id="[Style_Y038]">[Style <a href="#style-y038">Y038</a>]</h6>
<ul>
<li><p>When a controller must be paired with a view and either component may be re-used by other controllers or views, define controllers along with their routes.</p>
<p>Note: If a View is loaded via another means besides a route, then use the <code>ng-controller=&quot;Avengers as vm&quot;</code> syntax.</p>
<p><em>Why?</em>: Pairing the controller in the route allows different routes to invoke different pairs of controllers and views. When controllers are assigned in the view using <a href="https://docs.angularjs.org/api/ng/directive/ngController" target="_blank" rel="external"><code>ng-controller</code></a>, that view is always associated with the same controller.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">/* avoid - when using with a route and dynamic pairing is desired */</span>

<span class="comment">// route-config.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .config(config);

<span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">($routeProvider)</span> {</span>
    $routeProvider
        .when(<span class="string">&apos;/avengers&apos;</span>, {
          templateUrl: <span class="string">&apos;avengers.html&apos;</span>
        });
}
</pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- avengers.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">&quot;Avengers as vm&quot;</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// route-config.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .config(config);

<span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">($routeProvider)</span> {</span>
    $routeProvider
        .when(<span class="string">&apos;/avengers&apos;</span>, {
            templateUrl: <span class="string">&apos;avengers.html&apos;</span>,
            controller: <span class="string">&apos;Avengers&apos;</span>,
            controllerAs: <span class="string">&apos;vm&apos;</span>
        });
}
</pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- avengers.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Services">Services</h2>
<h3 id="Singletons">Singletons</h3>
<h6 id="[Style_Y040]">[Style <a href="#style-y040">Y040</a>]</h6>
<ul>
<li><p>Services are instantiated with the <code>new</code> keyword, use <code>this</code> for public methods and variables. Since these are so similar to factories, use a factory instead for consistency.</p>
<p>Note: <a href="https://docs.angularjs.org/guide/services" target="_blank" rel="external">All AngularJS services are singletons</a>. This means that there is only one instance of a given service per injector.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// service</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .service(<span class="string">&apos;logger&apos;</span>, logger);

<span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">()</span> {</span>
  <span class="keyword">this</span>.logError = <span class="function"><span class="keyword">function</span><span class="params">(msg)</span> {</span>
    <span class="comment">/* */</span>
  };
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">// factory</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .factory(<span class="string">&apos;logger&apos;</span>, logger);

<span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> {
        logError: <span class="function"><span class="keyword">function</span><span class="params">(msg)</span> {</span>
          <span class="comment">/* */</span>
        }
   };
}
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Factories">Factories</h2>
<h3 id="Single_Responsibility-1">Single Responsibility</h3>
<h6 id="[Style_Y050]">[Style <a href="#style-y050">Y050</a>]</h6>
<ul>
<li>Factories should have a <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="external">single responsibility</a>, that is encapsulated by its context. Once a factory begins to exceed that singular purpose, a new factory should be created.</li>
</ul>
<h3 id="Singletons-1">Singletons</h3>
<h6 id="[Style_Y051]">[Style <a href="#style-y051">Y051</a>]</h6>
<ul>
<li><p>Factories are singletons and return an object that contains the members of the service.</p>
<p>Note: <a href="https://docs.angularjs.org/guide/services" target="_blank" rel="external">All AngularJS services are singletons</a>.</p>
</li>
</ul>
<h3 id="Accessible_Members_Up_Top">Accessible Members Up Top</h3>
<h6 id="[Style_Y052]">[Style <a href="#style-y052">Y052</a>]</h6>
<ul>
<li><p>Expose the callable members of the service (it&#x2019;s interface) at the top, using a technique derived from the <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="external">Revealing Module Pattern</a>.</p>
<p><em>Why?</em>: Placing the callable members at the top makes it easy to read and helps you instantly identify which members of the service can be called and must be unit tested (and/or mocked).</p>
<p><em>Why?</em>: This is especially helpful when the file gets longer as it helps avoid the need to scroll to see what is exposed.</p>
<p><em>Why?</em>: Setting functions as you go can be easy, but when those functions are more than 1 line of code they can reduce the readability and cause more scrolling. Defining the callable interface via the returned service moves the implementation details down, keeps the callable interface up top, and makes it easier to read.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="function"><span class="keyword">function</span> <span class="title">dataService</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> someValue = <span class="string">&apos;&apos;</span>;
  <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> {</span>
    <span class="comment">/* */</span>
  };
  <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">()</span> {</span>
    <span class="comment">/* */</span>
  };

  <span class="keyword">return</span> {
      save: save,
      someValue: someValue,
      validate: validate
  };
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">dataService</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> someValue = <span class="string">&apos;&apos;</span>;
    <span class="keyword">var</span> service = {
        save: save,
        someValue: someValue,
        validate: validate
    };
    <span class="keyword">return</span> service;

    <span class="comment">////////////</span>

    <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> {</span>
        <span class="comment">/* */</span>
    };

    <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">()</span> {</span>
        <span class="comment">/* */</span>
    };
}
</pre></td></tr></table></figure>

<p>This way bindings are mirrored across the host object, primitive values cannot update alone using the revealing module pattern</p>
<p><img src="https://raw.githubusercontent.com/johnpapa/angularjs-styleguide/master/assets/above-the-fold-2.png" alt="Factories Using &#x22;Above the Fold&#x22;"></p>
</li>
</ul>
<h3 id="Function_Declarations_to_Hide_Implementation_Details-1">Function Declarations to Hide Implementation Details</h3>
<h6 id="[Style_Y053]">[Style <a href="#style-y053">Y053</a>]</h6>
<ul>
<li><p>Use function declarations to hide implementation details. Keep your accessible members of the factory up top. Point those to function declarations that appears later in the file. For more details see <a href="http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code" target="_blank" rel="external">this post</a>.</p>
<p><em>Why?</em>: Placing accessible members at the top makes it easy to read and helps you instantly identify which functions of the factory you can access externally.</p>
<p><em>Why?</em>: Placing the implementation details of a function later in the file moves that complexity out of view so you can see the important stuff up top.</p>
<p><em>Why?</em>: Function declaration are hoisted so there are no concerns over using a function before it is defined (as there would be with function expressions).</p>
<p><em>Why?</em>: You never have to worry with function declarations that moving <code>var a</code> before <code>var b</code> will break your code because <code>a</code> depends on <code>b</code>.</p>
<p><em>Why?</em>: Order is critical with function expressions</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">/**
 * avoid
 * Using function expressions
 */</span>
 <span class="function"><span class="keyword">function</span> <span class="title">dataservice</span><span class="params">($http, $location, $q, exception, logger)</span> {</span>
    <span class="keyword">var</span> isPrimed = <span class="literal">false</span>;
    <span class="keyword">var</span> primePromise;

    <span class="keyword">var</span> getAvengers = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="comment">// implementation details go here</span>
    };

    <span class="keyword">var</span> getAvengerCount = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="comment">// implementation details go here</span>
    };

    <span class="keyword">var</span> getAvengersCast = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
       <span class="comment">// implementation details go here</span>
    };

    <span class="keyword">var</span> prime = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
       <span class="comment">// implementation details go here</span>
    };

    <span class="keyword">var</span> ready = <span class="function"><span class="keyword">function</span><span class="params">(nextPromises)</span> {</span>
        <span class="comment">// implementation details go here</span>
    };

    <span class="keyword">var</span> service = {
        getAvengersCast: getAvengersCast,
        getAvengerCount: getAvengerCount,
        getAvengers: getAvengers,
        ready: ready
    };

    <span class="keyword">return</span> service;
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 * Using function declarations
 * and accessible members up top.
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">dataservice</span><span class="params">($http, $location, $q, exception, logger)</span> {</span>
    <span class="keyword">var</span> isPrimed = <span class="literal">false</span>;
    <span class="keyword">var</span> primePromise;

    <span class="keyword">var</span> service = {
        getAvengersCast: getAvengersCast,
        getAvengerCount: getAvengerCount,
        getAvengers: getAvengers,
        ready: ready
    };

    <span class="keyword">return</span> service;

    <span class="comment">////////////</span>

    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span><span class="params">()</span> {</span>
        <span class="comment">// implementation details go here</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">getAvengerCount</span><span class="params">()</span> {</span>
        <span class="comment">// implementation details go here</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">getAvengersCast</span><span class="params">()</span> {</span>
        <span class="comment">// implementation details go here</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">prime</span><span class="params">()</span> {</span>
        <span class="comment">// implementation details go here</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">ready</span><span class="params">(nextPromises)</span> {</span>
        <span class="comment">// implementation details go here</span>
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Data_Services">Data Services</h2>
<h3 id="Separate_Data_Calls">Separate Data Calls</h3>
<h6 id="[Style_Y060]">[Style <a href="#style-y060">Y060</a>]</h6>
<ul>
<li><p>Refactor logic for making data operations and interacting with data to a factory. Make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.</p>
<p><em>Why?</em>: The controller&#x2019;s responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the controller be simpler and more focused on the view.</p>
<p><em>Why?</em>: This makes it easier to test (mock or real) the data calls when testing a controller that uses a data service.</p>
<p><em>Why?</em>: Data service implementation may have very specific code to handle the data repository. This may include headers, how to talk to the data, or other services such as $http. Separating the logic into a data service encapsulates this logic in a single place hiding the implementation from the outside consumers (perhaps a controller), also making it easier to change the implementation.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// dataservice factory</span>
angular
    .module(<span class="string">&apos;app.core&apos;</span>)
    .factory(<span class="string">&apos;dataservice&apos;</span>, dataservice);

dataservice.$inject = [<span class="string">&apos;$http&apos;</span>, <span class="string">&apos;logger&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">dataservice</span><span class="params">($http, logger)</span> {</span>
    <span class="keyword">return</span> {
        getAvengers: getAvengers
    };

    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> $http.get(<span class="string">&apos;/api/maa&apos;</span>)
            .then(getAvengersComplete)
            .catch(getAvengersFailed);

        <span class="function"><span class="keyword">function</span> <span class="title">getAvengersComplete</span><span class="params">(response)</span> {</span>
            <span class="keyword">return</span> response.data.results;
        }

        <span class="function"><span class="keyword">function</span> <span class="title">getAvengersFailed</span><span class="params">(error)</span> {</span>
            logger.error(<span class="string">&apos;XHR Failed for getAvengers.&apos;</span> + error.data);
        }
    }
}
</pre></td></tr></table></figure>

<p>Note: The data service is called from consumers, such as a controller, hiding the implementation from the consumers, as shown below.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

<span class="comment">// controller calling the dataservice factory</span>
angular
    .module(<span class="string">&apos;app.avengers&apos;</span>)
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

Avengers.$inject = [<span class="string">&apos;dataservice&apos;</span>, <span class="string">&apos;logger&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(dataservice, logger)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.avengers = [];

    activate();

    <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
            logger.info(<span class="string">&apos;Activated Avengers View&apos;</span>);
        });
    }

    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> dataservice.getAvengers()
            .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
                vm.avengers = data;
                <span class="keyword">return</span> vm.avengers;
            });
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Return_a_Promise_from_Data_Calls">Return a Promise from Data Calls</h3>
<h6 id="[Style_Y061]">[Style <a href="#style-y061">Y061</a>]</h6>
<ul>
<li><p>When calling a data service that returns a promise such as $http, return a promise in your calling function too.</p>
<p><em>Why?</em>: You can chain the promises together and take further action after the data call completes and resolves or rejects the promise.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>

activate();

<span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span> {</span>
    <span class="comment">/**
     * Step 1
     * Ask the getAvengers function for the
     * avenger data and wait for the promise
     */</span>
    <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="comment">/**
         * Step 4
         * Perform an action on resolve of final promise
         */</span>
        logger.info(<span class="string">&apos;Activated Avengers View&apos;</span>);
    });
}

<span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span><span class="params">()</span> {</span>
      <span class="comment">/**
       * Step 2
       * Ask the data service for the data and wait
       * for the promise
       */</span>
      <span class="keyword">return</span> dataservice.getAvengers()
          .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
              <span class="comment">/**
               * Step 3
               * set the data and resolve the promise
               */</span>
              vm.avengers = data;
              <span class="keyword">return</span> vm.avengers;
      });
}
</pre></td></tr></table></figure>

<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
</li>
</ul>
<h2 id="Directives">Directives</h2>
<h3 id="Limit_1_Per_File">Limit 1 Per File</h3>
<h6 id="[Style_Y070]">[Style <a href="#style-y070">Y070</a>]</h6>
<ul>
<li><p>Create one directive per file. Name the file for the directive.</p>
<p><em>Why?</em>: It is easy to mash all the directives in one file, but difficult to then break those out so some are shared across apps, some across modules, some just for one module.</p>
<p><em>Why?</em>: One directive per file is easy to maintain.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="comment">/* directives.js */</span>

angular
    .module(<span class="string">&apos;app.widgets&apos;</span>)

    <span class="comment">/* order directive that is specific to the order module */</span>
    .directive(<span class="string">&apos;orderCalendarRange&apos;</span>, orderCalendarRange)

    <span class="comment">/* sales directive that can be used anywhere across the sales app */</span>
    .directive(<span class="string">&apos;salesCustomerInfo&apos;</span>, salesCustomerInfo)

    <span class="comment">/* spinner directive that can be used anywhere across apps */</span>
    .directive(<span class="string">&apos;sharedSpinner&apos;</span>, sharedSpinner);

<span class="function"><span class="keyword">function</span> <span class="title">orderCalendarRange</span><span class="params">()</span> {</span>
    <span class="comment">/* implementation details */</span>
}

<span class="function"><span class="keyword">function</span> <span class="title">salesCustomerInfo</span><span class="params">()</span> {</span>
    <span class="comment">/* implementation details */</span>
}

<span class="function"><span class="keyword">function</span> <span class="title">sharedSpinner</span><span class="params">()</span> {</span>
    <span class="comment">/* implementation details */</span>
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="comment">/* calendarRange.directive.js */</span>

<span class="comment">/**
 * @desc order directive that is specific to the order module at a company named Acme
 * @example &lt;div acme-order-calendar-range&gt;&lt;/div&gt;
 */</span>
angular
    .module(<span class="string">&apos;sales.order&apos;</span>)
    .directive(<span class="string">&apos;acmeOrderCalendarRange&apos;</span>, orderCalendarRange);

<span class="function"><span class="keyword">function</span> <span class="title">orderCalendarRange</span><span class="params">()</span> {</span>
    <span class="comment">/* implementation details */</span>
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="comment">/* customerInfo.directive.js */</span>

<span class="comment">/**
 * @desc spinner directive that can be used anywhere across the sales app at a company named Acme
 * @example &lt;div acme-sales-customer-info&gt;&lt;/div&gt;
 */</span>
angular
    .module(<span class="string">&apos;sales.widgets&apos;</span>)
    .directive(<span class="string">&apos;acmeSalesCustomerInfo&apos;</span>, salesCustomerInfo);

<span class="function"><span class="keyword">function</span> <span class="title">salesCustomerInfo</span><span class="params">()</span> {</span>
    <span class="comment">/* implementation details */</span>
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="comment">/* spinner.directive.js */</span>

<span class="comment">/**
 * @desc spinner directive that can be used anywhere across apps at a company named Acme
 * @example &lt;div acme-shared-spinner&gt;&lt;/div&gt;
 */</span>
angular
    .module(<span class="string">&apos;shared.widgets&apos;</span>)
    .directive(<span class="string">&apos;acmeSharedSpinner&apos;</span>, sharedSpinner);

<span class="function"><span class="keyword">function</span> <span class="title">sharedSpinner</span><span class="params">()</span> {</span>
    <span class="comment">/* implementation details */</span>
}
</pre></td></tr></table></figure>

<p>Note: There are many naming options for directives, especially since they can be used in narrow or wide scopes. Choose one that makes the directive and it&#x2019;s file name distinct and clear. Some examples are below, but see the naming section for more recommendations.</p>
</li>
</ul>
<h3 id="Manipulate_DOM_in_a_Directive">Manipulate DOM in a Directive</h3>
<h6 id="[Style_Y072]">[Style <a href="#style-y072">Y072</a>]</h6>
<ul>
<li><p>When manipulating the DOM directly, use a directive. If alternative ways can be used such as using CSS to set styles or the <a href="https://docs.angularjs.org/api/ngAnimate" target="_blank" rel="external">animation services</a>, Angular templating, <a href="https://docs.angularjs.org/api/ng/directive/ngShow" target="_blank" rel="external"><code>ngShow</code></a> or <a href="https://docs.angularjs.org/api/ng/directive/ngHide" target="_blank" rel="external"><code>ngHide</code></a>, then use those instead. For example, if the directive simply hides and shows, use ngHide/ngShow.</p>
<p><em>Why?</em>: DOM manipulation can be difficult to test, debug, and there are often better ways (e.g. CSS, animations, templates)</p>
</li>
</ul>
<h3 id="Provide_a_Unique_Directive_Prefix">Provide a Unique Directive Prefix</h3>
<h6 id="[Style_Y073]">[Style <a href="#style-y073">Y073</a>]</h6>
<ul>
<li><p>Provide a short, unique and descriptive directive prefix such as <code>acmeSalesCustomerInfo</code> which is declared in HTML as <code>acme-sales-customer-info</code>.</p>
<p><em>Why?</em>: The unique short prefix identifies the directive&#x2019;s context and origin. For example a prefix of <code>cc-</code> may indicate that the directive is part of a CodeCamper app while <code>acme-</code> may indicate a directive for the Acme company.</p>
<p>Note: Avoid <code>ng-</code> as these are reserved for AngularJS directives. Research widely used directives to avoid naming conflicts, such as <code>ion-</code> for the <a href="http://ionicframework.com/" target="_blank" rel="external">Ionic Framework</a>.</p>
</li>
</ul>
<h3 id="Restrict_to_Elements_and_Attributes">Restrict to Elements and Attributes</h3>
<h6 id="[Style_Y074]">[Style <a href="#style-y074">Y074</a>]</h6>
<ul>
<li><p>When creating a directive that makes sense as a stand-alone element, allow restrict <code>E</code> (custom element) and optionally restrict <code>A</code> (custom attribute). Generally, if it could be its own control, <code>E</code> is appropriate. General guideline is allow <code>EA</code> but lean towards implementing as an element when its stand-alone and as an attribute when it enhances its existing DOM element.</p>
<p><em>Why?</em>: It makes sense.</p>
<p><em>Why?</em>: While we can allow the directive to be used as a class, if the directive is truly acting as an element it makes more sense as an element or at least as an attribute.</p>
<p>Note: EA is the default for AngularJS 1.3 +</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- avoid --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">&quot;my-calendar-range&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
angular
    .module(<span class="string">&apos;app.widgets&apos;</span>)
    .directive(<span class="string">&apos;myCalendarRange&apos;</span>, myCalendarRange);

<span class="function"><span class="keyword">function</span> <span class="title">myCalendarRange</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> directive = {
        link: link,
        templateUrl: <span class="string">&apos;/template/is/located/here.html&apos;</span>,
        restrict: <span class="string">&apos;C&apos;</span>
    };
    <span class="keyword">return</span> directive;

    <span class="function"><span class="keyword">function</span> <span class="title">link</span><span class="params">(scope, element, attrs)</span> {</span>
      <span class="comment">/* */</span>
    }
}
</pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- recommended --&gt;</span>
<span class="tag">&lt;<span class="title">my-calendar-range</span>&gt;</span><span class="tag">&lt;/<span class="title">my-calendar-range</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">my-calendar-range</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
angular
    .module(<span class="string">&apos;app.widgets&apos;</span>)
    .directive(<span class="string">&apos;myCalendarRange&apos;</span>, myCalendarRange);

<span class="function"><span class="keyword">function</span> <span class="title">myCalendarRange</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> directive = {
        link: link,
        templateUrl: <span class="string">&apos;/template/is/located/here.html&apos;</span>,
        restrict: <span class="string">&apos;EA&apos;</span>
    };
    <span class="keyword">return</span> directive;

    <span class="function"><span class="keyword">function</span> <span class="title">link</span><span class="params">(scope, element, attrs)</span> {</span>
      <span class="comment">/* */</span>
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Directives_and_ControllerAs">Directives and ControllerAs</h3>
<h6 id="[Style_Y075]">[Style <a href="#style-y075">Y075</a>]</h6>
<ul>
<li><p>Use <code>controller as</code> syntax with a directive to be consistent with using <code>controller as</code> with view and controller pairings.</p>
<p><em>Why?</em>: It makes sense and it&#x2019;s not difficult.</p>
<p>Note: The directive below demonstrates some of the ways you can use scope inside of link and directive controllers, using controllerAs. I in-lined the template just to keep it all in one place.</p>
<p>Note: Regarding dependency injection, see <a href="#manual-annotating-for-dependency-injection">Manually Identify Dependencies</a>.</p>
<p>Note: Note that the directive&#x2019;s controller is outside the directive&#x2019;s closure. This style eliminates issues where the injection gets created as unreachable code after a <code>return</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">my-example</span> <span class="attribute">max</span>=<span class="value">&quot;77&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre>angular
    .module(<span class="string">&apos;app&apos;</span>)
    .directive(<span class="string">&apos;myExample&apos;</span>, myExample);

<span class="function"><span class="keyword">function</span> <span class="title">myExample</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> directive = {
        restrict: <span class="string">&apos;EA&apos;</span>,
        templateUrl: <span class="string">&apos;app/feature/example.directive.html&apos;</span>,
        scope: {
            max: <span class="string">&apos;=&apos;</span>
        },
        link: linkFunc,
        controller: ExampleController,
          controllerAs: <span class="string">&apos;vm&apos;</span>,
          bindToController: <span class="literal">true</span> <span class="comment">// because the scope is isolated</span>
      };

    <span class="keyword">return</span> directive;

    <span class="function"><span class="keyword">function</span> <span class="title">linkFunc</span><span class="params">(scope, el, attr, ctrl)</span> {</span>
        console.log(<span class="string">&apos;LINK: scope.min = %s *** should be undefined&apos;</span>, scope.min);
        console.log(<span class="string">&apos;LINK: scope.max = %s *** should be undefined&apos;</span>, scope.max);
        console.log(<span class="string">&apos;LINK: scope.vm.min = %s&apos;</span>, scope.vm.min);
        console.log(<span class="string">&apos;LINK: scope.vm.max = %s&apos;</span>, scope.vm.max);
    }
}

ExampleController.$inject = [<span class="string">&apos;$scope&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">ExampleController</span><span class="params">($scope)</span> {</span>
    <span class="comment">// Injecting $scope just for comparison</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;

    vm.min = <span class="number">3</span>;

    console.log(<span class="string">&apos;CTRL: $scope.vm.min = %s&apos;</span>, $scope.vm.min);
    console.log(<span class="string">&apos;CTRL: $scope.vm.max = %s&apos;</span>, $scope.vm.max);
    console.log(<span class="string">&apos;CTRL: vm.min = %s&apos;</span>, vm.min);
    console.log(<span class="string">&apos;CTRL: vm.max = %s&apos;</span>, vm.max);
}
</pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- example.directive.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>max=<span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">&quot;vm.max&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>min=<span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">&quot;vm.min&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h6 id="[Style_Y076]">[Style <a href="#style-y076">Y076</a>]</h6>
<ul>
<li><p>Use <code>bindToController = true</code> when using <code>controller as</code> syntax with a directive when you want to bind the outer scope to the directive&#x2019;s controller&#x2019;s scope.</p>
<p><em>Why?</em>: It makes it easy to bind outer scope to the directive&#x2019;s controller scope.</p>
<p>Note: <code>bindToController</code> was introduced in Angular 1.3.0.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">my-example</span> <span class="attribute">max</span>=<span class="value">&quot;77&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>angular
    .module(<span class="string">&apos;app&apos;</span>)
    .directive(<span class="string">&apos;myExample&apos;</span>, myExample);

<span class="function"><span class="keyword">function</span> <span class="title">myExample</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> directive = {
        restrict: <span class="string">&apos;EA&apos;</span>,
        templateUrl: <span class="string">&apos;app/feature/example.directive.html&apos;</span>,
        scope: {
            max: <span class="string">&apos;=&apos;</span>
        },
        controller: ExampleController,
          controllerAs: <span class="string">&apos;vm&apos;</span>,
          bindToController: <span class="literal">true</span>
      };

    <span class="keyword">return</span> directive;
}

<span class="function"><span class="keyword">function</span> <span class="title">ExampleController</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.min = <span class="number">3</span>;
    console.log(<span class="string">&apos;CTRL: vm.min = %s&apos;</span>, vm.min);
    console.log(<span class="string">&apos;CTRL: vm.max = %s&apos;</span>, vm.max);
}
</pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- example.directive.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>max=<span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">&quot;vm.max&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>min=<span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">&quot;vm.min&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Resolving_Promises_for_a_Controller">Resolving Promises for a Controller</h2>
<h3 id="Controller_Activation_Promises">Controller Activation Promises</h3>
<h6 id="[Style_Y080]">[Style <a href="#style-y080">Y080</a>]</h6>
<ul>
<li><p>Resolve start-up logic for a controller in an <code>activate</code> function.</p>
<p><em>Why?</em>: Placing start-up logic in a consistent place in the controller makes it easier to locate, more consistent to test, and helps avoid spreading out the activation logic across the controller.</p>
<p><em>Why?</em>: The controller <code>activate</code> makes it convenient to re-use the logic for a refresh for the controller/View, keeps the logic together, gets the user to the View faster, makes animations easy on the <code>ng-view</code> or <code>ui-view</code>, and feels snappier to the user.</p>
<p>Note: If you need to conditionally cancel the route before you start use the controller, use a <a href="#style-y081">route resolve</a> instead.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(dataservice)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.avengers = [];
    vm.title = <span class="string">&apos;Avengers&apos;</span>;

    dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
        vm.avengers = data;
        <span class="keyword">return</span> vm.avengers;
    });
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(dataservice)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.avengers = [];
    vm.title = <span class="string">&apos;Avengers&apos;</span>;

    activate();

    <span class="comment">////////////</span>

    <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
            vm.avengers = data;
            <span class="keyword">return</span> vm.avengers;
        });
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Route_Resolve_Promises">Route Resolve Promises</h3>
<h6 id="[Style_Y081]">[Style <a href="#style-y081">Y081</a>]</h6>
<ul>
<li><p>When a controller depends on a promise to be resolved before the controller is activated, resolve those dependencies in the <code>$routeProvider</code> before the controller logic is executed. If you need to conditionally cancel a route before the controller is activated, use a route resolver.</p>
</li>
<li><p>Use a route resolve when you want to decide to cancel the route before ever transitioning to the View.</p>
<p><em>Why?</em>: A controller may require data before it loads. That data may come from a promise via a custom factory or <a href="https://docs.angularjs.org/api/ng/service/$http" target="_blank" rel="external">$http</a>. Using a <a href="https://docs.angularjs.org/api/ngRoute/provider/$routeProvider" target="_blank" rel="external">route resolve</a> allows the promise to resolve before the controller logic executes, so it might take action based on that data from the promise.</p>
<p><em>Why?</em>: The code executes after the route and in the controller&#x2019;s activate function. The View starts to load right away. Data binding kicks in when the activate promise resolves. A &#x201C;busy&#x201D; animation can be shown during the view transition (via ng-view or ui-view)</p>
<p>Note: The code executes before the route via a promise. Rejecting the promise cancels the route. Resolve makes the new view wait for the route to resolve. A &#x201C;busy&#x201D; animation can be shown before the resolve and through the view transition. If you want to get to the View faster and do not require a checkpoint to decide if you can get to the View, consider the <a href="#style-y080">controller <code>activate</code> technique</a> instead.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(movieService)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    <span class="comment">// unresolved</span>
    vm.movies;
    <span class="comment">// resolved asynchronously</span>
    movieService.getMovies().then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> {</span>
        vm.movies = response.movies;
    });
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">/* better */</span>

<span class="comment">// route-config.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .config(config);

<span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">($routeProvider)</span> {</span>
    $routeProvider
        .when(<span class="string">&apos;/avengers&apos;</span>, {
            templateUrl: <span class="string">&apos;avengers.html&apos;</span>,
            controller: <span class="string">&apos;Avengers&apos;</span>,
            controllerAs: <span class="string">&apos;vm&apos;</span>,
            resolve: {
                moviesPrepService: <span class="function"><span class="keyword">function</span><span class="params">(movieService)</span> {</span>
                    <span class="keyword">return</span> movieService.getMovies();
                }
            }
        });
}

<span class="comment">// avengers.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

Avengers.$inject = [<span class="string">&apos;moviesPrepService&apos;</span>];
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(moviesPrepService)</span> {</span>
      <span class="keyword">var</span> vm = <span class="keyword">this</span>;
      vm.movies = moviesPrepService.movies;
}
</pre></td></tr></table></figure>

<p>Note: The example below shows the route resolve points to a named function, which is easier to debug and easier to handle dependency injection.</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="comment">/* even better */</span>

<span class="comment">// route-config.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .config(config);

<span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">($routeProvider)</span> {</span>
    $routeProvider
        .when(<span class="string">&apos;/avengers&apos;</span>, {
            templateUrl: <span class="string">&apos;avengers.html&apos;</span>,
            controller: <span class="string">&apos;Avengers&apos;</span>,
            controllerAs: <span class="string">&apos;vm&apos;</span>,
            resolve: {
                moviesPrepService: moviesPrepService
            }
        });
}

<span class="function"><span class="keyword">function</span> <span class="title">moviePrepService</span><span class="params">(movieService)</span> {</span>
    <span class="keyword">return</span> movieService.getMovies();
}

<span class="comment">// avengers.js</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

Avengers.$inject = [<span class="string">&apos;moviesPrepService&apos;</span>];
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(moviesPrepService)</span> {</span>
      <span class="keyword">var</span> vm = <span class="keyword">this</span>;
      vm.movies = moviesPrepService.movies;
}
</pre></td></tr></table></figure><br>Note: The code example&#x2019;s dependency on <code>movieService</code> is not minification safe on its own. For details on how to make this code minification safe, see the sections on <a href="#manual-annotating-for-dependency-injection">dependency injection</a> and on <a href="#minification-and-annotation">minification and annotation</a>.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Manual_Annotating_for_Dependency_Injection">Manual Annotating for Dependency Injection</h2>
<h3 id="UnSafe_from_Minification">UnSafe from Minification</h3>
<h6 id="[Style_Y090]">[Style <a href="#style-y090">Y090</a>]</h6>
<ul>
<li><p>Avoid using the shortcut syntax of declaring dependencies without using a minification-safe approach.</p>
<p><em>Why?</em>: The parameters to the component (e.g. controller, factory, etc) will be converted to mangled variables. For example, <code>common</code> and <code>dataservice</code> may become <code>a</code> or <code>b</code> and not be found by AngularJS.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">/* avoid - not minification-safe*/</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Dashboard&apos;</span>, Dashboard);

<span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span><span class="params">(common, dataservice)</span> {</span>
}
</pre></td></tr></table></figure>

<p>This code may produce mangled variables when minified and thus cause runtime errors.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* avoid - not minification-safe*/</span>
angular.module(<span class="string">&apos;app&apos;</span>).controller(<span class="string">&apos;Dashboard&apos;</span>, d);<span class="function"><span class="keyword">function</span> <span class="title">d</span><span class="params">(a, b)</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Manually_Identify_Dependencies">Manually Identify Dependencies</h3>
<h6 id="[Style_Y091]">[Style <a href="#style-y091">Y091</a>]</h6>
<ul>
<li><p>Use <code>$inject</code> to manually identify your dependencies for AngularJS components.</p>
<p><em>Why?</em>: This technique mirrors the technique used by <a href="https://github.com/olov/ng-annotate" target="_blank" rel="external"><code>ng-annotate</code></a>, which I recommend for automating the creation of minification safe dependencies. If <code>ng-annotate</code> detects injection has already been made, it will not duplicate it.</p>
<p><em>Why?</em>: This safeguards your dependencies from being vulnerable to minification issues when parameters may be mangled. For example, <code>common</code> and <code>dataservice</code> may become <code>a</code> or <code>b</code> and not be found by AngularJS.</p>
<p><em>Why?</em>: Avoid creating in-line dependencies as long lists can be difficult to read in the array. Also it can be confusing that the array is a series of strings while the last item is the component&#x2019;s function.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Dashboard&apos;</span>,
        [<span class="string">&apos;$location&apos;</span>, <span class="string">&apos;$routeParams&apos;</span>, <span class="string">&apos;common&apos;</span>, <span class="string">&apos;dataservice&apos;</span>,
            <span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span><span class="params">($location, $routeParams, common, dataservice)</span> {</span>}
        ]);
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">/* avoid */</span>
angular
  .module(<span class="string">&apos;app&apos;</span>)
  .controller(<span class="string">&apos;Dashboard&apos;</span>,
      [<span class="string">&apos;$location&apos;</span>, <span class="string">&apos;$routeParams&apos;</span>, <span class="string">&apos;common&apos;</span>, <span class="string">&apos;dataservice&apos;</span>, Dashboard]);

<span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span><span class="params">($location, $routeParams, common, dataservice)</span> {</span>
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Dashboard&apos;</span>, Dashboard);

Dashboard.$inject = [<span class="string">&apos;$location&apos;</span>, <span class="string">&apos;$routeParams&apos;</span>, <span class="string">&apos;common&apos;</span>, <span class="string">&apos;dataservice&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span><span class="params">($location, $routeParams, common, dataservice)</span> {</span>
}
</pre></td></tr></table></figure>

<p>Note: When your function is below a return statement the $inject may be unreachable (this may happen in a directive). You can solve this by either moving the $inject above the return statement or by using the alternate array injection syntax.</p>
<p>Note: <a href="https://github.com/olov/ng-annotate" target="_blank" rel="external"><code>ng-annotate 0.10.0</code></a> introduced a feature where it moves the <code>$inject</code> to where it is reachable.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// inside a directive definition</span>
<span class="function"><span class="keyword">function</span> <span class="title">outer</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> {
        controller: DashboardPanel,
    };

    DashboardPanel.$inject = [<span class="string">&apos;logger&apos;</span>]; <span class="comment">// Unreachable</span>
    <span class="function"><span class="keyword">function</span> <span class="title">DashboardPanel</span><span class="params">(logger)</span> {</span>
    }
}
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// inside a directive definition</span>
<span class="function"><span class="keyword">function</span> <span class="title">outer</span><span class="params">()</span> {</span>
    DashboardPanel.$inject = [<span class="string">&apos;logger&apos;</span>]; <span class="comment">// reachable</span>
    <span class="keyword">return</span> {
        controller: DashboardPanel,
    };

    <span class="function"><span class="keyword">function</span> <span class="title">DashboardPanel</span><span class="params">(logger)</span> {</span>
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Manually_Identify_Route_Resolver_Dependencies">Manually Identify Route Resolver Dependencies</h3>
<h6 id="[Style_Y092]">[Style <a href="#style-y092">Y092</a>]</h6>
<ul>
<li><p>Use $inject to manually identify your route resolver dependencies for AngularJS components.</p>
<p><em>Why?</em>: This technique breaks out the anonymous function for the route resolver, making it easier to read.</p>
<p><em>Why?</em>: An <code>$inject</code> statement can easily precede the resolver to handle making any dependencies minification safe.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">($routeProvider)</span> {</span>
    $routeProvider
        .when(<span class="string">&apos;/avengers&apos;</span>, {
            templateUrl: <span class="string">&apos;avengers.html&apos;</span>,
            controller: <span class="string">&apos;Avengers&apos;</span>,
            controllerAs: <span class="string">&apos;vm&apos;</span>,
            resolve: {
                moviesPrepService: moviePrepService
            }
        });
}

moviePrepService.$inject = [<span class="string">&apos;movieService&apos;</span>];
<span class="function"><span class="keyword">function</span> <span class="title">moviePrepService</span><span class="params">(movieService)</span> {</span>
    <span class="keyword">return</span> movieService.getMovies();
}
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Minification_and_Annotation">Minification and Annotation</h2>
<h3 id="ng-annotate">ng-annotate</h3>
<h6 id="[Style_Y100]">[Style <a href="#style-y100">Y100</a>]</h6>
<ul>
<li><p>Use <a href="//github.com/olov/ng-annotate">ng-annotate</a> for <a href="http://gulpjs.com" target="_blank" rel="external">Gulp</a> or <a href="http://gruntjs.com" target="_blank" rel="external">Grunt</a> and comment functions that need automated dependency injection using <code>/** @ngInject */</code></p>
<p><em>Why?</em>: This safeguards your code from any dependencies that may not be using minification-safe practices.</p>
<p><em>Why?</em>: <a href="https://github.com/btford/ngmin" target="_blank" rel="external"><code>ng-min</code></a> is deprecated</p>
<blockquote>
<p>I prefer Gulp as I feel it is easier to write, to read, and to debug.</p>
</blockquote>
<p>The following code is not using minification safe dependencies.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

<span class="comment">/* @ngInject */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(storageService, avengerService)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.heroSearch = <span class="string">&apos;&apos;</span>;
    vm.storeHero = storeHero;

    <span class="function"><span class="keyword">function</span> <span class="title">storeHero</span><span class="params">()</span> {</span>
        <span class="keyword">var</span> hero = avengerService.find(vm.heroSearch);
        storageService.save(hero.name, hero);
    }
}
</pre></td></tr></table></figure>

<p>When the above code is run through ng-annotate it will produce the following output with the <code>$inject</code> annotation and become minification-safe.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>angular
    .module(<span class="string">&apos;app&apos;</span>)
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

<span class="comment">/* @ngInject */</span>
<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">(storageService, avengerService)</span> {</span>
    <span class="keyword">var</span> vm = <span class="keyword">this</span>;
    vm.heroSearch = <span class="string">&apos;&apos;</span>;
    vm.storeHero = storeHero;

    <span class="function"><span class="keyword">function</span> <span class="title">storeHero</span><span class="params">()</span> {</span>
        <span class="keyword">var</span> hero = avengerService.find(vm.heroSearch);
        storageService.save(hero.name, hero);
    }
}

Avengers.$inject = [<span class="string">&apos;storageService&apos;</span>, <span class="string">&apos;avengerService&apos;</span>];
</pre></td></tr></table></figure>

<p>Note: If <code>ng-annotate</code> detects injection has already been made (e.g. <code>@ngInject</code> was detected), it will not duplicate the <code>$inject</code> code.</p>
<p>Note: When using a route resolver you can prefix the resolver&#x2019;s function with <code>/* @ngInject */</code> and it will produce properly annotated code, keeping any injected dependencies minification safe.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// Using @ngInject annotations</span>
<span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">($routeProvider)</span> {</span>
    $routeProvider
        .when(<span class="string">&apos;/avengers&apos;</span>, {
            templateUrl: <span class="string">&apos;avengers.html&apos;</span>,
            controller: <span class="string">&apos;Avengers&apos;</span>,
            controllerAs: <span class="string">&apos;vm&apos;</span>,
            resolve: { <span class="comment">/* @ngInject */</span>
                moviesPrepService: <span class="function"><span class="keyword">function</span><span class="params">(movieService)</span> {</span>
                    <span class="keyword">return</span> movieService.getMovies();
                }
            }
        });
}
</pre></td></tr></table></figure>

<blockquote>
<p>Note: Starting from AngularJS 1.3 use the <a href="https://docs.angularjs.org/api/ng/directive/ngApp" target="_blank" rel="external"><code>ngApp</code></a> directive&#x2019;s <code>ngStrictDi</code> parameter. When present the injector will be created in &#x201C;strict-di&#x201D; mode causing the application to fail to invoke functions which do not use explicit function annotation (these may not be minification safe). Debugging info will be logged to the console to help track down the offending code.<br><code>&lt;body ng-app=&quot;APP&quot; ng-strict-di&gt;</code></p>
</blockquote>
</li>
</ul>
<h3 id="Use_Gulp_or_Grunt_for_ng-annotate">Use Gulp or Grunt for ng-annotate</h3>
<h6 id="[Style_Y101]">[Style <a href="#style-y101">Y101</a>]</h6>
<ul>
<li><p>Use <a href="https://www.npmjs.org/package/gulp-ng-annotate" target="_blank" rel="external">gulp-ng-annotate</a> or <a href="https://www.npmjs.org/package/grunt-ng-annotate" target="_blank" rel="external">grunt-ng-annotate</a> in an automated build task. Inject <code>/* @ngInject */</code> prior to any function that has dependencies.</p>
<p><em>Why?</em>: ng-annotate will catch most dependencies, but it sometimes requires hints using the <code>/* @ngInject */</code> syntax.</p>
<p>The following code is an example of a gulp task using ngAnnotate</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>gulp.task(<span class="string">&apos;js&apos;</span>, [<span class="string">&apos;jshint&apos;</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> source = pkg.paths.js;
    <span class="keyword">return</span> gulp.src(source)
        .pipe(sourcemaps.init())
        .pipe(concat(<span class="string">&apos;all.min.js&apos;</span>, {newLine: <span class="string">&apos;;&apos;</span>}))
        <span class="comment">// Annotate before uglify so the code get&apos;s min&apos;d properly.</span>
        .pipe(ngAnnotate({
            <span class="comment">// true helps add where @ngInject is not used. It infers.</span>
            <span class="comment">// Doesn&apos;t work with resolve, so we must be explicit there</span>
            add: <span class="literal">true</span>
        }))
        .pipe(bytediff.start())
        .pipe(uglify({mangle: <span class="literal">true</span>}))
        .pipe(bytediff.stop())
        .pipe(sourcemaps.write(<span class="string">&apos;./&apos;</span>))
        .pipe(gulp.dest(pkg.paths.dev));
});
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Exception_Handling">Exception Handling</h2>
<h3 id="decorators">decorators</h3>
<h6 id="[Style_Y110]">[Style <a href="#style-y110">Y110</a>]</h6>
<ul>
<li><p>Use a <a href="https://docs.angularjs.org/api/auto/service/$provide#decorator" target="_blank" rel="external">decorator</a>, at config time using the <a href="https://docs.angularjs.org/api/auto/service/$provide" target="_blank" rel="external"><code>$provide</code></a> service, on the <a href="https://docs.angularjs.org/api/ng/service/$exceptionHandler" target="_blank" rel="external"><code>$exceptionHandler</code></a> service to perform custom actions when exceptions occur.</p>
<p><em>Why?</em>: Provides a consistent way to handle uncaught AngularJS exceptions for development-time or run-time.</p>
<p>Note: Another option is to override the service instead of using a decorator. This is a fine option, but if you want to keep the default behavior and extend it a decorator is recommended.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
angular
    .module(<span class="string">&apos;blocks.exception&apos;</span>)
    .config(exceptionConfig);

exceptionConfig.$inject = [<span class="string">&apos;$provide&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">exceptionConfig</span><span class="params">($provide)</span> {</span>
    $provide.decorator(<span class="string">&apos;$exceptionHandler&apos;</span>, extendExceptionHandler);
}

extendExceptionHandler.$inject = [<span class="string">&apos;$delegate&apos;</span>, <span class="string">&apos;toastr&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">extendExceptionHandler</span><span class="params">($delegate, toastr)</span> {</span>
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(exception, cause)</span> {</span>
        $delegate(exception, cause);
        <span class="keyword">var</span> errorData = {
            exception: exception,
            cause: cause
        };
        <span class="comment">/**
         * Could add the error to a service&apos;s collection,
         * add errors to $rootScope, log errors to remote web server,
         * or log locally. Or throw hard. It is entirely up to you.
         * throw exception;
         */</span>
        toastr.error(exception.msg, errorData);
    };
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Exception_Catchers">Exception Catchers</h3>
<h6 id="[Style_Y111]">[Style <a href="#style-y111">Y111</a>]</h6>
<ul>
<li><p>Create a factory that exposes an interface to catch and gracefully handle exceptions.</p>
<p><em>Why?</em>: Provides a consistent way to catch exceptions that may be thrown in your code (e.g. during XHR calls or promise failures).</p>
<p>Note: The exception catcher is good for catching and reacting to specific exceptions from calls that you know may throw one. For example, when making an XHR call to retrieve data from a remote web service and you want to catch any exceptions from that service and react uniquely.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
angular
    .module(<span class="string">&apos;blocks.exception&apos;</span>)
    .factory(<span class="string">&apos;exception&apos;</span>, exception);

exception.$inject = [<span class="string">&apos;logger&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">exception</span><span class="params">(logger)</span> {</span>
    <span class="keyword">var</span> service = {
        catcher: catcher
    };
    <span class="keyword">return</span> service;

    <span class="function"><span class="keyword">function</span> <span class="title">catcher</span><span class="params">(message)</span> {</span>
        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(reason)</span> {</span>
            logger.error(message, reason);
        };
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Route_Errors">Route Errors</h3>
<h6 id="[Style_Y112]">[Style <a href="#style-y112">Y112</a>]</h6>
<ul>
<li><p>Handle and log all routing errors using <a href="https://docs.angularjs.org/api/ngRoute/service/$route#$routeChangeError" target="_blank" rel="external"><code>$routeChangeError</code></a>.</p>
<p><em>Why?</em>: Provides a consistent way handle all routing errors.</p>
<p><em>Why?</em>: Potentially provides a better user experience if a routing error occurs and you route them to a friendly screen with more details or recovery options.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">/* recommended */</span>
<span class="function"><span class="keyword">function</span> <span class="title">handleRoutingErrors</span><span class="params">()</span> {</span>
    <span class="comment">/**
     * Route cancellation:
     * On routing error, go to the dashboard.
     * Provide an exit clause if it tries to do it twice.
     */</span>
    $rootScope.$on(<span class="string">&apos;$routeChangeError&apos;</span>,
        <span class="function"><span class="keyword">function</span><span class="params">(event, current, previous, rejection)</span> {</span>
            <span class="keyword">var</span> destination = (current &amp;&amp; (current.title || current.name || current.loadedTemplateUrl)) ||
                <span class="string">&apos;unknown target&apos;</span>;
            <span class="keyword">var</span> msg = <span class="string">&apos;Error routing to &apos;</span> + destination + <span class="string">&apos;. &apos;</span> + (rejection.msg || <span class="string">&apos;&apos;</span>);
            <span class="comment">/**
             * Optionally log using a custom service or $log.
             * (Don&apos;t forget to inject custom service)
             */</span>
            logger.warning(msg, [current]);
        }
    );
}
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Naming">Naming</h2>
<h3 id="Naming_Guidelines">Naming Guidelines</h3>
<h6 id="[Style_Y120]">[Style <a href="#style-y120">Y120</a>]</h6>
<ul>
<li><p>Use consistent names for all components following a pattern that describes the component&#x2019;s feature then (optionally) its type. My recommended pattern is <code>feature.type.js</code>. There are 2 names for most assets:</p>
<ul>
<li>the file name (<code>avengers.controller.js</code>)</li>
<li>the registered component name with Angular (<code>AvengersController</code>)</li>
</ul>
<p><em>Why?</em>: Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.</p>
<p><em>Why?</em>: The naming conventions should simply help you find your code faster and make it easier to understand.</p>
</li>
</ul>
<h3 id="Feature_File_Names">Feature File Names</h3>
<h6 id="[Style_Y121]">[Style <a href="#style-y121">Y121</a>]</h6>
<ul>
<li><p>Use consistent names for all components following a pattern that describes the component&#x2019;s feature then (optionally) its type. My recommended pattern is <code>feature.type.js</code>.</p>
<p><em>Why?</em>: Provides a consistent way to quickly identify components.</p>
<p><em>Why?</em>: Provides pattern matching for any automated tasks.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">/**
 * common options
 */</span>

<span class="comment">// Controllers</span>
avengers.js
avengers.controller.js
avengersController.js

<span class="comment">// Services/Factories</span>
logger.js
logger.service.js
loggerService.js
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>

<span class="comment">// controllers</span>
avengers.controller.js
avengers.controller.spec.js

<span class="comment">// services/factories</span>
logger.service.js
logger.service.spec.js

<span class="comment">// constants</span>
constants.js

<span class="comment">// module definition</span>
avengers.module.js

<span class="comment">// routes</span>
avengers.routes.js
avengers.routes.spec.js

<span class="comment">// configuration</span>
avengers.config.js

<span class="comment">// directives</span>
avenger-profile.directive.js
avenger-profile.directive.spec.js
</pre></td></tr></table></figure>

<p>Note: Another common convention is naming controller files without the word <code>controller</code> in the file name such as <code>avengers.js</code> instead of <code>avengers.controller.js</code>. All other conventions still hold using a suffix of the type. Controllers are the most common type of component so this just saves typing and is still easily identifiable. I recommend you choose 1 convention and be consistent for your team.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>
<span class="comment">// Controllers</span>
avengers.js
avengers.spec.js
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Test_File_Names">Test File Names</h3>
<h6 id="[Style_Y122]">[Style <a href="#style-y122">Y122</a>]</h6>
<ul>
<li><p>Name test specifications similar to the component they test with a suffix of <code>spec</code>.</p>
<p><em>Why?</em>: Provides a consistent way to quickly identify components.</p>
<p><em>Why?</em>: Provides pattern matching for <a href="http://karma-runner.github.io/" target="_blank" rel="external">karma</a> or other test runners.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>
avengers.controller.spec.js
logger.service.spec.js
avengers.routes.spec.js
avenger-profile.directive.spec.js
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Controller_Names">Controller Names</h3>
<h6 id="[Style_Y123]">[Style <a href="#style-y123">Y123</a>]</h6>
<ul>
<li><p>Use consistent names for all controllers named after their feature. Use UpperCamelCase for controllers, as they are constructors.</p>
<p><em>Why?</em>: Provides a consistent way to quickly identify and reference controllers.</p>
<p><em>Why?</em>: UpperCamelCase is conventional for identifying object that can be instantiated using a constructor.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>

<span class="comment">// avengers.controller.js</span>
angular
    .module
    .controller(<span class="string">&apos;HeroAvengers&apos;</span>, HeroAvengers);

<span class="function"><span class="keyword">function</span> <span class="title">HeroAvengers</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Controller_Name_Suffix">Controller Name Suffix</h3>
<h6 id="[Style_Y124]">[Style <a href="#style-y124">Y124</a>]</h6>
<ul>
<li><p>Append the controller name with the suffix <code>Controller</code> or with no suffix. Choose 1, not both.</p>
<p><em>Why?</em>: The <code>Controller</code> suffix is more commonly used and is more explicitly descriptive.</p>
<p><em>Why?</em>: Omitting the suffix is more succinct and the controller is often easily identifiable even without the suffix.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended: Option 1
 */</span>

<span class="comment">// avengers.controller.js</span>
angular
    .module
    .controller(<span class="string">&apos;Avengers&apos;</span>, Avengers);

<span class="function"><span class="keyword">function</span> <span class="title">Avengers</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended: Option 2
 */</span>

<span class="comment">// avengers.controller.js</span>
angular
    .module
    .controller(<span class="string">&apos;AvengersController&apos;</span>, AvengersController);

<span class="function"><span class="keyword">function</span> <span class="title">AvengersController</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Factory_Names">Factory Names</h3>
<h6 id="[Style_Y125]">[Style <a href="#style-y125">Y125</a>]</h6>
<ul>
<li><p>Use consistent names for all factories named after their feature. Use camel-casing for services and factories.</p>
<p><em>Why?</em>: Provides a consistent way to quickly identify and reference factories.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>

<span class="comment">// logger.service.js</span>
angular
    .module
    .factory(<span class="string">&apos;logger&apos;</span>, logger);

<span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Directive_Component_Names">Directive Component Names</h3>
<h6 id="[Style_Y126]">[Style <a href="#style-y126">Y126</a>]</h6>
<ul>
<li><p>Use consistent names for all directives using camel-case. Use a short prefix to describe the area that the directives belong (some example are company prefix or project prefix).</p>
<p><em>Why?</em>: Provides a consistent way to quickly identify and reference components.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>

<span class="comment">// avenger-profile.directive.js</span>
angular
    .module
    .directive(<span class="string">&apos;xxAvengerProfile&apos;</span>, xxAvengerProfile);

<span class="comment">// usage is &lt;xx-avenger-profile&gt; &lt;/xx-avenger-profile&gt;</span>

<span class="function"><span class="keyword">function</span> <span class="title">xxAvengerProfile</span><span class="params">()</span> {</span> }
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Modules-1">Modules</h3>
<h6 id="[Style_Y127]">[Style <a href="#style-y127">Y127</a>]</h6>
<ul>
<li><p>When there are multiple modules, the main module file is named <code>app.module.js</code> while other dependent modules are named after what they represent. For example, an admin module is named <code>admin.module.js</code>. The respective registered module names would be <code>app</code> and <code>admin</code>.</p>
<p><em>Why?</em>: Provides consistency for multiple module apps, and for expanding to large applications.</p>
<p><em>Why?</em>: Provides easy way to use task automation to load all module definitions first, then all other angular files (for bundling).</p>
</li>
</ul>
<h3 id="Configuration">Configuration</h3>
<h6 id="[Style_Y128]">[Style <a href="#style-y128">Y128</a>]</h6>
<ul>
<li><p>Separate configuration for a module into its own file named after the module. A configuration file for the main <code>app</code> module is named <code>app.config.js</code> (or simply <code>config.js</code>). A configuration for a module named <code>admin.module.js</code> is named <code>admin.config.js</code>.</p>
<p><em>Why?</em>: Separates configuration from module definition, components, and active code.</p>
<p><em>Why?</em>: Provides a identifiable place to set configuration for a module.</p>
</li>
</ul>
<h3 id="Routes">Routes</h3>
<h6 id="[Style_Y129]">[Style <a href="#style-y129">Y129</a>]</h6>
<ul>
<li>Separate route configuration into its own file. Examples might be <code>app.route.js</code> for the main module and <code>admin.route.js</code> for the <code>admin</code> module. Even in smaller apps I prefer this separation from the rest of the configuration.</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Application_Structure_LIFT_Principle">Application Structure LIFT Principle</h2>
<h3 id="LIFT">LIFT</h3>
<h6 id="[Style_Y140]">[Style <a href="#style-y140">Y140</a>]</h6>
<ul>
<li><p>Structure your app such that you can <code>L</code>ocate your code quickly, <code>I</code>dentify the code at a glance, keep the <code>F</code>lattest structure you can, and <code>T</code>ry to stay DRY. The structure should follow these 4 basic guidelines.</p>
<p><em>Why LIFT?</em>: Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. Another way to check your app structure is to ask yourself: How quickly can you open and work in all of the related files for a feature?</p>
<p>When I find my structure is not feeling comfortable, I go back and revisit these LIFT guidelines</p>
<ol>
<li><code>L</code>ocating our code is easy</li>
<li><code>I</code>dentify code at a glance</li>
<li><code>F</code>lat structure as long as we can</li>
<li><code>T</code>ry to stay DRY (Don&#x2019;t Repeat Yourself) or T-DRY</li>
</ol>
</li>
</ul>
<h3 id="Locate">Locate</h3>
<h6 id="[Style_Y141]">[Style <a href="#style-y141">Y141</a>]</h6>
<ul>
<li><p>Make locating your code intuitive, simple and fast.</p>
<p><em>Why?</em>: I find this to be super important for a project. If the team cannot find the files they need to work on quickly, they will not be able to work as efficiently as possible, and the structure needs to change. You may not know the file name or where its related files are, so putting them in the most intuitive locations and near each other saves a ton of time. A descriptive folder structure can help with this.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>/bower_components
/client
  /app
    /avengers
    /blocks
      /exception
      /logger
    /core
    /dashboard
    /data
    /layout
    /widgets
  /content
  index<span class="preprocessor">.html</span>
<span class="preprocessor">.bower</span><span class="preprocessor">.json</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Identify">Identify</h3>
<h6 id="[Style_Y142]">[Style <a href="#style-y142">Y142</a>]</h6>
<ul>
<li><p>When you look at a file you should instantly know what it contains and represents.</p>
<p><em>Why?</em>: You spend less time hunting and pecking for code, and become more efficient. If this means you want longer file names, then so be it. Be descriptive with file names and keeping the contents of the file to exactly 1 component. Avoid files with multiple controllers, multiple services, or a mixture. There are deviations of the 1 per file rule when I have a set of very small features that are all related to each other, they are still easily identifiable.</p>
</li>
</ul>
<h3 id="Flat">Flat</h3>
<h6 id="[Style_Y143]">[Style <a href="#style-y143">Y143</a>]</h6>
<ul>
<li><p>Keep a flat folder structure as long as possible. When you get to 7+ files, begin considering separation.</p>
<p><em>Why?</em>: Nobody wants to search 7 levels of folders to find a file. Think about menus on web sites &#x2026; anything deeper than 2 should take serious consideration. In a folder structure there is no hard and fast number rule, but when a folder has 7-10 files, that may be time to create subfolders. Base it on your comfort level. Use a flatter structure until there is an obvious value (to help the rest of LIFT) in creating a new folder.</p>
</li>
</ul>
<h3 id="T-DRY_(Try_to_Stick_to_DRY)">T-DRY (Try to Stick to DRY)</h3>
<h6 id="[Style_Y144]">[Style <a href="#style-y144">Y144</a>]</h6>
<ul>
<li><p>Be DRY, but don&#x2019;t go nuts and sacrifice readability.</p>
<p><em>Why?</em>: Being DRY is important, but not crucial if it sacrifices the others in LIFT, which is why I call it T-DRY. I don&#x2019;t want to type session-view.html for a view because, well, it&#x2019;s obviously a view. If it is not obvious or by convention, then I name it.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Application_Structure">Application Structure</h2>
<h3 id="Overall_Guidelines">Overall Guidelines</h3>
<h6 id="[Style_Y150]">[Style <a href="#style-y150">Y150</a>]</h6>
<ul>
<li><p>Have a near term view of implementation and a long term vision. In other words, start small and but keep in mind on where the app is heading down the road. All of the app&#x2019;s code goes in a root folder named <code>app</code>. All content is 1 feature per file. Each controller, service, module, view is in its own file. All 3rd party vendor scripts are stored in another root folder and not in the <code>app</code> folder. I didn&#x2019;t write them and I don&#x2019;t want them cluttering my app (<code>bower_components</code>, <code>scripts</code>, <code>lib</code>).</p>
<p>Note: Find more details and reasoning behind the structure at <a href="http://www.johnpapa.net/angular-app-structuring-guidelines/" target="_blank" rel="external">this original post on application structure</a>.</p>
</li>
</ul>
<h3 id="Layout">Layout</h3>
<h6 id="[Style_Y151]">[Style <a href="#style-y151">Y151</a>]</h6>
<ul>
<li><p>Place components that define the overall layout of the application in a folder named <code>layout</code>. These may include a shell view and controller may act as the container for the app, navigation, menus, content areas, and other regions.</p>
<p><em>Why?</em>: Organizes all layout in a single place re-used throughout the application.</p>
</li>
</ul>
<h3 id="Folders-by-Feature_Structure">Folders-by-Feature Structure</h3>
<h6 id="[Style_Y152]">[Style <a href="#style-y152">Y152</a>]</h6>
<ul>
<li><p>Create folders named for the feature they represent. When a folder grows to contain more than 7 files, start to consider creating a folder for them. Your threshold may be different, so adjust as needed.</p>
<p><em>Why?</em>: A developer can locate the code, identify what each file represents at a glance, the structure is flat as can be, and there is no repetitive nor redundant names.</p>
<p><em>Why?</em>: The LIFT guidelines are all covered.</p>
<p><em>Why?</em>: Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines.</p>
<p><em>Why?</em>: When there are a lot of files (10+) locating them is easier with a consistent folder structures and more difficult in flat structures.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="comment">/**
 * recommended
 */</span>

app/
    app.module.js
    app.config.js
    app.routes.js
    components/
        calendar.directive.js
        calendar.directive.html
        user-profile.directive.js
        user-profile.directive.html
    layout/
        shell.html
        shell.controller.js
        topnav.html
        topnav.controller.js
    people/
        attendees.html
        attendees.controller.js
        speakers.html
        speakers.controller.js
        speaker-detail.html
        speaker-detail.controller.js
    services/
        data.service.js
        localstorage.service.js
        logger.service.js
        spinner.service.js
    sessions/
        sessions.html
        sessions.controller.js
        session-detail.html
        session-detail.controller.js
</pre></td></tr></table></figure>

<p>  <img src="https://raw.githubusercontent.com/johnpapa/angularjs-styleguide/master/assets/modularity-2.png" alt="Sample App Structure"></p>
<p>  Note: Do not use structuring using folders-by-type. This requires moving to multiple folders when working on a feature and gets unwieldy quickly as the app grows to 5, 10 or 25+ views and controllers (and other features), which makes it more difficult than folder-by-feature to locate files.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">/*
* avoid
* Alternative folders-by-type.
* I recommend &quot;folders-by-feature&quot;, instead.
*/</span>

app/
    app.module.js
    app.config.js
    app.routes.js
    controllers/
        attendees.js
        session-detail.js
        sessions.js
        shell.js
        speakers.js
        speaker-detail.js
        topnav.js
    directives/
        calendar.directive.js
        calendar.directive.html
        user-profile.directive.js
        user-profile.directive.html
    services/
        dataservice.j
        localstorage.js
        logger.js
        spinner.js
    views/
        attendees.html
        session-detail.html
        sessions.html
        shell.html
        speakers.html
        speaker-detail.html
        topnav.html
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Modularity">Modularity</h2>
<h3 id="Many_Small,_Self_Contained_Modules">Many Small, Self Contained Modules</h3>
<h6 id="[Style_Y160]">[Style <a href="#style-y160">Y160</a>]</h6>
<ul>
<li><p>Create small modules that encapsulate one responsibility.</p>
<p><em>Why?</em>: Modular applications make it easy to plug and go as they allow the development teams to build vertical slices of the applications and roll out incrementally. This means we can plug in new features as we develop them.</p>
</li>
</ul>
<h3 id="Create_an_App_Module">Create an App Module</h3>
<h6 id="[Style_Y161]">[Style <a href="#style-y161">Y161</a>]</h6>
<ul>
<li><p>Create an application root module whose role is pull together all of the modules and features of your application. Name this for your application.</p>
<p><em>Why?</em>: AngularJS encourages modularity and separation patterns. Creating an application root module whose role is to tie your other modules together provides a very straightforward way to add or remove modules from your application.</p>
</li>
</ul>
<h3 id="Keep_the_App_Module_Thin">Keep the App Module Thin</h3>
<h6 id="[Style_Y162]">[Style <a href="#style-y162">Y162</a>]</h6>
<ul>
<li><p>Only put logic for pulling together the app in the application module. Leave features in their own modules.</p>
<p><em>Why?</em>: Adding additional roles to the application root to get remote data, display views, or other logic not related to pulling the app together muddies the app module and make both sets of features harder to reuse or turn off.</p>
<p><em>Why?</em>: The app module becomes a manifest that describes which modules help define the application.</p>
</li>
</ul>
<h3 id="Feature_Areas_are_Modules">Feature Areas are Modules</h3>
<h6 id="[Style_Y163]">[Style <a href="#style-y163">Y163</a>]</h6>
<ul>
<li><p>Create modules that represent feature areas, such as layout, reusable and shared services, dashboards, and app specific features (e.g. customers, admin, sales).</p>
<p><em>Why?</em>: Self contained modules can be added to the application with little or no friction.</p>
<p><em>Why?</em>: Sprints or iterations can focus on feature areas and turn them on at the end of the sprint or iteration.</p>
<p><em>Why?</em>: Separating feature areas into modules makes it easier to test the modules in isolation and reuse code.</p>
</li>
</ul>
<h3 id="Reusable_Blocks_are_Modules">Reusable Blocks are Modules</h3>
<h6 id="[Style_Y164]">[Style <a href="#style-y164">Y164</a>]</h6>
<ul>
<li><p>Create modules that represent reusable application blocks for common services such as exception handling, logging, diagnostics, security, and local data stashing.</p>
<p><em>Why?</em>: These types of features are needed in many applications, so by keeping them separated in their own modules they can be application generic and be reused across applications.</p>
</li>
</ul>
<h3 id="Module_Dependencies">Module Dependencies</h3>
<h6 id="[Style_Y165]">[Style <a href="#style-y165">Y165</a>]</h6>
<ul>
<li><p>The application root module depends on the app specific feature modules and any shared or reusable modules.</p>
<p><img src="https://raw.githubusercontent.com/johnpapa/angularjs-styleguide/master/assets/modularity-1.png" alt="Modularity and Dependencies"></p>
<p><em>Why?</em>: The main app module contains a quickly identifiable manifest of the application&#x2019;s features.</p>
<p><em>Why?</em>: Each feature area contains a manifest of what it depends on, so it can be pulled in as a dependency in other applications and still work.</p>
<p><em>Why?</em>: Intra-App features such as shared data services become easy to locate and share from within <code>app.core</code> (choose your favorite name for this module).</p>
<p>Note: This is a strategy for consistency. There are many good options here. Choose one that is consistent, follows AngularJS&#x2019;s dependency rules, and is easy to maintain and scale.</p>
<blockquote>
<p>My structures vary slightly between projects but they all follow these guidelines for structure and modularity. The implementation may vary depending on the features and the team. In other words, don&#x2019;t get hung up on an exact like-for-like structure but do justify your structure using consistency, maintainability, and efficiency in mind.</p>
<p>In a small app, you can also consider putting all the shared dependencies in the app module where the feature modules have no direct dependencies. This makes it easier to maintain the smaller application, but makes it harder to reuse modules outside of this application.</p>
</blockquote>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Startup_Logic">Startup Logic</h2>
<h3 id="Configuration-1">Configuration</h3>
<h6 id="[Style_Y170]">[Style <a href="#style-y170">Y170</a>]</h6>
<ul>
<li><p>Inject code into <a href="https://docs.angularjs.org/guide/module#module-loading-dependencies" target="_blank" rel="external">module configuration</a> that must be configured before running the angular app. Ideal candidates include providers and constants.</p>
<p><em>Why?</em>: This makes it easier to have a less places for configuration.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>angular
    .module(<span class="string">&apos;app&apos;</span>)
    .config(configure);

configure.$inject =
    [<span class="string">&apos;routerHelperProvider&apos;</span>, <span class="string">&apos;exceptionHandlerProvider&apos;</span>, <span class="string">&apos;toastr&apos;</span>];

<span class="function"><span class="keyword">function</span> <span class="title">configure</span> <span class="params">(routerHelperProvider, exceptionHandlerProvider, toastr)</span> {</span>
    exceptionHandlerProvider.configure(config.appErrorPrefix);
    configureStateHelper();

    toastr.options.timeOut = <span class="number">4000</span>;
    toastr.options.positionClass = <span class="string">&apos;toast-bottom-right&apos;</span>;

    <span class="comment">////////////////</span>

    <span class="function"><span class="keyword">function</span> <span class="title">configureStateHelper</span><span class="params">()</span> {</span>
        routerHelperProvider.configure({
            docTitle: <span class="string">&apos;NG-Modular: &apos;</span>
        });
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Run_Blocks">Run Blocks</h3>
<h6 id="[Style_Y171]">[Style <a href="#style-y171">Y171</a>]</h6>
<ul>
<li><p>Any code that needs to run when an application starts should be declared in a factory, exposed via a function, and injected into the <a href="https://docs.angularjs.org/guide/module#module-loading-dependencies" target="_blank" rel="external">run block</a>.</p>
<p><em>Why?</em>: Code directly in a run block can be difficult to test. Placing in a factory makes it easier to abstract and mock.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>angular
    .module(<span class="string">&apos;app&apos;</span>)
    .run(runBlock);

  runBlock.$inject = [<span class="string">&apos;authenticator&apos;</span>, <span class="string">&apos;translator&apos;</span>];

  <span class="function"><span class="keyword">function</span> <span class="title">runBlock</span><span class="params">(authenticator, translator)</span> {</span>
      authenticator.initialize();
      translator.initialize();
  }
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Angular_$_Wrapper_Services">Angular $ Wrapper Services</h2>
<h3 id="$document_and_$window">$document and $window</h3>
<h6 id="[Style_Y180]">[Style <a href="#style-y180">Y180</a>]</h6>
<ul>
<li><p>Use <a href="https://docs.angularjs.org/api/ng/service/$document" target="_blank" rel="external"><code>$document</code></a> and <a href="https://docs.angularjs.org/api/ng/service/$window" target="_blank" rel="external"><code>$window</code></a> instead of <code>document</code> and <code>window</code>.</p>
<p><em>Why?</em>: These services are wrapped by Angular and more easily testable than using document and window in tests. This helps you avoid having to mock document and window yourself.</p>
</li>
</ul>
<h3 id="$timeout_and_$interval">$timeout and $interval</h3>
<h6 id="[Style_Y181]">[Style <a href="#style-y181">Y181</a>]</h6>
<ul>
<li><p>Use <a href="https://docs.angularjs.org/api/ng/service/$timeout" target="_blank" rel="external"><code>$timeout</code></a> and <a href="https://docs.angularjs.org/api/ng/service/$interval" target="_blank" rel="external"><code>$interval</code></a> instead of <code>setTimeout</code> and <code>setInterval</code> .</p>
<p><em>Why?</em>: These services are wrapped by Angular and more easily testable and handle AngularJS&#x2019;s digest cycle thus keeping data binding in sync.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Testing">Testing</h2>
<p>Unit testing helps maintain clean code, as such I included some of my recommendations for unit testing foundations with links for more information.</p>
<h3 id="Write_Tests_with_Stories">Write Tests with Stories</h3>
<h6 id="[Style_Y190]">[Style <a href="#style-y190">Y190</a>]</h6>
<ul>
<li><p>Write a set of tests for every story. Start with an empty test and fill them in as you write the code for the story.</p>
<p><em>Why?</em>: Writing the test descriptions helps clearly define what your story will do, will not do, and how you can measure success.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>it(<span class="string">&apos;should have Avengers controller&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// TODO</span>
});

it(<span class="string">&apos;should find 1 Avenger when filtered by name&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// TODO</span>
});

it(<span class="string">&apos;should have 10 Avengers&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// TODO (mock data?)</span>
});

it(<span class="string">&apos;should return Avengers via XHR&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// TODO ($httpBackend?)</span>
});

<span class="comment">// and so on</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Testing_Library">Testing Library</h3>
<h6 id="[Style_Y191]">[Style <a href="#style-y191">Y191</a>]</h6>
<ul>
<li><p>Use <a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a> or <a href="http://mochajs.org" target="_blank" rel="external">Mocha</a> for unit testing.</p>
<p><em>Why?</em>: Both Jasmine and Mocha are widely used in the AngularJS community. Both are stable, well maintained, and provide robust testing features.</p>
<p>Note: When using Mocha, also consider choosing an assert library such as <a href="http://chaijs.com" target="_blank" rel="external">Chai</a>.</p>
</li>
</ul>
<h3 id="Test_Runner">Test Runner</h3>
<h6 id="[Style_Y192]">[Style <a href="#style-y192">Y192</a>]</h6>
<ul>
<li><p>Use <a href="http://karma-runner.github.io" target="_blank" rel="external">Karma</a> as a test runner.</p>
<p><em>Why?</em>: Karma is easy to configure to run once or automatically when you change your code.</p>
<p><em>Why?</em>: Karma hooks into your Continuous Integration process easily on its own or through Grunt or Gulp.</p>
<p><em>Why?</em>: Some IDE&#x2019;s are beginning to integrate with Karma, such as <a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm</a> and <a href="http://visualstudiogallery.msdn.microsoft.com/02f47876-0e7a-4f6c-93f8-1af5d5189225" target="_blank" rel="external">Visual Studio</a>.</p>
<p><em>Why?</em>: Karma works well with task automation leaders such as <a href="http://www.gruntjs.com" target="_blank" rel="external">Grunt</a> (with <a href="https://github.com/karma-runner/grunt-karma" target="_blank" rel="external">grunt-karma</a>) and <a href="http://www.gulpjs.com" target="_blank" rel="external">Gulp</a> (with <a href="https://github.com/lazd/gulp-karma" target="_blank" rel="external">gulp-karma</a>).</p>
</li>
</ul>
<h3 id="Stubbing_and_Spying">Stubbing and Spying</h3>
<h6 id="[Style_Y193]">[Style <a href="#style-y193">Y193</a>]</h6>
<ul>
<li><p>Use <a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a> for stubbing and spying.</p>
<p><em>Why?</em>: Sinon works well with both Jasmine and Mocha and extends the stubbing and spying features they offer.</p>
<p><em>Why?</em>: Sinon makes it easier to toggle between Jasmine and Mocha, if you want to try both.</p>
</li>
</ul>
<h3 id="Headless_Browser">Headless Browser</h3>
<h6 id="[Style_Y194]">[Style <a href="#style-y194">Y194</a>]</h6>
<ul>
<li><p>Use <a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a> to run your tests on a server.</p>
<p><em>Why?</em>: PhantomJS is a headless browser that helps run your tests without needing a &#x201C;visual&#x201D; browser. So you do not have to install Chrome, Safari, IE, or other browsers on your server.</p>
<p>Note: You should still test on all browsers in your environment, as appropriate for your target audience.</p>
</li>
</ul>
<h3 id="Code_Analysis">Code Analysis</h3>
<h6 id="[Style_Y195]">[Style <a href="#style-y195">Y195</a>]</h6>
<ul>
<li><p>Run JSHint on your tests.</p>
<p><em>Why?</em>: Tests are code. JSHint can help identify code quality issues that may cause the test to work improperly.</p>
</li>
</ul>
<h3 id="Alleviate_Globals_for_JSHint_Rules_on_Tests">Alleviate Globals for JSHint Rules on Tests</h3>
<h6 id="[Style_Y196]">[Style <a href="#style-y196">Y196</a>]</h6>
<ul>
<li><p>Relax the rules on your test code to allow for common globals such as <code>describe</code> and <code>expect</code>.</p>
<p><em>Why?</em>: Your tests are code and require the same attention and code quality rules as all of your production code. However, global variables used by the testing framework, for example, can be relaxed by including this in your test specs.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">/* global sinon, describe, it, afterEach, beforeEach, expect, inject */</span>
</pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/johnpapa/angularjs-styleguide/master/assets/testing-tools.png" alt="Testing Tools"></p>
</li>
</ul>
<h3 id="Organizing_Tests">Organizing Tests</h3>
<h6 id="[Style_Y197]">[Style <a href="#style-y197">Y197</a>]</h6>
<ul>
<li><p>Place unit test files (specs) side-by-side with your client code. Place specs that cover server integration or test multiple components in a separate <code>tests</code> folder.</p>
<p><em>Why?</em>: Unit tests have a direct correlation to a specific component and file in source code.</p>
<p><em>Why?</em>: It is easier to keep them up to date since they are always in sight. When coding whether you do TDD or test during development or test after development, the specs are side-by-side and never out of sight nor mind, and thus more likely to be maintained which also helps maintain code coverage.</p>
<p><em>Why?</em>: When you update source code it is easier to go update the tests at the same time.</p>
<p><em>Why?</em>: Placing them side-by-side makes it easy to find them and easy to move them with the source code if you move the source.</p>
<p><em>Why?</em>: Having the spec nearby makes it easier for the source code reader to learn how the component is supposed to be used and to discover its known limitations.</p>
<p><em>Why?</em>: Separating specs so they are not in a distributed build is easy with grunt or gulp.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>/src/client/app/customers/customer-detail<span class="preprocessor">.controller</span><span class="preprocessor">.js</span>
                         /customer-detail<span class="preprocessor">.controller</span><span class="preprocessor">.spec</span><span class="preprocessor">.js</span>
                         /customers<span class="preprocessor">.controller</span><span class="preprocessor">.spec</span><span class="preprocessor">.js</span>
                         /customers<span class="preprocessor">.controller</span>-detail<span class="preprocessor">.spec</span><span class="preprocessor">.js</span>
                         /customers<span class="preprocessor">.module</span><span class="preprocessor">.js</span>
                         /customers<span class="preprocessor">.route</span><span class="preprocessor">.js</span>
                         /customers<span class="preprocessor">.route</span><span class="preprocessor">.spec</span><span class="preprocessor">.js</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Animations">Animations</h2>
<h3 id="Usage">Usage</h3>
<h6 id="[Style_Y210]">[Style <a href="#style-y210">Y210</a>]</h6>
<ul>
<li><p>Use subtle <a href="https://docs.angularjs.org/guide/animations" target="_blank" rel="external">animations with AngularJS</a> to transition between states for views and primary visual elements. Include the <a href="https://docs.angularjs.org/api/ngAnimate" target="_blank" rel="external">ngAnimate module</a>. The 3 keys are subtle, smooth, seamless.</p>
<p><em>Why?</em>: Subtle animations can improve User Experience when used appropriately.</p>
<p><em>Why?</em>: Subtle animations can improve perceived performance as views transition.</p>
</li>
</ul>
<h3 id="Sub_Second">Sub Second</h3>
<h6 id="[Style_Y211]">[Style <a href="#style-y211">Y211</a>]</h6>
<ul>
<li><p>Use short durations for animations. I generally start with 300ms and adjust until appropriate.</p>
<p><em>Why?</em>: Long animations can have the reverse affect on User Experience and perceived performance by giving the appearance of a slow application.</p>
</li>
</ul>
<h3 id="animate-css">animate.css</h3>
<h6 id="[Style_Y212]">[Style <a href="#style-y212">Y212</a>]</h6>
<ul>
<li><p>Use <a href="http://daneden.github.io/animate.css/" target="_blank" rel="external">animate.css</a> for conventional animations.</p>
<p><em>Why?</em>: The animations that animate.css provides are fast, smooth, and easy to add to your application.</p>
<p><em>Why?</em>: Provides consistency in your animations.</p>
<p><em>Why?</em>: animate.css is widely used and tested.</p>
<p>Note: See this <a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html" target="_blank" rel="external">great post by Matias Niemel&#xE4; on AngularJS animations</a></p>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Comments">Comments</h2>
<h3 id="jsDoc">jsDoc</h3>
<h6 id="[Style_Y220]">[Style <a href="#style-y220">Y220</a>]</h6>
<ul>
<li><p>If planning to produce documentation, use <a href="http://usejsdoc.org/" target="_blank" rel="external"><code>jsDoc</code></a> syntax to document function names, description, params and returns. Use <code>@namespace</code> and <code>@memberOf</code> to match your app structure.</p>
<p><em>Why?</em>: You can generate (and regenerate) documentation from your code, instead of writing it from scratch.</p>
<p><em>Why?</em>: Provides consistency using a common industry tool.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">/**
 * Logger Factory
 * @namespace Factories
 */</span>
(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  angular
      .module(<span class="string">&apos;app&apos;</span>)
      .factory(<span class="string">&apos;logger&apos;</span>, logger);

  <span class="comment">/**
   * @namespace Logger
   * @desc Application wide logger
   * @memberOf Factories
   */</span>
  <span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">($log)</span> {</span>
      <span class="keyword">var</span> service = {
         logError: logError
      };
      <span class="keyword">return</span> service;

      <span class="comment">////////////</span>

      <span class="comment">/**
       * @name logError
       * @desc Logs errors
       * @param {String} msg Message to log
       * @returns {String}
       * @memberOf Factories.Logger
       */</span>
      <span class="function"><span class="keyword">function</span> <span class="title">logError</span><span class="params">(msg)</span> {</span>
          <span class="keyword">var</span> loggedMsg = <span class="string">&apos;Error: &apos;</span> + msg;
          $log.error(loggedMsg);
          <span class="keyword">return</span> loggedMsg;
      };
  }
})();
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="JS_Hint">JS Hint</h2>
<h3 id="Use_an_Options_File">Use an Options File</h3>
<h6 id="[Style_Y230]">[Style <a href="#style-y230">Y230</a>]</h6>
<ul>
<li><p>Use JS Hint for linting your JavaScript and be sure to customize the JS Hint options file and include in source control. See the <a href="http://www.jshint.com/docs/" target="_blank" rel="external">JS Hint docs</a> for details on the options.</p>
<p><em>Why?</em>: Provides a first alert prior to committing any code to source control.</p>
<p><em>Why?</em>: Provides consistency across your team.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre>{
    <span class="string">&quot;bitwise&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;camelcase&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;curly&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;eqeqeq&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;es3&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;forin&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;freeze&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;immed&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;indent&quot;</span>: <span class="number">4</span>,
    <span class="string">&quot;latedef&quot;</span>: <span class="string">&quot;nofunc&quot;</span>,
    <span class="string">&quot;newcap&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;noarg&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;noempty&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;nonbsp&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;nonew&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;plusplus&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;quotmark&quot;</span>: <span class="string">&quot;single&quot;</span>,
    <span class="string">&quot;undef&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;unused&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;maxparams&quot;</span>: <span class="number">10</span>,
    <span class="string">&quot;maxdepth&quot;</span>: <span class="number">5</span>,
    <span class="string">&quot;maxstatements&quot;</span>: <span class="number">40</span>,
    <span class="string">&quot;maxcomplexity&quot;</span>: <span class="number">8</span>,
    <span class="string">&quot;maxlen&quot;</span>: <span class="number">120</span>,

    <span class="string">&quot;asi&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;boss&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;debug&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;eqnull&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;esnext&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;evil&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;expr&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;funcscope&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;globalstrict&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;iterator&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;lastsemic&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;laxbreak&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;laxcomma&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;loopfunc&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;maxerr&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;moz&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;multistr&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;notypeof&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;proto&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;scripturl&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;shadow&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;sub&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;supernew&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;validthis&quot;</span>: <span class="literal">false</span>,
    <span class="string">&quot;noyield&quot;</span>: <span class="literal">false</span>,

    <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,
    <span class="string">&quot;node&quot;</span>: <span class="literal">true</span>,

    <span class="string">&quot;globals&quot;</span>: {
        <span class="string">&quot;angular&quot;</span>: <span class="literal">false</span>,
        <span class="string">&quot;$&quot;</span>: <span class="literal">false</span>
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Constants">Constants</h2>
<h3 id="Vendor_Globals">Vendor Globals</h3>
<h6 id="[Style_Y240]">[Style <a href="#style-y240">Y240</a>]</h6>
<ul>
<li><p>Create an AngularJS Constant for vendor libraries&#x2019; global variables.</p>
<p><em>Why?</em>: Provides a way to inject vendor libraries that otherwise are globals. This improves code testability by allowing you to more easily know what the dependencies of your components are (avoids leaky abstractions). It also allows you to mock these dependencies, where it makes sense.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// constants.js</span>

<span class="comment">/* global toastr:false, moment:false */</span>
(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
<span class="pi">    &apos;use strict&apos;</span>;

    angular
        .module(<span class="string">&apos;app.core&apos;</span>)
        .constant(<span class="string">&apos;toastr&apos;</span>, toastr)
        .constant(<span class="string">&apos;moment&apos;</span>, moment);
})();
</pre></td></tr></table></figure>

</li>
</ul>
<h6 id="[Style_Y241]">[Style <a href="#style-y241">Y241</a>]</h6>
<ul>
<li><p>Use constants for values that do not change and do not come from another service. When constants are used only for a module that may be reused in multiple applications, place constants in a file per module named after the module. Until this is required, keep constants in the main module in a <code>constants.js</code> file.</p>
<p><em>Why?</em>: A value that may change, even infrequently, should be retrieved from a service so you do not have to change the source code. For example, a url for a data service could be placed in a constants but a better place would be to load it from a web service.</p>
<p><em>Why?</em>: Constants can be injected into any angular component, including providers.</p>
<p><em>Why?</em>: When an application is separated into modules that may be reused in other applications, each stand-alone module should be able to operate on its own including any dependent constants.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">// Constants used by the entire app</span>
angular
    .module(<span class="string">&apos;app.core&apos;</span>)
    .constant(<span class="string">&apos;moment&apos;</span>, moment);

<span class="comment">// Constants used only by the sales module</span>
angular
    .module(<span class="string">&apos;app.sales&apos;</span>)
    .constant(<span class="string">&apos;events&apos;</span>, {
        ORDER_CREATED: <span class="string">&apos;event_order_created&apos;</span>,
        INVENTORY_DEPLETED: <span class="string">&apos;event_inventory_depleted&apos;</span>
    });
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="File_Templates_and_Snippets">File Templates and Snippets</h2>
<p>Use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.</p>
<h3 id="Sublime_Text">Sublime Text</h3>
<h6 id="[Style_Y250]">[Style <a href="#style-y250">Y250</a>]</h6>
<ul>
<li><p>AngularJS snippets that follow these styles and guidelines.</p>
<ul>
<li>Download the <a href="assets/sublime-angular-snippets.zip?raw=true">Sublime Angular snippets</a></li>
<li>Place it in your Packages folder</li>
<li>Restart Sublime</li>
<li>In a JavaScript file type these commands followed by a <code>TAB</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ngcontroller <span class="comment">// creates an Angular controller</span>
ngdirective <span class="comment">// creates an Angular directive</span>
ngfactory <span class="comment">// creates an Angular factory</span>
ngmodule <span class="comment">// creates an Angular module</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Visual_Studio">Visual Studio</h3>
<h6 id="[Style_Y251]">[Style <a href="#style-y251">Y251</a>]</h6>
<ul>
<li><p>AngularJS file templates that follow these styles and guidelines can be found at <a href="http://www.sidewaffle.com" target="_blank" rel="external">SideWaffle</a></p>
<ul>
<li>Download the <a href="http://www.sidewaffle.com" target="_blank" rel="external">SideWaffle</a> Visual Studio extension (vsix file)</li>
<li>Run the vsix file</li>
<li>Restart Visual Studio</li>
</ul>
</li>
</ul>
<h3 id="WebStorm">WebStorm</h3>
<h6 id="[Style_Y252]">[Style <a href="#style-y252">Y252</a>]</h6>
<ul>
<li><p>AngularJS snippets and file templates that follow these styles and guidelines. You can import them into your WebStorm settings:</p>
<ul>
<li>Download the <a href="assets/webstorm-angular-file-template.settings.jar?raw=true">WebStorm AngularJS file templates and snippets</a></li>
<li>Open WebStorm and go to the <code>File</code> menu</li>
<li>Choose the <code>Import Settings</code> menu option</li>
<li>Select the file and click <code>OK</code></li>
<li>In a JavaScript file type these commands followed by a <code>TAB</code>:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>ng-c <span class="comment">// creates an Angular controller</span>
ng-f <span class="comment">// creates an Angular factory</span>
ng-m <span class="comment">// creates an Angular module</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Yeoman_Generator">Yeoman Generator</h2>
<h6 id="[Style_Y260]">[Style <a href="#style-y260">Y260</a>]</h6>
<p>You can use the <a href="http://jpapa.me/yohottowel" target="_blank" rel="external">HotTowel yeoman generator</a> to create an app that serves as a starting point for Angular that follows this style guide.</p>
<ol>
<li><p>Install generator-hottowel</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm install <span class="attribute">-g</span> generator<span class="attribute">-hottowel</span>
</pre></td></tr></table></figure>
</li>
<li><p>Create a new folder and change directory to it</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>mkdir myapp
<span class="built_in">cd</span> myapp
</pre></td></tr></table></figure>
</li>
<li><p>Run the generator</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>yo hottowel helloWorld
</pre></td></tr></table></figure>

</li>
</ol>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Routing">Routing</h2>
<p>Client-side routing is important for creating a navigation flow between views and composing views that are made of many smaller templates and directives.</p>
<h6 id="[Style_Y270]">[Style <a href="#style-y270">Y270</a>]</h6>
<ul>
<li><p>Use the <a href="http://angular-ui.github.io/ui-router/" target="_blank" rel="external">AngularUI Router</a> for client-side routing.</p>
<p><em>Why?</em>: UI Router offers all the features of the Angular router plus a few additional ones including nested routes and states.</p>
<p><em>Why?</em>: The syntax is quite similar to the Angular router and is easy to migrate to UI Router.</p>
</li>
</ul>
<h6 id="[Style_Y271]">[Style <a href="#style-y271">Y271</a>]</h6>
<ul>
<li><p>Define routes for views in the module where they exist. Each module should contain the routes for the views in the module.</p>
<p><em>Why?</em>: Each module should be able to stand on its own.</p>
<p><em>Why?</em>: When removing a module or adding a module, the app will only contain routes that point to existing views.</p>
<p><em>Why?</em>: This makes it easy to enable or disable portions of an application without concern over orphaned routes.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="Task_Automation">Task Automation</h2>
<p>Use <a href="http://gulpjs.com" target="_blank" rel="external">Gulp</a> or <a href="http://gruntjs.com" target="_blank" rel="external">Grunt</a> for creating automated tasks. Gulp leans to code over configuration while Grunt leans to configuration over code. I personally prefer Gulp as I feel it is easier to read and write, but both are excellent.</p>
<h6 id="[Style_Y400]">[Style <a href="#style-y400">Y400</a>]</h6>
<ul>
<li><p>Use task automation to list module definition files <code>*.module.js</code> before all other application JavaScript files.</p>
<p><em>Why?</em>: Angular needs the module definitions to be registered before they are used.</p>
<p><em>Why?</em>: Naming modules with a specific pattern such as <code>*.module.js</code> makes it easy to grab them with a glob and list them first.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> clientApp = <span class="string">&apos;./src/client/app/&apos;</span>;

<span class="comment">// Always grab module files first</span>
<span class="keyword">var</span> files = [
  clientApp + <span class="string">&apos;**/*.module.js&apos;</span>,
  clientApp + <span class="string">&apos;**/*.js&apos;</span>
];
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
<h2 id="AngularJS_docs">AngularJS docs</h2>
<p>For anything else, API reference, check the <a href="//docs.angularjs.org/api">Angular documentation</a>.</p>
<h2 id="Contributing">Contributing</h2>
<p>Open an issue first to discuss potential changes/additions. If you have questions with the guide, feel free to leave them as issues in the repository. If you find a typo, create a pull request. The idea is to keep the content up to date and use github&#x2019;s native feature to help tell the story with issues and PR&#x2019;s, which are all searchable via google. Why? Because odds are if you have a question, someone else does too! You can learn more here at about how to contribute.</p>
<p><em>By contributing to this repository you are agreeing to make your content available subject to the license of this repository.</em></p>
<h3 id="Process">Process</h3>
<pre><code><span class="number">1.</span> Discuss <span class="operator">the</span> changes <span class="operator">in</span> <span class="operator">a</span> GitHub issue.
<span class="number">2.</span> Open <span class="operator">a</span> Pull Request against <span class="operator">the</span> develop branch, reference <span class="operator">the</span> issue, <span class="operator">and</span> explain <span class="operator">the</span> change <span class="operator">and</span> why <span class="keyword">it</span> adds <span class="built_in">value</span>.
<span class="number">3.</span> The Pull Request will be evaluated <span class="operator">and</span> either merged <span class="operator">or</span> declined.
</code></pre><h2 id="License">License</h2>
<p><em>tldr; Use this guide. Attributions are appreciated.</em></p>
<h3 id="(The_MIT_License)">(The MIT License)</h3>
<p>Copyright (c) 2014 <a href="http://johnpapa.net" target="_blank" rel="external">John Papa</a></p>
<p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>&#x2018;Software&#x2019;), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p>
<p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED &#x2018;AS IS&#x2019;, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p><strong><a href="#table-of-contents">Back to top</a></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Best practices for AngularJS</p>
]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://blog.gyf1.com/tags/angularjs/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[js tests]]></title>
    <link href="http://blog.gyf1.com/2015/01/22/js-tests/"/>
    <id>http://blog.gyf1.com/2015/01/22/js-tests/</id>
    <published>2015-01-22T14:27:04.000Z</published>
    <updated>2015-01-23T02:56:28.000Z</updated>
    <content type="html"><![CDATA[<p>Questions to check whether you understand js.</p>
<a id="more"></a>

<p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will randomly choose <span class="operator">an</span> <span class="keyword">element</span> <span class="built_in">from</span> <span class="operator">an</span> array named myStuff, given that <span class="operator">the</span> <span class="built_in">number</span> <span class="operator">of</span> elements changes dynamically?
</code></pre><p>Answers</p>
<pre><code>randomElement = myStuff[Math.<span class="built_in">floor</span>(Math.<span class="built_in">random</span>() * myStuff.<span class="built_in">length</span>)]; &#x2611;&#xFE0F;
randomElement = myStuff[Math.<span class="built_in">ceil</span>(Math.<span class="built_in">random</span>() * myStuff.<span class="built_in">length</span>)];
randomElement = myStuff[Math.<span class="built_in">random</span>(myStuff.<span class="built_in">length</span>)];
randomElement = Math.<span class="built_in">random</span>(myStuff.<span class="built_in">length</span>);
</code></pre><p>Practice</p>
<pre><code>var myStuff = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>,<span class="number">700</span>]<span class="comment">;</span>
var randomElement<span class="comment">;</span>
randomElement = myStuff[Math<span class="preprocessor">.floor</span>(Math<span class="preprocessor">.random</span>() * myStuff<span class="preprocessor">.length</span>)]<span class="comment">;</span>
//randomElement = myStuff[Math<span class="preprocessor">.ceil</span>(Math<span class="preprocessor">.random</span>() * myStuff<span class="preprocessor">.length</span>)]<span class="comment">;</span>
//randomElement = myStuff[Math<span class="preprocessor">.random</span>(myStuff<span class="preprocessor">.length</span>)]<span class="comment">;</span>
//randomElement = Math<span class="preprocessor">.random</span>(myStuff<span class="preprocessor">.length</span>)<span class="comment">;</span>
alert (randomElement)<span class="comment">;</span>
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will detect which DOM <span class="keyword">element</span> has <span class="operator">the</span> focus?
</code></pre><p>Answers</p>
<pre><code>document<span class="preprocessor">.activeElement</span> &#x2611;&#xFE0F;
document<span class="preprocessor">.ready</span>
document<span class="preprocessor">.referrer</span>
document<span class="preprocessor">.getelementbyid</span>
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will check whether <span class="operator">the</span> <span class="built_in">variable</span> vRast exists <span class="operator">or</span> <span class="operator">not</span>?
</code></pre><p>Answers</p>
<pre><code><span class="keyword">if</span> (<span class="keyword">typeof</span> vRast=<span class="string">&quot;undefined&quot;</span>) {}
<span class="keyword">if</span> (<span class="keyword">typeof</span> vRast ==<span class="string">&quot;undefined&quot;</span>) {} &#x2611;&#xFE0F;
<span class="keyword">if</span> (vRast.defined =<span class="keyword">true</span>) {}
<span class="keyword">if</span> (vRast.defined ==<span class="keyword">true</span>) {}
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following will change <span class="keyword">the</span> color <span class="keyword">of</span> a <span class="property">paragraph</span>&apos;s <span class="type">text</span> <span class="keyword">to</span> blue when a user hovers <span class="keyword">over</span> <span class="keyword">it</span>, <span class="keyword">and</span> reset <span class="keyword">it</span> <span class="keyword">back</span> <span class="keyword">to</span> black when <span class="keyword">the</span> user hovers out?
</code></pre><p>Answers</p>
<pre><code>&lt;p onmouseover=<span class="string">&quot;style.color=&apos;black&apos;&quot;</span> onmouseout=<span class="string">&quot;style.color=&apos;blue&apos;&quot;</span>&gt; The <span class="type">text</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="property">paragraph</span>..&lt;/p&gt;
&lt;p onmouseover=<span class="string">&quot;style.color=&apos;blue&apos;&quot;</span> onmouseout=<span class="string">&quot;style.color=&apos;black&apos;&quot;</span>&gt; The <span class="type">text</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="property">paragraph</span>..&lt;/p&gt; &#x2611;&#xFE0F;
&lt;p onmouseout=<span class="string">&quot;style.color=&apos;blue&apos;&quot;</span>&gt; The <span class="type">text</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="property">paragraph</span>..&lt;/p&gt;
&lt;p onmouseover=<span class="string">&quot;style.color=&apos;blue&apos;&quot;</span>&gt; The <span class="type">text</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="property">paragraph</span>..&lt;/p&gt;
&lt;p onmousein=<span class="string">&quot;style.color=&apos;blue&apos;&quot;</span> onmouseout=<span class="string">&quot;style.color=&apos;black&apos;&quot;</span>&gt; The <span class="type">text</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="property">paragraph</span>..&lt;/p&gt;
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following statements <span class="keyword">is</span> correct?
</code></pre><p>Answers</p>
<pre><code>There <span class="keyword">is</span> no undefined property <span class="keyword">in</span> JavaScript.
Undefined <span class="keyword">object</span> properties can be <span class="keyword">checked</span> <span class="keyword">using</span> the following code: <span class="keyword">if</span> (<span class="keyword">typeof</span> something == <span class="keyword">null</span>)     alert(<span class="string">&quot;something is undefined&quot;</span>);
It <span class="keyword">is</span> not possible to check <span class="keyword">for</span> undefined <span class="keyword">object</span> properties <span class="keyword">in</span> JavaScript.
Undefined <span class="keyword">object</span> properties can be <span class="keyword">checked</span> <span class="keyword">using</span> the following code: <span class="keyword">if</span> (<span class="keyword">typeof</span> something === <span class="string">&quot;undefined&quot;</span>)     alert(<span class="string">&quot;something is undefined&quot;</span>);
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following results <span class="keyword">is</span> returned <span class="keyword">by</span> <span class="keyword">the</span> JavaScript operator <span class="string">&quot;typeof&quot;</span> <span class="keyword">for</span> <span class="keyword">the</span> keyword <span class="string">&quot;null&quot;</span>?
</code></pre><p>Answers</p>
<pre><code><span class="function"><span class="keyword">function</span></span>
object &#x2611;&#xFE0F;
<span class="keyword">string</span>
<span class="built_in">number</span>
</code></pre><p><a href="http://odesk-tests.com/tests/200/questions/27912" target="_blank" rel="external">http://odesk-tests.com/tests/200/questions/27912</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Questions to check whether you understand js.</p>
]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css tests]]></title>
    <link href="http://blog.gyf1.com/2015/01/22/css-tests/"/>
    <id>http://blog.gyf1.com/2015/01/22/css-tests/</id>
    <published>2015-01-22T12:09:03.000Z</published>
    <updated>2015-01-26T01:06:37.000Z</updated>
    <content type="html"><![CDATA[<p>Tests to check whether you really know css.</p>
<a id="more"></a>

<p>Question</p>
<pre><code>Can <span class="operator">a</span> percentage <span class="built_in">value</span> be given <span class="operator">in</span> <span class="operator">a</span> ruby-align property?
</code></pre><p>Answers B</p>
<pre><code><span class="literal">A</span>. Yes
B. No
</code></pre><p>Question</p>
<pre><code>Consider the following code snippet:
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;sectors&quot;</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;A&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;B&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;C&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;D&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;E&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
With these style rules:
<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
    <span class="id">#sectors</span> &gt; <span class="tag">div</span> <span class="rules">{
        <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
        <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80</span>px</span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">80</span>px</span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">16</span>px</span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value">red</span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
        <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    <span class="rule">}</span></span>
    <span class="id">#sectors</span> &gt; <span class="tag">div</span><span class="pseudo">::after</span> <span class="rules">{
        <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="function">attr(id)</span> <span class="string">&apos;-Block&apos;</span></span></span>;
    <span class="rule">}</span></span>
    <span class="id">#sectors</span> &gt; <span class="tag">div</span><span class="class">.changecolor</span> <span class="rules">{
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;
    <span class="rule">}</span></span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
Which of the following code snippets when inserted into CSS will change the A and B div&#x2019;s color from red to blue?
</code></pre><p>Answers A</p>
<pre><code><span class="tag">A</span>. <span class="tag">In</span> <span class="tag">style</span> <span class="tag">rule</span> <span class="tag">add</span> <span class="tag">this</span> <span class="tag">code</span>  &#x201C;<span class="id">#sectors</span> &gt; <span class="tag">div</span><span class="pseudo">:not(</span><span class="class">.C</span>)<span class="pseudo">:not(</span><span class="class">.D</span>)<span class="pseudo">:not(</span><span class="class">.E</span>) <span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;<span class="rule">}</span></span>&#x201D;
<span class="tag">B</span>. <span class="tag">In</span> <span class="tag">style</span> <span class="tag">rule</span> <span class="tag">add</span> <span class="tag">this</span> <span class="tag">code</span>  &#x201C;<span class="id">#sectors</span> &gt; <span class="tag">div</span><span class="pseudo">:not(</span><span class="class">.C</span>, <span class="class">.D</span>, <span class="class">.E</span>) <span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;<span class="rule">}</span></span>&#x201D;
<span class="tag">C</span>. <span class="tag">Both</span> <span class="tag">A</span> <span class="tag">and</span> <span class="tag">B</span>
<span class="tag">D</span>. <span class="tag">None</span> <span class="tag">of</span> <span class="tag">the</span> <span class="tag">above</span>
</code></pre><p>Question</p>
<pre><code>Consider <span class="operator">the</span> following code:  body { <span class="keyword">text</span>-<span class="built_in">replace</span>: <span class="string">&quot;a&quot;</span> <span class="string">&quot;b&quot;</span> <span class="string">&quot;b&quot;</span> <span class="string">&quot;c&quot;</span> }
What will be <span class="operator">the</span> output <span class="operator">of</span> <span class="operator">the</span> following <span class="keyword">string</span> <span class="keyword">if</span> <span class="operator">the</span> <span class="keyword">text</span>-<span class="built_in">replace</span> style is implemented?  andy lives behind cafe
</code></pre><p>Answers B</p>
<pre><code>A. ndy lives behind cbfe
B. cndy lives cehind ccfe
<span class="keyword">C</span>. andy lives behind cafe
<span class="keyword">D</span>. andy lives cehind bafe
</code></pre><p>Question</p>
<pre><code>Consider <span class="keyword">the</span> following code:  border-opacity:<span class="number">0.7</span>;
Given a <span class="keyword">div</span> element <span class="keyword">that</span> needs <span class="keyword">to</span> have a transparent red border,
which <span class="keyword">of</span> <span class="keyword">the</span> following code samples will work <span class="keyword">in</span> conjunction <span class="keyword">with</span> <span class="keyword">the</span> code <span class="keyword">above</span> <span class="keyword">to</span> accomplish <span class="keyword">the</span> requirement?
</code></pre><p>Answers A</p>
<pre><code><span class="tag">A</span>. <span class="attribute">border</span><span class="value">: <span class="number">1</span>px solid rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span>
<span class="tag">B</span>. <span class="attribute">border</span><span class="value">: <span class="number">1</span>px solid rgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span>
C. <span class="attribute">border</span><span class="value">: <span class="number">1</span>px solid rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span>
D. <span class="attribute">border</span><span class="value">: <span class="number">1</span>px solid red;</span> <span class="attribute">opacity</span><span class="value">: <span class="number">0.7</span>;</span>
</code></pre><p>Question</p>
<pre><code>Consider the following code:  div[class^=<span class="string">&quot;stronger&quot;</span>] { } {em <span class="keyword">...</span> }  Which of the following statements is true?
</code></pre><p>Answers A</p>
<pre><code>A. It applies <span class="keyword">the</span> rule only <span class="function_start"><span class="keyword">on</span></span> divs who belong <span class="keyword">to</span> a <span class="type">class</span> <span class="keyword">that</span> <span class="keyword">begins with</span> <span class="string">&quot;stronger&quot;</span>.
B. It applies <span class="keyword">the</span> rule only <span class="function_start"><span class="keyword">on</span></span> divs <span class="keyword">of</span> <span class="type">class</span> <span class="string">&quot;stronger&quot;</span>.
C. It applies <span class="keyword">the</span> rule only <span class="function_start"><span class="keyword">on</span></span> divs who belong <span class="keyword">to</span> a <span class="type">class</span> which <span class="keyword">end</span> <span class="keyword">with</span> <span class="string">&quot;stronger&quot;</span>.
D. It applies <span class="keyword">the</span> rule only <span class="function_start"><span class="keyword">on</span></span> divs who belong <span class="keyword">to</span> a <span class="type">class</span> which <span class="keyword">does not contain</span> <span class="string">&quot;stronger&quot;</span> <span class="keyword">in</span> <span class="keyword">its</span> <span class="property">name</span>.
</code></pre><p>Question</p>
<pre><code>Consider <span class="operator">the</span> following font definition:  font-weight:<span class="keyword">normal</span>  What is <span class="operator">the</span> other way <span class="operator">of</span> getting <span class="operator">the</span> same <span class="built_in">result</span>?
</code></pre><p>Answers C</p>
<pre><code>A<span class="built_in">.</span> font<span class="attribute">-weight</span>: <span class="number">100</span>
B<span class="built_in">.</span> font<span class="attribute">-weight</span>: <span class="number">900</span>
C<span class="built_in">.</span> font<span class="attribute">-weight</span>: <span class="number">400</span>
D<span class="built_in">.</span> font<span class="attribute">-weight</span>: <span class="number">700</span>
</code></pre><p>Question</p>
<pre><code>Consider the following problem:
When trying to apply a CSS3 style to a label of a checked radio button like this:
....
<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
<span class="tag">label</span><span class="pseudo">:checked</span> <span class="rules">{
    <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> bold</span></span>;
<span class="rule">}</span></span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
....
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">&quot;radio&quot;</span> <span class="attribute">id</span>=<span class="value">&quot;rad&quot;</span> <span class="attribute">name</span>=<span class="value">&quot;radio&quot;</span>/&gt;</span>
<span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">&quot;rad&quot;</span>&gt;</span>A Label<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
This does not produce the desired effect.
Which of the following snippets will correct issue?
</code></pre><p>Answers C</p>
<pre><code>A. It is not possible <span class="keyword">to</span> style.
B. &lt;input id=<span class="string">&quot;rad&quot;</span> <span class="class"><span class="keyword">type</span>=</span><span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;rad&quot;</span>&gt;&lt;label <span class="string">&quot;rad&quot;</span>&gt;A Label&lt;/label&gt;
C. input[<span class="class"><span class="keyword">type</span>=</span><span class="string">&quot;radio&quot;</span>]:checked+label{ font-weight: bold; }
D. input[<span class="class"><span class="keyword">type</span>=</span><span class="string">&quot;radio&quot;</span>]:checked@label{ font-weight: bold; }
</code></pre><p>Question</p>
<pre><code>For <span class="operator">the</span> <span class="built_in">clear</span> property, which <span class="operator">of</span> <span class="operator">the</span> following <span class="built_in">value</span> is <span class="operator">not</span> valid?
</code></pre><p>Answers D</p>
<pre><code><span class="tag">A</span>. <span class="attribute">none</span>
<span class="tag">B</span>. <span class="attribute">left</span>
C. <span class="attribute">right</span>
D. <span class="attribute">top</span>
</code></pre><p>Question</p>
<pre><code><span class="tag">Given</span> <span class="tag">that</span> <span class="tag">one</span> <span class="tag">div</span> <span class="tag">element</span> <span class="tag">needs</span> <span class="tag">to</span> <span class="tag">be</span> <span class="tag">hidden</span> <span class="tag">and</span> <span class="tag">on</span> <span class="tag">active</span> <span class="tag">state</span> <span class="tag">needs</span> <span class="tag">to</span> <span class="tag">be</span> <span class="tag">displayed</span>, <span class="tag">what</span> <span class="tag">will</span> <span class="tag">be</span> <span class="tag">the</span> <span class="tag">output</span> <span class="tag">of</span> <span class="tag">the</span> <span class="tag">following</span> <span class="tag">code</span>?
<span class="tag">div</span> <span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> opacity <span class="number">1</span>s ease-out</span></span>;
    <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0</span></span></span>;
<span class="rule">}</span></span>
<span class="tag">div</span><span class="class">.active</span> <span class="rules">{
    <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
<span class="rule">}</span></span>
</code></pre><p>Answers A</p>
<pre><code>A. <span class="keyword">On</span> active state the element <span class="keyword">is</span> displayed.
B. <span class="keyword">On</span> active state the element<span class="attribute">&apos;s</span> opacity <span class="keyword">is</span> changed <span class="keyword">to</span> <span class="number">1.</span>
C. <span class="keyword">On</span> active state the element<span class="attribute">&apos;s</span> opacity <span class="keyword">is</span> changed <span class="keyword">to</span> <span class="number">0.</span>
D. Nothing will be shown.
</code></pre><p>Question</p>
<pre><code>Given <span class="keyword">the</span> following problem:
A drop shadow needs <span class="keyword">to</span> appear only <span class="keyword">at</span> <span class="keyword">the</span> bottom,
<span class="keyword">and</span> no images should be used.
Consider <span class="keyword">the</span> following code:
-moz-box-shadow: <span class="number">0</span>px <span class="number">4</span>px <span class="number">4</span>px <span class="comment">#000;</span>
-webkit-box-shadow: <span class="number">0</span>px <span class="number">4</span>px <span class="number">4</span>px <span class="comment">#000;</span>
box-shadow-bottom: <span class="number">5</span>px <span class="comment">#000;</span>

However, this produces shadows <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> <span class="property">rest</span> <span class="keyword">of</span> <span class="keyword">the</span> element.
Which <span class="keyword">of</span> <span class="keyword">the</span> following code snippets will correct <span class="keyword">the</span> issue?
</code></pre><p>Answers B</p>
<pre><code>A<span class="built_in">.</span>  border<span class="attribute">-bottom</span>:<span class="number">5</span>px solid <span class="variable">#ffffff</span>;
    <span class="attribute">-webkit</span><span class="attribute">-box</span><span class="attribute">-shadow</span>: <span class="number">0</span>px <span class="number">5</span>px <span class="variable">#000000</span>;
    <span class="attribute">-moz</span><span class="attribute">-box</span><span class="attribute">-shadow</span>: <span class="number">0</span>px <span class="number">5</span>px <span class="variable">#000000</span>;
    box<span class="attribute">-shadow</span>: <span class="number">0</span>px <span class="number">5</span>px <span class="variable">#000000</span>;
B<span class="built_in">.</span>  <span class="attribute">-webkit</span><span class="attribute">-box</span><span class="attribute">-shadow</span>: <span class="number">0</span> <span class="number">4</span>px <span class="number">4</span>px <span class="subst">-</span><span class="number">2</span>px <span class="variable">#000000</span>;
    <span class="attribute">-moz</span><span class="attribute">-box</span><span class="attribute">-shadow</span>: <span class="number">0</span> <span class="number">4</span>px <span class="number">4</span>px <span class="subst">-</span><span class="number">2</span>px <span class="variable">#000000</span>;
    box<span class="attribute">-shadow</span>: <span class="number">0</span> <span class="number">4</span>px <span class="number">4</span>px <span class="subst">-</span><span class="number">2</span>px <span class="variable">#000000</span>;
C<span class="built_in">.</span>  <span class="attribute">-webkit</span><span class="attribute">-box</span><span class="attribute">-shadow</span>: <span class="number">0</span> <span class="number">4</span>px <span class="number">4</span>px <span class="subst">-</span><span class="number">2</span>px inside  <span class="variable">#000000</span>;
    <span class="attribute">-moz</span><span class="attribute">-box</span><span class="attribute">-shadow</span>: <span class="number">0</span> <span class="number">4</span>px <span class="number">4</span>px <span class="subst">-</span><span class="number">2</span>px inside <span class="variable">#000000</span>;
    box<span class="attribute">-shadow</span>: <span class="number">0</span> <span class="number">4</span>px <span class="number">4</span>px <span class="subst">-</span><span class="number">2</span>px inside  <span class="variable">#000000</span>;
D<span class="built_in">.</span>  <span class="literal">None</span> of these<span class="built_in">.</span>
</code></pre><p>Question</p>
<pre><code>Is <span class="keyword">it</span> possible <span class="built_in">to</span> <span class="built_in">combine</span> <span class="operator">a</span> background image <span class="operator">and</span> CSS3 gradients?
</code></pre><p>Answers B</p>
<pre><code>A. It <span class="keyword">is</span> possible only <span class="keyword">when</span> two separate styles are used, <span class="string">&quot;background-image&quot;</span> <span class="keyword">and</span> <span class="string">&quot;gradient&quot;</span>, <span class="keyword">on</span> an HTML tag.
B. It <span class="keyword">is</span> possible only <span class="keyword">when</span> <span class="string">&quot;background-image&quot;</span> <span class="keyword">is</span> used.
C. It <span class="keyword">is</span> possible only <span class="keyword">when</span> layered HTML tags are used, <span class="string">&quot;background-image&quot;</span> <span class="keyword">and</span> <span class="string">&quot;gradient&quot;</span>.
D. It <span class="keyword">is</span> <span class="keyword">not</span> possible <span class="keyword">to</span> combine a background image <span class="keyword">and</span> CSS3 gradients.
</code></pre><p>Question</p>
<pre><code>Is <span class="keyword">it</span> possible <span class="built_in">to</span> use transition animations <span class="operator">with</span> <span class="operator">a</span> gradient background?
</code></pre><p>Answers B</p>
<pre><code>A. <span class="literal">YES</span>
B. <span class="literal">NO</span>
</code></pre><p>Question</p>
<pre><code>Is there <span class="operator">a</span> way <span class="built_in">to</span> <span class="built_in">create</span> <span class="operator">a</span> pure CSS3 <span class="keyword">text</span> color gradient?
</code></pre><p>Answers C</p>
<pre><code>A. Yes, using <span class="keyword">the</span> <span class="type">text</span>-gradient <span class="keyword">property</span>.
B. Yes, <span class="keyword">but</span> only <span class="keyword">for</span> headings.
C. There <span class="keyword">is</span> no way <span class="keyword">to</span> do a <span class="type">text</span> color gradient <span class="keyword">with</span> CSS3.
D. None <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">above</span>.
</code></pre><p>Question</p>
<pre><code><span class="tag">Read</span> <span class="tag">the</span> <span class="tag">following</span>:
<span class="at_rule">@<span class="keyword">page</span></span> <span class="tag">rotated</span> <span class="rules">{<span class="rule"><span class="attribute">size</span>:<span class="value"> landscape</span></span></span>}
<span class="tag">TABLE</span> <span class="rules">{<span class="rule"><span class="attribute">page</span>:<span class="value"> rotated</span></span>; <span class="rule"><span class="attribute">page-break-before</span>:<span class="value"> right</span></span></span>}
<span class="tag">What</span> <span class="tag">will</span> <span class="tag">this</span> <span class="tag">code</span> <span class="tag">do</span>?
</code></pre><p>Answers A</p>
<pre><code>A. It will <span class="keyword">put</span> all tables <span class="function_start"><span class="keyword">on</span></span> a right-hand side landscape page.
B. It will rotate <span class="keyword">the</span> page <span class="keyword">if</span> <span class="keyword">the</span> table <span class="keyword">is</span> positioned <span class="keyword">at</span> <span class="keyword">the</span> right side.
C. It will keep <span class="keyword">the</span> table <span class="keyword">in</span> <span class="keyword">the</span> landscape position <span class="keyword">and</span> rotate <span class="keyword">the</span> page.
D. None <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">above</span>
</code></pre><p>Question</p>
<pre><code>State whether <span class="keyword">the</span> following statement <span class="keyword">is</span> <span class="constant">true</span> <span class="keyword">or</span> <span class="constant">false</span>.
If a parent element display <span class="keyword">property</span> <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> none, <span class="keyword">its</span> children too will <span class="keyword">not</span> be rendered.
</code></pre><p>Answers A</p>
<pre><code><span class="literal">A</span>. <span class="literal">True</span>
B. <span class="literal">False</span>
</code></pre><p>Question</p>
<pre><code><span class="tag">Suppose</span> <span class="tag">that</span> <span class="tag">a</span> &lt;<span class="tag">tr</span>&gt; <span class="tag">tag</span> <span class="tag">has</span> 10 &lt;<span class="tag">td</span>&gt; <span class="tag">tags</span>.
<span class="tag">In</span> <span class="tag">this</span> <span class="tag">case</span> <span class="tag">which</span> <span class="tag">statement</span> <span class="tag">is</span> <span class="tag">correct</span> <span class="tag">given</span> <span class="tag">the</span> <span class="tag">following</span>?
<span class="tag">td</span><span class="pseudo">:nth-child(3n+0)</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> orange</span></span>;
<span class="rule">}</span></span>
</code></pre><p>Answers D</p>
<pre><code>A. It returns a syntax <span class="keyword">error</span>.
B. The background color <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">fourth</span> td will be orange.
C. The background color <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">third</span> td will be orange.
D. The background color <span class="keyword">of</span> <span class="keyword">every</span> <span class="keyword">third</span> td will be orange.
</code></pre><p>Question</p>
<pre><code>The <span class="built_in">min</span>-width property cannot be applied <span class="built_in">to</span> <span class="operator">the</span> following <span class="keyword">element</span>:
</code></pre><p>Answers C</p>
<pre><code>A. button
B. span
C. <span class="built_in">table</span> row
</code></pre><p>Question</p>
<pre><code>There are various types <span class="operator">of</span> input fields <span class="operator">in</span> <span class="operator">a</span> HTML page.
Choose <span class="operator">the</span> appropriate CSS3 code which will have <span class="operator">an</span> effect <span class="command"><span class="keyword">on</span> <span class="title">all</span> <span class="title">inputs</span>, <span class="title">except</span> <span class="title">checkbox</span> <span class="title">and</span>  <span class="title">radio</span>.</span>
</code></pre><p>Answers B</p>
<pre><code>A. form input:not([<span class="keyword">type</span>=<span class="string">&quot;radio&quot;</span>], [<span class="keyword">type</span>=<span class="string">&quot;checkbox&quot;</span>]) { }
B. input:not([<span class="keyword">type</span>=<span class="string">&quot;radio&quot;</span>]):not([<span class="keyword">type</span>=<span class="string">&quot;checkbox&quot;</span>]) {  }
C. input:not([<span class="keyword">type</span>=<span class="string">&quot;radio &amp; checkbox&quot;</span>]) {  }
D. input:!([<span class="keyword">type</span>=<span class="string">&quot;radio&quot;</span>]) , input:!([<span class="keyword">type</span>=<span class="string">&quot;checkbox&quot;</span>]) {  }
</code></pre><p>Question</p>
<pre><code>To apply style <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">every</span> input element except <span class="type">text</span>, which <span class="keyword">of</span> <span class="keyword">the</span> following selectors should be used?
</code></pre><p>Answers B</p>
<pre><code>A. input:([!<span class="class"><span class="keyword">type</span>=</span><span class="string">&apos;text&apos;</span>])
B. input:not([<span class="class"><span class="keyword">type</span>=</span><span class="string">&quot;text&quot;</span>])
C. input:not([<span class="class"><span class="keyword">type</span>!=</span><span class="string">&quot;text&quot;</span>])
D. input:([<span class="class"><span class="keyword">type</span>!=</span><span class="string">&apos;text&apos;</span>])
</code></pre><p>Question</p>
<pre><code><span class="keyword">Using</span> height <span class="keyword">on</span> transitions <span class="keyword">is</span> <span class="keyword">not</span> possible <span class="keyword">with</span>:
</code></pre><p>Answers A</p>
<pre><code><span class="tag">A</span>. <span class="tag">height</span><span class="pseudo">:auto</span>
<span class="tag">B</span>. <span class="tag">height</span><span class="pseudo">:100</span>%
<span class="tag">C</span>. <span class="tag">height</span><span class="pseudo">:0</span>
<span class="tag">D</span>. <span class="tag">max-height</span><span class="pseudo">:100</span>%
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> the best <span class="function"><span class="keyword">method</span> <span class="title">to</span> <span class="title">select</span> <span class="title">all</span> <span class="title">elements</span> <span class="title">except</span> <span class="title">for</span> <span class="title">the</span> <span class="title">last</span> <span class="title">one</span> <span class="title">in</span> <span class="title">an</span> <span class="title">unordered</span> <span class="title">list</span>?</span>
</code></pre><p>Answers B</p>
<pre><code>A. Adding <span class="operator">a</span> class <span class="built_in">to</span> <span class="keyword">each</span> &lt;li&gt; <span class="keyword">element</span> but <span class="keyword">last</span>
B. Using li:<span class="operator">not</span>(:<span class="keyword">last</span>-child) css selector
C. Using li:<span class="keyword">last</span>-child selector
D. None <span class="operator">of</span> <span class="operator">the</span> above
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> default value <span class="keyword">of</span> <span class="keyword">the</span> animation-direction <span class="keyword">property</span>?
</code></pre><p>Answers B</p>
<pre><code>A. none
B. normal
<span class="keyword">C</span>. alternate
<span class="keyword">D</span>. inherited
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> default value <span class="keyword">of</span> <span class="keyword">the</span> transform-style <span class="keyword">property</span>?
</code></pre><p>Answers B</p>
<pre><code>A. preserve-<span class="number">3</span>d
B. flat
<span class="keyword">C</span>. none
<span class="keyword">D</span>. preserve
</code></pre><p>Question</p>
<pre><code>What is the difference between <span class="attribute">float</span><span class="pseudo">:left</span>; vs <span class="attribute">display</span><span class="value">:inline-block;</span> ?
</code></pre><p>Answers BC</p>
<pre><code>A. There <span class="keyword">is</span> no difference, both <span class="keyword">of</span> them have <span class="keyword">the</span> same results.
B. display:inline-block; adds whitespace <span class="keyword">between</span> <span class="keyword">the</span> elements.
C. float:left; collapses <span class="keyword">the</span> parent element <span class="function_start"><span class="keyword">on</span></span> itself.
D. None <span class="keyword">of</span> these.
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> initial value <span class="keyword">of</span> <span class="keyword">the</span> animation-iteration-<span class="command">count</span> <span class="keyword">property</span>?
</code></pre><p>Answers A</p>
<pre><code>A. <span class="number">1</span>
B. <span class="number">5</span>
<span class="keyword">C</span>. <span class="keyword">None</span>
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> initial value <span class="keyword">of</span> <span class="keyword">the</span> font-size <span class="keyword">property</span>?
</code></pre><p>Answers B</p>
<pre><code>A. small
B. medium
<span class="keyword">C</span>. large
<span class="keyword">D</span>. default
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> initial value <span class="keyword">of</span> <span class="keyword">the</span> marquee-speed <span class="keyword">property</span>?
</code></pre><p>Answers B</p>
<pre><code>A. slow
B. normal
<span class="keyword">C</span>. fast
<span class="keyword">D</span>. none
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> initial value <span class="keyword">of</span> <span class="keyword">the</span> opacity <span class="keyword">property</span>?
</code></pre><p>Answers A</p>
<pre><code>A. <span class="number">1</span>
B. <span class="keyword">normal</span>
C. <span class="constant">none</span>
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> maximum value <span class="keyword">that</span> can be <span class="keyword">given</span> <span class="keyword">to</span> <span class="keyword">the</span> voice-volume <span class="keyword">property</span>?
</code></pre><p>Answers B</p>
<pre><code>A. <span class="number">10</span>
B. <span class="number">100</span>
<span class="keyword">C</span>. <span class="number">500</span>
<span class="keyword">D</span>. <span class="keyword">None</span> of the above
</code></pre><p>Question</p>
<pre><code>What <span class="keyword">is</span> <span class="keyword">the</span> range <span class="keyword">of</span> values (<span class="keyword">in</span> decimal notation) <span class="keyword">that</span> can be specified <span class="keyword">in</span> <span class="keyword">the</span> RGB color model?
</code></pre><p>Answers B</p>
<pre><code>A. <span class="number">0</span> <span class="keyword">to</span> <span class="number">256</span>
B. <span class="number">0</span> <span class="keyword">to</span> <span class="number">255</span>
C. -<span class="number">250</span> <span class="keyword">to</span> <span class="number">250</span>
D. -<span class="number">255</span> <span class="keyword">to</span> <span class="number">255</span>
</code></pre><p>Question</p>
<pre><code>What will be the output of the following code?
...
<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
<span class="class">.foo</span> <span class="rules">{
 <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100</span>px</span></span>;
 <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">50</span>px</span></span>;
 <span class="rule"><span class="attribute">border-width</span>:<span class="value"><span class="number">3</span>px</span></span>;
 <span class="rule"><span class="attribute">-webkit-border-image</span>:<span class="value">
 <span class="function">-webkit-gradient(linear, <span class="number">0</span> <span class="number">0</span>, <span class="number">0</span> <span class="number">100</span>%, <span class="function">from(black)</span>, <span class="function">to(red)</span>)</span> <span class="number">1</span> <span class="number">100</span>%</span></span>;
 <span class="rule"><span class="attribute">-webkit-border-image</span>:<span class="value">       <span class="function">-webkit-linear-gradient(black, red)</span> <span class="number">1</span> <span class="number">100</span>%</span></span>;
 <span class="rule"><span class="attribute">-o-border-image</span>:<span class="value">           <span class="function">-o-linear-gradient(black, red)</span>) <span class="number">1</span> <span class="number">100</span>%</span></span>;
  <span class="rule"><span class="attribute">-moz-border-image</span>:<span class="value">         <span class="function">-moz-linear-gradient(black, red)</span> <span class="number">1</span> <span class="number">100</span>%</span></span>;
  <span class="rule">}</span></span>
  </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
  ...
  <span class="tag">&lt;<span class="title">div</span>  <span class="attribute">class</span>=<span class="value">&quot;foo&quot;</span>&gt;</span>Lorem<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>Answers C</p>
<pre><code>A. The <span class="keyword">text</span> <span class="string">&quot;Lorem&quot;</span> will be colored <span class="keyword">black</span>-red.
B. The <span class="operator">div</span> <span class="keyword">element</span> will be colored <span class="keyword">black</span>-red.
C. The border <span class="operator">of</span> <span class="operator">div</span> <span class="keyword">element</span> will be colored <span class="keyword">black</span>-red.
D. None <span class="operator">of</span> these.
</code></pre><p>Question</p>
<pre><code><span class="tag">What</span> <span class="tag">will</span> <span class="tag">be</span> <span class="tag">the</span> <span class="tag">output</span> <span class="tag">of</span> <span class="tag">the</span> <span class="tag">following</span> <span class="tag">rule</span>?  <span class="tag">em</span> <span class="rules">{ <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">1</span>)</span> </span></span></span>}
</code></pre><p>Answers C</p>
<pre><code><span class="tag">A</span>. <span class="attribute">Opacity</span> 1 with <span class="value">solid</span> red <span class="attribute">color</span>
<span class="tag">B</span>. <span class="attribute">Opacity</span> 0 with <span class="value">solid</span> blue <span class="attribute">color</span>
C. <span class="attribute">Opacity</span> 0 with <span class="value">solid</span> red <span class="attribute">color</span>
D. <span class="attribute">Opacity</span> 1 with <span class="value">solid</span> blue <span class="attribute">color</span>
E. <span class="attribute">None</span> of these.
</code></pre><p>Question</p>
<pre><code>What will happen <span class="keyword">if</span> <span class="operator">the</span> cursor property <span class="built_in">value</span> is <span class="built_in">set</span> <span class="built_in">to</span> <span class="constant">none</span>?
</code></pre><p>Answers B</p>
<pre><code><span class="tag">A</span>. The <span class="value">default</span> <span class="attribute">cursor</span> will be displayed.
<span class="tag">B</span>. No <span class="attribute">cursor</span> will be displayed.
C. <span class="tag">A</span> <span class="value">pointer</span> <span class="attribute">cursor</span> will be displayed.
D. <span class="tag">A</span> <span class="value">text</span> <span class="attribute">cursor</span> will be displayed.
</code></pre><p>Question</p>
<pre><code>What will happen <span class="keyword">if</span> <span class="keyword">the</span> pause <span class="keyword">property</span> <span class="keyword">is</span> used <span class="keyword">as</span> follows?
h2 { pause: <span class="number">40</span>s <span class="number">60</span>s }
</code></pre><p>Answers A</p>
<pre><code>A. pause-<span class="keyword">before</span> will be <span class="built_in">set</span> <span class="built_in">to</span> <span class="number">40</span> <span class="built_in">seconds</span> <span class="operator">and</span> pause-<span class="keyword">after</span> will be <span class="built_in">set</span> <span class="built_in">to</span> <span class="number">60</span> <span class="built_in">seconds</span>.
B. pause-<span class="keyword">after</span> will be <span class="built_in">set</span> <span class="built_in">to</span> <span class="number">40</span> <span class="built_in">seconds</span> <span class="operator">and</span> pause-<span class="keyword">before</span> will be <span class="built_in">set</span> <span class="built_in">to</span> <span class="number">60</span> <span class="built_in">seconds</span>.
C. pause-<span class="keyword">after</span> <span class="operator">and</span> pause-<span class="keyword">before</span> will be <span class="built_in">set</span> <span class="built_in">to</span> <span class="number">40</span> <span class="built_in">seconds</span>.
D. pause-<span class="keyword">after</span> <span class="operator">and</span> pause-<span class="keyword">before</span> will be <span class="built_in">set</span> <span class="built_in">to</span> <span class="number">60</span> <span class="built_in">seconds</span>.
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following are <span class="operator">not</span> valid values <span class="keyword">for</span> <span class="operator">the</span> target-<span class="built_in">new</span> property?
</code></pre><p>Answers DE</p>
<pre><code>A. window
B. tab
<span class="keyword">C</span>. none
<span class="keyword">D</span>. parent
<span class="keyword">E</span>. current
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following can be used <span class="built_in">to</span> <span class="built_in">add</span> <span class="operator">a</span> shadow around <span class="operator">the</span> <span class="operator">div</span> <span class="keyword">element</span> below?
&lt;<span class="operator">div</span>&gt;Lorem ipsum&lt;/<span class="operator">div</span>&gt;
</code></pre><p>Answers A</p>
<pre><code><span class="tag">A</span>. <span class="attribute">box-shadow</span><span class="value">: <span class="number">0</span> <span class="number">0</span> <span class="number">8</span>px <span class="number">2</span>px <span class="hexcolor">#888</span>;</span>
<span class="tag">B</span>. <span class="attribute">border</span>-shadow<span class="value">: <span class="number">0</span> <span class="number">0</span> <span class="number">8</span>px <span class="number">2</span>px <span class="hexcolor">#888</span>;</span>
C. <span class="tag">div</span>-shadow<span class="value">: <span class="number">8</span>px <span class="number">2</span>px <span class="number">0</span> <span class="number">0</span> <span class="hexcolor">#888</span>;</span>
D. <span class="attribute">None</span> of these
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following filters <span class="keyword">does</span> SVG support?
</code></pre><p>Answers B</p>
<pre><code>A. SVG supports only CSS filters.
B. SVG supports CSS filters <span class="keyword">as</span> well <span class="keyword">as</span> <span class="string">&apos;filter&apos;</span> <span class="keyword">property</span> <span class="keyword">of</span> SVG
C. SVG supports only <span class="string">&apos;filter&apos;</span> <span class="keyword">property</span> <span class="keyword">of</span> SVG
D. SVG does <span class="keyword">not</span> supports any filters
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following is <span class="operator">not</span> <span class="operator">a</span> valid page break?
</code></pre><p>Answers B</p>
<pre><code>A<span class="built_in">.</span> page<span class="attribute">-break</span><span class="attribute">-inside</span>
B<span class="built_in">.</span> page<span class="attribute">-break</span><span class="attribute">-outside</span>
C<span class="built_in">.</span> page<span class="attribute">-break</span><span class="attribute">-before</span>
D<span class="built_in">.</span> page<span class="attribute">-break</span><span class="attribute">-after</span>
E<span class="built_in">.</span> <span class="literal">None</span> of these
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following is <span class="operator">not</span> <span class="operator">a</span> valid <span class="built_in">value</span> <span class="keyword">for</span> <span class="operator">the</span> font-smooth property?
</code></pre><p>Answers D</p>
<pre><code>A. auto
B. never
<span class="keyword">C</span>. always
<span class="keyword">D</span>. normal
<span class="keyword">E</span>. length
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following is <span class="operator">not</span> <span class="operator">a</span> valid <span class="built_in">value</span> <span class="keyword">for</span> <span class="operator">the</span> font-stretch property?
</code></pre><p>Answers</p>
<pre><code>A. condensed
B. normal
<span class="keyword">C</span>. semi-narrower
<span class="keyword">D</span>. expanded
<span class="keyword">E</span>. semi-expanded
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following <span class="keyword">is</span> <span class="keyword">the</span> initial value <span class="keyword">for</span> <span class="keyword">the</span> column-fill <span class="keyword">property</span>?
</code></pre><p>Answers</p>
<pre><code><span class="tag">A</span>. <span class="attribute">auto</span>
<span class="tag">B</span>. balance
C. <span class="attribute">none</span>
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following option <span class="keyword">does</span> <span class="keyword">not</span> exist <span class="keyword">in</span> media groups available <span class="keyword">in</span> CSS3?
</code></pre><p>Answers D</p>
<pre><code><span class="literal">A</span>. continuous <span class="literal">or</span> paged
B. visual <span class="literal">or</span> tactile
C. grid <span class="literal">or</span> bitmap
D. braille <span class="literal">or</span> screen
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following properties allow percentages <span class="operator">in</span> their <span class="built_in">value</span> fields?
</code></pre><p>Answers AD</p>
<pre><code><span class="tag">A</span>. <span class="attribute">font-size</span>
<span class="tag">B</span>. <span class="attribute">font-variant</span>
C. <span class="attribute">font-weight</span>
D. <span class="attribute">line-height</span>
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following properties specifies <span class="operator">the</span> minimum <span class="built_in">number</span> <span class="operator">of</span> <span class="keyword">lines</span> <span class="operator">of</span> <span class="operator">a</span> paragraph that must be left <span class="keyword">at</span> <span class="operator">the</span> bottom <span class="operator">of</span> <span class="operator">a</span> page?
</code></pre><p>Answers A</p>
<pre><code>A. orphans
B. windows
<span class="keyword">C</span>. bottom
<span class="keyword">D</span>. overflow
<span class="keyword">E</span>. <span class="keyword">None</span> of these
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following statements <span class="keyword">is</span> <span class="constant">true</span> <span class="keyword">with</span> regard <span class="keyword">to</span> CSS3 transitions?
</code></pre><p>Answers</p>
<pre><code>A. Using CSS transitions will slow down page upload <span class="operator">and</span> produce lag.
B. The completion <span class="operator">of</span> <span class="operator">a</span> CSS transition generates <span class="operator">a</span> corresponding DOM event.
    An event is fired <span class="keyword">for</span> <span class="keyword">each</span> property that undergoes <span class="operator">a</span> transition.
    This allows <span class="operator">a</span> content developer <span class="built_in">to</span> perform actions that synchronize <span class="operator">with</span> <span class="operator">the</span> completion <span class="operator">of</span> <span class="operator">a</span> transition.
C. CSS transitions allow DOM events <span class="operator">in</span> CSS values <span class="built_in">to</span> occur smoothly over <span class="operator">a</span> specified duration.
D. None <span class="operator">of</span> these
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following styles is <span class="operator">not</span> valid <span class="keyword">for</span> <span class="operator">an</span> image?
</code></pre><p>Answers E</p>
<pre><code>A. img { <span class="built_in">float</span>= left }
B. img { <span class="built_in">float</span>: left here }
C. img { background: <span class="string">&quot;black&quot;</span> }
D. img { border-width: <span class="number">10</span> }
E. All <span class="keyword">of</span> the above
</code></pre><p>Question</p>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> following styles <span class="keyword">is</span> valid?
</code></pre><p>Answers E</p>
<pre><code>A<span class="built_in">.</span> <span class="keyword">order</span>: <span class="string">&quot;none&quot;</span>;
B<span class="built_in">.</span> <span class="keyword">order</span><span class="subst">=</span> <span class="string">&quot;none&quot;</span>;
C<span class="built_in">.</span> <span class="keyword">order</span>: <span class="literal">none</span>;
D<span class="built_in">.</span> <span class="keyword">order</span><span class="subst">=</span> <span class="literal">none</span>;
E<span class="built_in">.</span> <span class="literal">None</span> of these<span class="built_in">.</span>
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will apply <span class="operator">a</span> <span class="keyword">black</span> inner glow <span class="operator">with</span> <span class="number">25</span>% opacity <span class="built_in">to</span> <span class="operator">a</span> page <span class="keyword">element</span>?
</code></pre><p>Answers B</p>
<pre><code><span class="tag">A</span>. <span class="attribute">box-shadow</span><span class="value">: <span class="number">0</span> <span class="number">0</span> <span class="number">8</span>px rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, <span class="number">0.25</span>);</span>
<span class="tag">B</span>. <span class="attribute">box-shadow</span><span class="value">: inset <span class="number">0</span> <span class="number">0</span> <span class="number">8</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.25</span>);</span>
C. <span class="attribute">box-shadow</span><span class="value">: <span class="number">0</span> <span class="number">0</span> <span class="number">8</span>px rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, <span class="number">25</span>%);</span>
D. <span class="attribute">box-shadow</span><span class="value">: inset <span class="number">0</span> <span class="number">0</span> <span class="number">8</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">25</span>%);</span>
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will apply <span class="operator">a</span> gradient transition <span class="built_in">to</span> <span class="comment">#DemoGradient using CSS3?</span>
</code></pre><p>Answers B</p>
<pre><code><span class="tag">A</span>. <span class="at_rule">@<span class="keyword">-webkit-keyframes</span> pulse #DemoGradient </span>{
    0% <span class="rules">{
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-webkit-gradient(linear, left top, left bottom, <span class="function">color-stop(<span class="number">0</span>, <span class="function">rgb(<span class="number">196</span>,<span class="number">222</span>,<span class="number">242</span>)</span>)</span>, <span class="function">color-stop(<span class="number">0.5</span>, <span class="function">rgb(<span class="number">242</span>,<span class="number">242</span>,<span class="number">242</span>)</span>)</span>, <span class="function">color-stop(<span class="number">1</span>, <span class="function">rgb(<span class="number">240</span>,<span class="number">240</span>,<span class="number">240</span>)</span>)</span>)</span></span></span>;
    <span class="rule">}</span></span>
    50% <span class="rules">{
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-webkit-gradient(linear, left top, left bottom, <span class="function">color-stop(<span class="number">0</span>, <span class="function">rgb(<span class="number">222</span>,<span class="number">252</span>,<span class="number">255</span>)</span>)</span>, <span class="function">color-stop(<span class="number">0.5</span>, <span class="function">rgb(<span class="number">242</span>,<span class="number">242</span>,<span class="number">242</span>)</span>)</span>, <span class="function">color-stop(<span class="number">1</span>, <span class="function">rgb(<span class="number">240</span>,<span class="number">240</span>,<span class="number">240</span>)</span>)</span>)</span></span></span>;
    <span class="rule">}</span></span>
    100% <span class="rules">{
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-webkit-gradient(linear, left top, left bottom, <span class="function">color-stop(<span class="number">0</span>, <span class="function">rgb(<span class="number">196</span>,<span class="number">222</span>,<span class="number">242</span>)</span>)</span>, <span class="function">color-stop(<span class="number">0.5</span>, <span class="function">rgb(<span class="number">242</span>,<span class="number">242</span>,<span class="number">242</span>)</span>)</span>, <span class="function">color-stop(<span class="number">1</span>, <span class="function">rgb(<span class="number">240</span>,<span class="number">240</span>,<span class="number">240</span>)</span>)</span>)</span></span></span>;
    <span class="rule">}</span></span>
    }
<span class="tag">B</span>. <span class="id">#DemoGradient</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-webkit-linear-gradient(#C7D3DC,#<span class="number">5</span>B798E)</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-moz-linear-gradient(#C7D3DC,#<span class="number">5</span>B798E)</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-o-linear-gradient(#C7D3DC,#<span class="number">5</span>B798E)</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient(#C7D3DC,#<span class="number">5</span>B798E)</span></span></span>;
    <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> background <span class="number">1</span>s ease-out</span></span>;
    <span class="rule"><span class="attribute">-moz-transition</span>:<span class="value"> background <span class="number">1</span>s ease-out</span></span>;
    <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> background <span class="number">1</span>s ease-out</span></span>;
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> background <span class="number">1</span>s ease-out</span></span>;
    <span class="rule"><span class="attribute">background-size</span>:<span class="value"><span class="number">1</span>px <span class="number">200</span>px</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10</span>px</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1</span>px solid <span class="hexcolor">#839DB0</span></span></span>;
    <span class="rule"><span class="attribute">cursor</span>:<span class="value">pointer</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">150</span>px</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100</span>px</span></span>;
    <span class="rule">}</span></span>
    <span class="id">#DemoGradient</span><span class="pseudo">:Hover</span><span class="rules">{
    <span class="rule"><span class="attribute">background-position</span>:<span class="value"><span class="number">100</span>px</span></span>;
    <span class="rule">}</span></span>
<span class="tag">C</span>.  <span class="tag">It</span> <span class="tag">is</span> <span class="tag">not</span> <span class="tag">possible</span> <span class="tag">to</span> <span class="tag">apply</span> <span class="tag">a</span> <span class="tag">gradient</span> <span class="tag">transition</span> <span class="tag">using</span> <span class="tag">only</span> <span class="tag">CSS3</span>.
</code></pre><p>Question</p>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will <span class="built_in">create</span> <span class="operator">a</span> triangle effect <span class="keyword">using</span> pure CSS3 <span class="command"><span class="keyword">on</span> <span class="title">a</span> <span class="title">white</span> <span class="title">background</span>, <span class="title">without</span> <span class="title">making</span> <span class="title">use</span> <span class="title">of</span> <span class="title">background</span> <span class="title">images</span>?</span>
</code></pre><p>Answers</p>
<pre><code><span class="tag">A</span>. It is not possible to do so.
<span class="tag">B</span>. <span class="attribute">border-color</span><span class="value">: <span class="hexcolor">#a0c7ff</span> <span class="hexcolor">#ffffff</span> <span class="hexcolor">#ffffff</span> <span class="hexcolor">#ffffff</span>;</span>     <span class="attribute">border-style</span><span class="value">: solid;</span>     <span class="attribute">border-width</span><span class="value">: <span class="number">20</span>px;</span>     <span class="attribute">width</span><span class="value">: <span class="number">0</span>px;</span>     <span class="attribute">height</span><span class="value">: <span class="number">0</span>px;</span>
C. <span class="attribute">background-color</span><span class="value">: <span class="hexcolor">#a0c7ff</span> <span class="hexcolor">#ffffff</span> <span class="hexcolor">#ffffff</span> <span class="hexcolor">#ffffff</span>;</span>     <span class="attribute">border-style</span><span class="value">: solid;</span>     <span class="attribute">border-width</span><span class="value">: <span class="number">20</span>px;</span>     <span class="attribute">width</span><span class="value">: <span class="number">0</span>px;</span>     <span class="attribute">height</span><span class="value">: <span class="number">0</span>px;</span>
D. <span class="attribute">background-color</span><span class="value">: <span class="hexcolor">#a0c7ff</span> <span class="hexcolor">#ffffff</span> <span class="hexcolor">#ffffff</span> <span class="hexcolor">#ffffff</span>;</span> <span class="attribute">border-style</span><span class="value">: solid;</span> <span class="attribute">border-width</span><span class="value">: <span class="number">1</span>px;</span> <span class="attribute">width</span><span class="value">: <span class="number">10</span>px;</span> <span class="attribute">height</span><span class="value">: <span class="number">10</span>px;</span>
</code></pre><h2 id="Question">Question</h2>
<pre><code>Which <span class="operator">of</span> <span class="operator">the</span> following will decrease <span class="number">50</span>px <span class="built_in">from</span> <span class="operator">a</span> DIV <span class="keyword">element</span> whose width is <span class="number">100</span>%?
</code></pre><p>Answers</p>
<pre><code><span class="tag">A</span>. <span class="attribute">width</span><span class="value">: calc(<span class="number">100</span>% - <span class="number">50</span>px);</span>
<span class="tag">B</span>. <span class="attribute">width</span><span class="value">: reduce(<span class="number">100</span>% - <span class="number">50</span>px);</span>
C. <span class="attribute">width</span><span class="value">: decrease(<span class="number">100</span>% - <span class="number">50</span>px);</span>
D. <span class="attribute">width</span><span class="value">: <span class="number">100</span>% - <span class="number">50</span>px;</span>
</code></pre><h2 id="Question-1">Question</h2>
<pre><code>Which <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">given</span> options <span class="keyword">is</span>/are equivalent <span class="keyword">to</span> <span class="keyword">the</span> following rule?
DIV { line-height: <span class="number">1.2</span>; font-size: <span class="number">10</span>pt }
</code></pre><p>Answers AC</p>
<pre><code><span class="tag">A</span>. <span class="tag">DIV</span> <span class="rules">{ <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.2</span>em</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10</span>pt </span></span></span>}
<span class="tag">B</span>. <span class="tag">DIV</span> <span class="rules">{ <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">12</span>em</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10</span>pt </span></span></span>}
<span class="tag">C</span>. <span class="tag">DIV</span> <span class="rules">{ <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">120</span>%</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10</span>pt </span></span></span>}
<span class="tag">D</span>. <span class="tag">DIV</span> <span class="rules">{ <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">20</span>%</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10</span>pt </span></span></span>}
<span class="tag">E</span>. <span class="tag">DIV</span> <span class="rules">{ <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">80</span>%</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10</span>pt </span></span></span>}
</code></pre><h2 id="Question-2">Question</h2>
<pre><code>Which <span class="constant">one</span> <span class="operator">of</span> <span class="operator">the</span> following is appropriate <span class="built_in">to</span> mirror/flip <span class="keyword">text</span> <span class="keyword">by</span> <span class="keyword">using</span> CSS3?
</code></pre><p>Answers A</p>
<pre><code><span class="tag">A</span>. <span class="class">.mirror_text</span>{
    -moz-<span class="attribute">transform</span><span class="value">: scaleX(-<span class="number">1</span>);</span>
    -o-<span class="attribute">transform</span><span class="value">: scaleX(-<span class="number">1</span>);</span>
    -webkit-<span class="attribute">transform</span><span class="value">: scaleX(-<span class="number">1</span>);</span>
    <span class="attribute">transform</span><span class="value">: scaleX(-<span class="number">1</span>);</span>
    <span class="attribute">filter</span><span class="value">: FlipH;</span>
    -ms-<span class="attribute">filter</span><span class="value">: <span class="string">&quot;FlipH&quot;</span>;</span>
    }
<span class="tag">B</span>. <span class="class">.mirror_text</span>{
    Box-reflect; 20px <span class="attribute">right</span>;
    }
C. <span class="class">.mirror_text</span>{
    Box-reflect; 20px <span class="attribute">left</span>;
    }
D. <span class="class">.mirror_text</span>{
    -moz-<span class="attribute">transform</span><span class="value">: rotate(-<span class="number">180</span>deg);</span>
    -webkit-<span class="attribute">transform</span><span class="value">: rotate(-<span class="number">180</span>deg);</span>
    <span class="attribute">transform</span><span class="value">: rotate(-<span class="number">180</span>deg);</span>
    }
</code></pre><h2 id="Question-3">Question</h2>
<pre><code>Which statement <span class="keyword">is</span> correct <span class="keyword">given</span> <span class="keyword">the</span> following?
box-shadow:<span class="number">30</span>px <span class="number">20</span>px <span class="number">10</span>px <span class="number">5</span>px black;
</code></pre><p>Answers B</p>
<pre><code>A. The shadow will be spread out <span class="keyword">to</span> <span class="number">30</span>px top, <span class="number">20</span>px right, <span class="number">10</span>px bottom, <span class="number">5</span>px left.
B. The position <span class="keyword">of</span> <span class="keyword">the</span> horizontal black shadow <span class="keyword">is</span> <span class="number">30</span>px <span class="keyword">and</span> <span class="keyword">the</span> position <span class="keyword">of</span> <span class="keyword">the</span> vertical black shadow <span class="keyword">is</span> <span class="number">20</span>px <span class="keyword">and</span> blur distance <span class="keyword">is</span> <span class="number">10</span>px <span class="keyword">and</span> size <span class="keyword">of</span> shadow <span class="keyword">is</span> <span class="number">5</span>px.
C. The position <span class="keyword">of</span> <span class="keyword">the</span> vertical  black shadow <span class="keyword">is</span> <span class="number">30</span>px <span class="keyword">and</span> <span class="keyword">the</span> position <span class="keyword">of</span> <span class="keyword">the</span> horizontal black shadow <span class="keyword">is</span> <span class="number">20</span>px <span class="keyword">and</span> size <span class="keyword">of</span> shadow <span class="keyword">is</span> <span class="number">10</span>px <span class="keyword">and</span> blur distance <span class="keyword">is</span> <span class="number">5</span>px.
D. The shadow will be spread out <span class="keyword">to</span> <span class="number">30</span>px top <span class="keyword">and</span> bottom, <span class="number">20</span>px left <span class="keyword">and</span> right <span class="keyword">with</span> <span class="number">10</span>px blur distance, <span class="number">5</span>px shadow size.
</code></pre><p>Helpers</p>
<pre><code>box-shadow: horizontalOffset verticalOffset Blur Spread Color. Spread <span class="keyword">is</span> also known <span class="keyword">as</span> the Size. Answer <span class="number">2</span> <span class="keyword">is</span> correct.
http:<span class="comment">//www.w3schools.com/cssref/css3_pr_box-shadow.asp</span>
</code></pre><p>Question</p>
<pre><code><span class="tag">While</span> <span class="tag">rendering</span> <span class="tag">the</span> <span class="tag">following</span> <span class="tag">code</span>, <span class="tag">what</span> <span class="tag">is</span> <span class="tag">the</span> <span class="tag">role</span> <span class="tag">of</span> &quot;<span class="tag">src</span>&quot; <span class="tag">propery</span>?
<span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">{
    <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">&quot;calibriforh1&quot;</span></span></span>;
    <span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">local(<span class="string">&quot;calibri&quot;</span>)</span>, <span class="function">url(calibri.woff)</span></span></span>;
<span class="rule">}</span></span>
<span class="tag">h1</span> <span class="rules">{
    <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">&quot;calibriforh1&quot;</span>,
    arial, sans-serif</span></span>;
<span class="rule">}</span></span>
</code></pre><p>Answers A</p>
<pre><code>A. It&apos;s <span class="keyword">for</span> searching <span class="keyword">the</span> user&apos;s system <span class="keyword">for</span> a <span class="string">&quot;calibri&quot;</span> font, <span class="keyword">and</span> <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">does</span> <span class="keyword">not</span> exist, <span class="keyword">it</span> will load <span class="keyword">the</span> font <span class="keyword">from</span> <span class="keyword">the</span> server instead.
B. It&apos;s <span class="keyword">for</span> searching <span class="keyword">the</span> user&apos;s system <span class="keyword">for</span> a <span class="string">&quot;calibri&quot;</span> font, <span class="keyword">and</span> <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">does</span> <span class="keyword">not</span> exist, <span class="keyword">it</span> will load user&apos;s system&apos;s default font instead.
C. It&apos;s <span class="keyword">for</span> loading <span class="keyword">the</span> user&apos;s system&apos;s default font.
D. None <span class="keyword">of</span> these.
</code></pre><p>Helper</p>
<pre><code><span class="label">https:</span>//developer<span class="preprocessor">.mozilla</span><span class="preprocessor">.org</span>/en-US/docs/Web/CSS/@font-face
</code></pre><p><a href="http://odesk-tests.com/tests/146/questions/395" target="_blank" rel="external">http://odesk-tests.com/tests/146/questions/395</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Tests to check whether you really know css.</p>
]]>
    
    </summary>
    
      <category term="Style" scheme="http://blog.gyf1.com/categories/style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[10 digest() iterations reached. Aborting]]></title>
    <link href="http://blog.gyf1.com/2015/01/22/10-digest()-iterations-reached-aborting/"/>
    <id>http://blog.gyf1.com/2015/01/22/10-digest()-iterations-reached-aborting/</id>
    <published>2015-01-22T09:05:04.000Z</published>
    <updated>2015-01-22T09:06:31.000Z</updated>
    <content type="html"><![CDATA[<p>&#x901A;&#x8FC7;&#x6392;&#x9664;&#x4EE3;&#x7801;&#xFF0C;&#x53D1;&#x73B0;&#x9519;&#x8BEF;&#x539F;&#x56E0;&#xFF1A;</p>
<p>&#x9519;&#x8BEF;&#x4EE3;&#x7801;</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">&quot;form-group&quot;</span> <span class="attribute">ng-repeat</span>=<span class="value">&quot;option in arrOptions&quot;</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">&quot;col-sm-2 control-label&quot;</span>&gt;</span>&#x9009;&#x62E9;<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">&quot;col-sm-10&quot;</span>&gt;</span>
          <span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">&quot;width: 308px;height: 45px;line-height: 45px;display: inline-block;margin-bottom: 30px;&quot;</span>&gt;</span>
            <span class="tag">&lt;<span class="title">ng-dropdown-tree
</span>              <span class="attribute">optionkey</span>=<span class="value">&quot;&apos;value&apos;&quot;</span>
              <span class="attribute">label</span>=<span class="value">&quot;GeneratedDropdownTreeLabel(option)&quot;</span>
              <span class="attribute">objselected</span>=<span class="value">&quot;GeneratedDropdownTreeSelectedNode(option)&quot;</span>
              <span class="attribute">items</span>=<span class="value">&quot;option.option_values&quot;</span>
              <span class="attribute">on-select-node</span>=<span class="value">&quot;OptionTypeSelected(node)&quot;</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">ng-dropdown-tree</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>&#x6B63;&#x786E;&#x4EE3;&#x7801;</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">&quot;form-group&quot;</span> <span class="attribute">ng-repeat</span>=<span class="value">&quot;option in arrOptions&quot;</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">&quot;col-sm-10&quot;</span>&gt;</span>
          <span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">&quot;width: 308px;height: 45px;line-height: 45px;display: inline-block;margin-bottom: 30px;&quot;</span>&gt;</span>
            <span class="tag">&lt;<span class="title">ng-dropdown-tree
</span>              <span class="attribute">optionkey</span>=<span class="value">&quot;&apos;value&apos;&quot;</span>
              <span class="attribute">label</span>=<span class="value">&quot;&apos;&#x8BF7;&#x9009;&#x62E9;&apos; + option.name&quot;</span>
              <span class="attribute">objselected</span>=<span class="value">&quot;objSelectedCategory&quot;</span>
              <span class="attribute">items</span>=<span class="value">&quot;option.option_values&quot;</span>
              <span class="attribute">on-select-node</span>=<span class="value">&quot;OptionTypeSelected(node)&quot;</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">ng-dropdown-tree</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>&#x901A;&#x8FC7;&#x6392;&#x9664;&#x4EE3;&#x7801;&#xFF0C;&#x53D1;&#x73B0;&#x9519;&#x8BEF;&#x539F;&#x56E0;&#xFF1A;</p>
<p>&#x9519;&#x8BEF;&]]>
    </summary>
    
      <category term="AngularJS" scheme="http://blog.gyf1.com/tags/angularjs/"/>
    
      <category term="JavaScript" scheme="http://blog.gyf1.com/categories/javascript/"/>
    
  </entry>
  
</feed>
